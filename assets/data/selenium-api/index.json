{"hash":"74078440e78cf7eff9cd218b18924da13af0a419","data":{"post":{"title":"Selenium API","content":"\n## Подключение зависимости\n\n```\n// https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java\nimplementation 'org.seleniumhq.selenium:selenium-java:4.2.2'\n```\n\n## Загрузка драйвера через WebDriverManager\n\n1. Нужно импортировать библиотеку\n\n```\nimplementation 'io.github.bonigarcia:webdrivermanager:5.2.0'\n```\n\n2. Перед запуском теста вызвать \n\n- для Chrome\n\n```\nWebDriverManager.chromedriver().setup();\n```\n\n## Открыть и закрыть браузер\n\n- Chrome\n```java\nChromeOptions options = new ChromeOptions();\ndriver = new ChromeDriver(options);\n\ndriver.quit();\n```\n\n- Microsoft Edge\n```java\nEdgeOptions options = new EdgeOptions();\ndriver = new EdgeDriver(options);\n\ndriver.quit();\n```\n\n- Firefox\n```java\nFirefoxOptions options = new FirefoxOptions();\ndriver = new FirefoxDriver(options);\n\ndriver.quit();\n```\n\n- Internet Explorer\n\nРекомендуется использовать 32-bit версию драйвера.\n\n```java\nInternetExplorerOptions options = new InternetExplorerOptions();\ndriver = new InternetExplorerDriver(options);\n\ndriver.quit();\n```\n\nMicrosoft Edge можно использовать в режиме совместимости с IE с помощью драйвера IE.\n\n```java\nInternetExplorerOptions options = new InternetExplorerOptions();\noptions.attachToEdgeChrome();\noptions.withEdgeExecutablePath(\"/path/to/edge/browser\");\n  \ndriver = new InternetExplorerDriver(options);\n  \ndriver.quit();\n```\n\n- Opera\n\nПоскольку драйвер Opera не поддерживает синтаксис w3c, а основан на Chromium, рекомендуется управлять браузером Opera с помощью chromedriver.\n\n```java\nChromeOptions options = new ChromeOptions();\noptions.setBinary(\"/path/to/opera/browser\");\n  \ndriver = new ChromeDriver(options);\n  \ndriver.quit();\n```\n\n- Safari\n\nЧтобы включить автоматизацию в Safari, выполните следующую команду из терминала:\n\n```\nsafaridriver --enable\n```\n\n```java\nSafariOptions options = new SafariOptions();\ndriver = new SafariDriver(options);\n  \ndriver.quit();\n```\n\n## Начало работы\n\n### Старт сессии\n```java\ndriver = new ChromeDriver();\n```\n\n### Переход на страницу\n```java\ndriver.get(\"https://google.com\");\n```\n\n### Получить заголовок страницы\n```java\nString title = driver.getTitle();\n```\n\n### Ожидания \n```java\ndriver.manage().timeouts().implicitlyWait(Duration.ofMillis(500));\n```\n\n### Поиск элементов \n```java\nWebElement searchBox = driver.findElement(By.name(\"q\"));\nWebElement searchButton = driver.findElement(By.name(\"btnK\"));\n```\n\n### Действия на странице\n```java\nsearchBox.sendKeys(\"Selenium\");\nsearchButton.click();\n```\n\n### Запрос информации об элементе\n```java\nString value = searchBox.getAttribute(\"value\");\n```\n\n## Capabilities\n\n#### browserName\nЗадает имя браузера который нужно запустить\n#### browserVersion\nЗадает версию браузера. Можно не указывать.\n#### pageLoadStrategy\nПри переходе на новую страницу через URL, по умолчанию Selenium ждет пока страница будет загружена, выполняется проверка через js: `document.readyStatus` должен равняться `complete`. Однако для некоторых случаев, например для одностраничных сайтов, не имеет смысла ждать пока загрузится вся страница, так как элементы подгружаются динамически. В этом случае можно изменить этот параметр.\n\n> при изменении pageLoadStrategy обратите внимание, что стратегия ожидания (implicit/explicit wait) настроена, чтобы компенсировать нестабильность прогонов;\n\nМожет иметь одно из 3 значений: normal, eager, none;\n\n|Strategy|Ready State|Note|\n|---|---|---|\n|normal|complete|Используется по умолчанию; ждет пока все ресурсы страницы будут загружены|\n|eager|interactive|Доступ к DOM загрузился, но остальные ресурсы например картинки могут еще подгружаться|\n|none| Any| Не делает проверку загрузки ресурсов страницы|\n\n```java\nChromeOptions chromeOptions = new ChromeOptions();\nchromeOptions.setPageLoadStrategy(PageLoadStrategy.NORMAL);\nWebDriver driver = new ChromeDriver(chromeOptions);\n```\n\n#### platformName\nЗадает имя операционной системы необходимой для запуска\n\n#### acceptInsecureCerts\nВыполняется проверка сертификата безопасности сайта(TLS Certificate);\n\nесли выбрано `false` - то при наличии на сайте просроченного или невалидного сертификата будет выбрасываться исключение;  \nесли выбрано `true` - все сертификаты даже небезопасные будут считаться валидными\n\nПосле установки опции acceptInsecureCerts будет работать для все сессии.\n\n#### timeouts\nSelenium устанавливает определенные интервалы в течение которого пользователь может взаимодействовать с сайтом;\n\n- script timeout  \nТаймаут выполнения скриптов в текущем контексте. По умолчанию 30_000\n- Page Load Timeout  \nТаймаут загрузки страницы. По умолчанию 300_000. При превышении выбрасывает TimeoutException\n- Implicit Wait Timeout  \nвремя ожидания загрузки элемента страницы. По умолчанию 0.\n\n#### unhandledPromptBehavior\nЗадает поведение когда открывается диалоговое окно системы\nМожет иметь следущие значения:\n- dismiss\n- accept\n- dismiss and notify\n- accept and notify\n- ignore\n\nПо умолчанию dismiss and notify.\n\n#### strictFileInteractability\nЭта опция указывает должна ли применяться строгая проверка видимости поля input с атрибутом type=\"file\". Так как строгая проверка по умолчанию отключена, это может влиять на работу метода element.sendKeys при работе со скрытым элементом управления.\n\n#### proxy\nПрокси-сервер - это посредник для запросов между клиентом и сервером.\nТрафик проходит через прокси-сервер на пути к запрошенному адресу и обратно.\n\n```java\nProxy proxy = new Proxy();\nproxy.setHttpProxy(\"<HOST:PORT>\");\nChromeOptions options = new ChromeOptions();\noptions.setCapability(\"proxy\", proxy);\nWebDriver driver = new ChromeDriver(options);\n```\n\n### Firefox\n \nМожно установить кастомный профиль с нужными настройками\n\n```java\nFirefoxProfile profile = new FirefoxProfile();\nFirefoxOptions options = new FirefoxOptions();\noptions.setProfile(profile);\ndriver = new RemoteWebDriver(options);\n```\n\n### Internet Explorer\n\n#### fileUploadDialogTimeout\nВ некоторых окружениях Internet Explorer может с задержкой открывать окно Загрузка Файла. IEDriver по умолчанию устанавливает timeout ожидания этого окна в 1_000мс, но с помощью опции fileUploadDialogTimeout это время можно увеличить\n\n```java\nInternetExplorerOptions options = new InternetExplorerOptions();\noptions.waitForUploadDialogUpTo(Duration.ofSeconds(2));\nWebDriver driver = new RemoteWebDriver(options);\n```\n#### ensureCleanSession\nЕсли установлено в true - то кеш, история браузера и файлы cookie будут очищены для всех экземпляров Internet Explorer(в том числе запущенных вручную). По умолчанию false. При использовании этой опции при запуске браузера, дайвер будет ждать очистки кеша.\n\n```java\nInternetExplorerOptions options = new InternetExplorerOptions();\noptions.destructivelyEnsureCleanSession();\nWebDriver driver = new RemoteWebDriver(options);\n```\n\n#### ignoreZoomSetting\nДрайвер InternetExplorer ожидает, что уровень масштабирования браузера будет равен 100%, иначе драйвер выдаст исключение. Это поведение по умолчанию можно отключить, установив для ignoreZoomSetting значение true.\n\n```java\nInternetExplorerOptions options = new InternetExplorerOptions();\noptions.ignoreZoomSettings();\nWebDriver driver = new RemoteWebDriver(options);\n```\n\n#### ignoreProtectedModeSettings\nЕсли Protected Mode не включен и настройки защищенного режима не одинаковы для всех зон, драйвером будет выдано исключение. \n\nЕсли установлено значение true, драйвер будет игнорировать эту настройку, но тесты могут работать нестабильно, переставать отвечать или браузеры могут зависать. \n\n```java\nInternetExplorerOptions options = new InternetExplorerOptions();\noptions.introduceFlakinessByIgnoringSecurityDomains();\nWebDriver driver = new RemoteWebDriver(options);\n```\n\n#### silent\nЕсли установлено значение true, эта опция игнорирует диагностические выходные данные IEDriverServer.\n\n```java\nInternetExplorerOptions options = new InternetExplorerOptions();\noptions.setCapability(\"silent\", true);\nWebDriver driver = new InternetExplorerDriver(options);\n```\n\n#### Command-Line Options\nInternet Explorer включает несколько параметров командной строки, которые позволяют устранять неполадки и настраивать браузер. \n\nНиже описаны несколько поддерживаемых параметров командной строки.\n- -private: используется для запуска IE в режиме приватного просмотра. Это работает для IE 8 и более поздних версий. \n- -k : запускает Internet Explorer в режиме киоска. Браузер открывается в развернутом окне, в котором нет адресной строки, кнопок навигации или строки состояния. \n- -extoff : Запускает IE в режиме без дополнений. Этот параметр специально используется для устранения неполадок с надстройками браузера. Работает в IE 7 и более поздних версиях. \n\n> ForceCreateProcessApi должен быть включен для того, чтобы аргументы командной строки работали.\n\n```java\nimport org.openqa.selenium.Capabilities;\nimport org.openqa.selenium.ie.InternetExplorerDriver;\nimport org.openqa.selenium.ie.InternetExplorerOptions;\n\npublic class ieTest {\n    public static void main(String[] args) {\n        InternetExplorerOptions options = new InternetExplorerOptions();\n        options.useCreateProcessApiToLaunchIe();\n        options.addCommandSwitches(\"-k\");\n        InternetExplorerDriver driver = new InternetExplorerDriver(options);\n        try {\n            driver.get(\"https://google.com/ncr\");\n            Capabilities caps = driver.getCapabilities();\n            System.out.println(caps);\n        } finally {\n            driver.quit();\n        }\n    }\n}\n```\n\n#### forceCreateProcessApi\nПринудительно запускает Internet Explorer с помощью API CreateProcess. Значение по умолчанию false. Для IE 8 и более поздних версий этот параметр требует, чтобы для параметра реестра \"TabProcGrowth\" было установлено значение 0.\n\n```java\nimport org.openqa.selenium.Capabilities;\nimport org.openqa.selenium.ie.InternetExplorerDriver;\nimport org.openqa.selenium.ie.InternetExplorerOptions;\n\npublic class ieTest {\n    public static void main(String[] args) {\n        InternetExplorerOptions options = new InternetExplorerOptions();\n        options.useCreateProcessApiToLaunchIe();\n        InternetExplorerDriver driver = new InternetExplorerDriver(options);\n        try {\n            driver.get(\"https://google.com/ncr\");\n            Capabilities caps = driver.getCapabilities();\n            System.out.println(caps);\n        } finally {\n            driver.quit();\n        }\n    }\n}\n``` \n## Работа с браузером\n\n### Получение заголовка\n```java\ndriver.getTitle();\n```\n\n### Получение текущего URL\n\n```java\ndriver.getCurrentUrl();\n```\n\n### Навигация\n\n#### Переход на страницу\n```java\n//Convenient\ndriver.get(\"https://selenium.dev\");\n\n//Longer way\ndriver.navigate().to(\"https://selenium.dev\");\n```\n\n#### Возврат назад\n```java\ndriver.navigate().back();\n```\n\n#### Переход вперед\n```java\ndriver.navigate().forward();\n```\n\n#### Обновить страницу\n```java\ndriver.navigate().refresh();\n```\n\n### JavaScript окна\n#### Ожидание всплавающего окна браузера\n```java\nAlert alert = wait.until(ExpectedConditions.alertIsPresent());\n```\n\n#### Получить текст из всплывающего окна\n```java\nString text = alert.getText();\n```\n\n#### Нажать OK кнопку\n```java\nalert.accept();\n```\n\n#### Отклонить всплывающее окно\n```java\nalert.dismiss();\n```\n\n#### Ввести текст в всплывающем окне\n```java\nalert.sendKeys(\"Selenium\");\n```\n\n### Работа с Cookie\n\n#### Добавить Cookie\nПрежде чем выставлять куки нужно перейти на страницу сайта для которого нужно применить куки. Еслистраница долго грузится можно перейти на какую нибудь легковесную, например, страница с ошибкой 404.\n\n```java\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class addCookie {\n    public static void main(String[] args) {\n        WebDriver driver = new ChromeDriver();\n        try {\n            driver.get(\"http://www.example.com\");\n\n            // Adds the cookie into current browser context\n            driver.manage().addCookie(new Cookie(\"key\", \"value\"));\n        } finally {\n            driver.quit();\n        }\n    }\n}\n  \n```\n#### Проверка что Cookie \n#### Получить имя Cookie\n\n#### Получить все Cookie\n\n#### Удалить Cookie\n\n#### Удалить все Cookie\n\n#### Проверка что Cookie отправляются с одного сайта\nПредназначенно для предотвращения подделки межсайтовых запросов (CSRF).\n\n- При установке значения Lax подразумевается, что куки должны отправляться при серфинге по одному сайту или через GET серфинг на ваш сайт с других сайтов. \n- Значение Strict ограничивало cookie запросами, исходящими только от одного сайта.\n\n> Работает только для Chrome(версия 80+) и Firefox(версия 79+) в Selenium 4 и более поздних.\n\n```java\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class cookieTest {\n  public static void main(String[] args) {\n    WebDriver driver = new ChromeDriver();\n    try {\n      driver.get(\"http://www.example.com\");\n      Cookie cookie = new Cookie.Builder(\"key\", \"value\").sameSite(\"Strict\").build();\n      Cookie cookie1 = new Cookie.Builder(\"key\", \"value\").sameSite(\"Lax\").build();\n      driver.manage().addCookie(cookie);\n      driver.manage().addCookie(cookie1);\n      System.out.println(cookie.getSameSite());\n      System.out.println(cookie1.getSameSite());\n    } finally {\n      driver.quit();\n    }\n  }\n}\n```\n\n### Работа с iFrame\n\nФреймы — это устаревшее средство создания макета сайта из нескольких документов в одном домене. Вы вряд ли будете работать с ними, если вы не работаете с веб-приложением до HTML5. \n\nФреймы iframe позволяют вставлять документ из совершенно другого домена и до сих пор широко используются. \n\n#### Переключение на фрейм через WebElement\n```java\nWebElement iframe = driver.findElement(By.cssSelector(\"#modal>iframe\"));\n//Switch to the frame\ndriver.switchTo().frame(iframe);\n```\n#### Переключение на фрейм через имя или id\n```java\n//Using the ID\ndriver.switchTo().frame(\"buttonframe\");\n\n//Or using the name instead\ndriver.switchTo().frame(\"myframe\");\n```\n\n#### Переключение на фрейм через index\n```java\n// Switches to the second frame\ndriver.switchTo().frame(1);\n```\n\n#### Возврат на основную страницу\n```java\n// Return to the top level\ndriver.switchTo().defaultContent();\n```\n\n### Работа с окнами и вкладками\n\n#### Получить обработчик текущего окна\n```java\ndriver.getWindowHandle();\n```\n\n#### Переключиться на новое окно или вкладку\n```java\nString originalWindow = driver.getWindowHandle();\n\n//Check we don't have other windows open already\nassert driver.getWindowHandles().size() == 1;\n\n//Click the link which opens in a new window\ndriver.findElement(By.linkText(\"new window\")).click();\n\n//Wait for the new window or tab\nwait.until(numberOfWindowsToBe(2));\n\n//Loop through until we find a new window handle\nfor (String windowHandle : driver.getWindowHandles()) {\n    if(!originalWindow.contentEquals(windowHandle)) {\n        driver.switchTo().window(windowHandle);\n        break;\n    }\n}\n\n//Wait for the new tab to finish loading content\nwait.until(titleIs(\"Selenium documentation\"));\n```\n\n#### Создать(открыть) новое окно или вкладку и переключиться на нее(Selenium 4)\n```java\n// Opens a new tab and switches to new tab\ndriver.switchTo().newWindow(WindowType.TAB);\n\n// Opens a new window and switches to new window\ndriver.switchTo().newWindow(WindowType.WINDOW);\n```\n\n#### Закрыть окно или вкладку\n```java\n//Close the tab or window\ndriver.close();\n\n//Switch back to the old tab or window\ndriver.switchTo().window(originalWindow);\n```\n\n#### Закрыть браузер и закончить сессию\n```java\ndriver.quit();\n```\n\n#### Управление окном\n\n##### Получить размер окна\nВыдает размер в пикселях\n\n```java\n//Access each dimension individually\nint width = driver.manage().window().getSize().getWidth();\nint height = driver.manage().window().getSize().getHeight();\n\n//Or store the dimensions and query them later\nDimension size = driver.manage().window().getSize();\nint width1 = size.getWidth();\nint height1 = size.getHeight();\n```\n\n##### Установить размер окна\n```java\ndriver.manage().window().setSize(new Dimension(1024, 768));\n```\n\n##### Получить положение окна\n```java\n// Access each dimension individually\nint x = driver.manage().window().getPosition().getX();\nint y = driver.manage().window().getPosition().getY();\n\n// Or store the dimensions and query them later\nPoint position = driver.manage().window().getPosition();\nint x1 = position.getX();\nint y1 = position.getY();\n```\n\n#### Переместить окно\n```java\n// Move the window to the top left of the primary monitor\ndriver.manage().window().setPosition(new Point(0, 0));\n```\n\n##### Увеличить окно на максимум\n```java\ndriver.manage().window().maximize();\n```\n\n##### Свернуть окно(Selenium 4)\n```java\ndriver.manage().window().minimize();\n```\n\n##### Развернуть окно на полный экран\n```java\ndriver.manage().window().fullscreen();\n```\n\n##### Сделать скриншот\n```java\nimport org.apache.commons.io.FileUtils;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport java.io.*;\nimport org.openqa.selenium.*;\n\npublic class SeleniumTakeScreenshot {\n    public static void main(String args[]) throws IOException {\n        WebDriver driver = new ChromeDriver();\n        driver.get(\"http://www.example.com\");\n        File scrFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);\n        FileUtils.copyFile(scrFile, new File(\"./image.png\"));\n        driver.quit();\n    }\n}\n```\n\n##### Сделать скриншот элемента\n```java\nimport org.apache.commons.io.FileUtils;\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport java.io.File;\nimport java.io.IOException;\n\npublic class SeleniumelementTakeScreenshot {\n  public static void main(String args[]) throws IOException {\n    WebDriver driver = new ChromeDriver();\n    driver.get(\"https://www.example.com\");\n    WebElement element = driver.findElement(By.cssSelector(\"h1\"));\n    File scrFile = element.getScreenshotAs(OutputType.FILE);\n    FileUtils.copyFile(scrFile, new File(\"./image.png\"));\n    driver.quit();\n  }\n}\n```\n\n##### Выполнить скрипт\n```java\n    //Creating the JavascriptExecutor interface object by Type casting\n      JavascriptExecutor js = (JavascriptExecutor)driver;\n    //Button Element\n      WebElement button =driver.findElement(By.name(\"btnLogin\"));\n    //Executing JavaScript to click on element\n      js.executeScript(\"arguments[0].click();\", button);\n    //Get return value from script\n      String text = (String) js.executeScript(\"return arguments[0].innerText\", button);\n    //Executing JavaScript directly\n      js.executeScript(\"console.log('hello world')\");\n```\n\n##### Напечатать страницу\n> Необходимо чтобы Chromium браузер был в режиме headless\n```java\n    import org.openqa.selenium.print.PrintOptions;\n\n    driver.get(\"https://www.selenium.dev\");\n    printer = (PrintsPage) driver;\n\n    PrintOptions printOptions = new PrintOptions();\n    printOptions.setPageRanges(\"1-2\");\n\n    Pdf pdf = printer.print(printOptions);\n    String content = pdf.getContent();\n```\n\n## Элементы\n\n### Локаторы\n\n#### Относительные локаторы (Selenium 4)\n\n##### Above\n```java\nBy emailLocator = RelativeLocator.with(By.tagName(\"input\")).above(By.id(\"password\"));\n```\n\n##### Below\n```java\nBy passwordLocator = RelativeLocator.with(By.tagName(\"input\")).below(By.id(\"email\"));\n```\n\n##### Left of\n```java\nBy cancelLocator = RelativeLocator.with(By.tagName(\"button\")).toLeftOf(By.id(\"submit\"));\n```\n\n##### Right of\n```java\nBy submitLocator = RelativeLocator.with(By.tagName(\"button\")).toRightOf(By.id(\"cancel\"));\n```\n\n##### Near\n```java\nBy emailLocator = RelativeLocator.with(By.tagName(\"input\")).near(By.id(\"lbl-email\"));\n```\n\n### Поиск элементов\n```java\nWebElement vegetable = driver.findElement(By.className(\"tomatoes\"));\n```\n\n#### Поиск дочернего элемента \n```java\n// не оптимальный способ\nWebElement fruits = driver.findElement(By.id(\"fruits\"));\nWebElement fruit = fruits.findElement(By.id(\"tomatoes\"));\n\n// так лучше\nWebElement fruit = driver.findElement(By.cssSelector(\"#fruits .tomatoes\"));\n```\n\n#### Поиск нескольких элементов\n```java\nList<WebElement> plants = driver.findElements(By.tagName(\"li\"));\n```\n\n#### Получить активный элемент\nАктивный элемент - на котором фокус.\n```java\ndriver.switchTo().activeElement()\n```\n\n### Взаимодействие с элеентами\n\n#### Клик - Click\n```java\ndriver.findElement(By.name(\"button\")).click();\n```\n\n#### Ввод символов - Send Keys\n```java\ndriver.findElement(By.name(\"q\")).sendKeys(\"q\" + Keys.ENTER);\n```\n\n#### Очистить поле - Clear\n```java\nWebElement searchInput = driver.findElement(By.name(\"q\"));\nsearchInput.sendKeys(\"selenium\");\n// Clears the entered text\nsearchInput.clear();\n```\n\n### Информация об элементе\n\n#### Видимость\n```java\nboolean isButtonVisible = driver.findElement(By.css(\"[name='login']\")).isDisplayed();\n```\n\n#### Доступность\n```java\nboolean value = driver.findElement(By.name(\"btnK\")).isEnabled();\n```\n\n#### Выбран ли\n```java\nboolean value = driver.findElement(By.cssSelector(\"input[type='checkbox']:first-of-type\")).isSelected();\n```\n\n#### Имя тега\n```java\nString value = driver.findElement(By.cssSelector(\"h1\")).getTagName();\n```\n\n#### Размер и положение\n```java\nRectangle res =  driver.findElement(By.cssSelector(\"h1\")).getRect();\n\n// Rectangle class provides getX,getY, getWidth, getHeight methods\nSystem.out.println(res.getX());\n```\n\n#### Получить CSS свойство\n```java\nString cssValue = driver.findElement(By.linkText(\"More information...\")).getCssValue(\"color\");\n```\n\n#### Получить текст элемента\n```java\nString text = driver.findElement(By.cssSelector(\"h1\")).getText();\n```\n\n### Работа с выпадающим списком\n\n#### Определить элемент выпадающего списка \n```java\nimport org.openqa.selenium.support.ui.Select;\n\nWebElement selectElement = driver.findElement(By.id(\"selectElementID\"));\nSelect selectObject = new Select(selectElement);\n```\n\n#### Выбрать опцию\n- по индексу\n```java\n// Select an <option> based upon the <select> element's internal index\nselectObject.selectByIndex(1);\n```\n\n- по значению\n```java\n// Select an <option> based upon its value attribute\nselectObject.selectByValue(\"value1\");\n```\n  \n- по видимому тексту\n```java\n// Select an <option> based upon its text\nselectObject.selectByVisibleText(\"Bread\");\n```\n\n#### Получить все выбранные опции\n```java\n// Return a List<WebElement> of options that have been selected\nList<WebElement> allSelectedOptions = selectObject.getAllSelectedOptions();\n```\n#### Получить первую выбранную опцию\n```java\n\n// Return a WebElement referencing the first selection option found by walking down the DOM\nWebElement firstSelectedOption = selectObject.getFirstSelectedOption();\n```\n\n#### Получить все опции\n```java\n// Return a List<WebElement> of options that the <select> element contains\nList<WebElement> allAvailableOptions = selectObject.getOptions();\n```\n\n#### Отменить выбор \n- по индексу\n```java\n// Deselect an <option> based upon the <select> element's internal index\nselectObject.deselectByIndex(1);\n```\n\n- по значению\n```java\n// Deselect an <option> based upon its value attribute\nselectObject.deselectByValue(\"value1\");\n```\n\n- по видимому тексту\n```java\n// Deselect an <option> based upon its text\nselectObject.deselectByVisibleText(\"Bread\");\n```\n\n- отменить все\n```java\n// Deselect all selected <option> elements\nselectObject.deselectAll();\n```\n\n#### Поддерживает ли список множественный выбор\n```java\nBoolean doesThisAllowMultipleSelections = selectObject.isMultiple();\n```\n\n## Удаленный браузер\n\n```java\nFirefoxOptions firefoxOptions = new FirefoxOptions();\nWebDriver driver = new RemoteWebDriver(new URL(\"http://www.example.com\"), firefoxOptions);\ndriver.get(\"http://www.google.com\");\ndriver.quit();\n```\n\n### Добавление опций\n```java\nChromeOptions chromeOptions = new ChromeOptions();\nchromeOptions.setCapability(\"browserVersion\", \"67\");\nchromeOptions.setCapability(\"platformName\", \"Windows XP\");\nWebDriver driver = new RemoteWebDriver(new URL(\"http://www.example.com\"), chromeOptions);\ndriver.get(\"http://www.google.com\");\ndriver.quit();\n```\n\n### Local file detector\nПозволяет загружать файл с клиентской машины на удаленную.\nНужно для загрузки файлов на сайт.\n\n```java\ndriver.setFileDetector(new LocalFileDetector());\n\ndriver.get(\"http://sso.dev.saucelabs.com/test/guinea-file-upload\");\nWebElement upload = driver.findElement(By.id(\"myfile\"));\nupload.sendKeys(\"/Users/sso/the/local/path/to/darkbulb.jpg\");\n  \n```\n\n### ","description":"Selenium API","image":"null","category":{"id":"automation","title":"automation","path":"/category/automation/"},"date":"20/06/2022","path":"/selenium-api/","links":[{"title":"","items":[{"title":"Моя подготовка","link":"/moya-podgotovka/"},{"title":"Курс по автоматизации тестирования Java","link":"/kurs-po-avtomatizaczii-testirovaniya-java/"},{"title":"Профессионально работаем с IntelliJ IDEA","link":"/professionalno-rabotaem-s-intelli-j-idea/"},{"title":"Что такое Selenium?","link":"/chto-takoe-selenium/"},{"title":"Инфраструктура проекта автотестирования","link":"/infrastruktura-proekta-avtotestirovaniya/"},{"title":"Основы Java","link":"/osnovy-java/"}]}],"headings":[{"value":"Подключение зависимости","anchor":"#подключение-зависимости"},{"value":"Загрузка драйвера через WebDriverManager","anchor":"#загрузка-драйвера-через-webdrivermanager"},{"value":"Открыть и закрыть браузер","anchor":"#открыть-и-закрыть-браузер"},{"value":"Начало работы","anchor":"#начало-работы"},{"value":"Capabilities","anchor":"#capabilities"},{"value":"Работа с браузером","anchor":"#работа-с-браузером"},{"value":"Удаленный браузер","anchor":"#удаленный-браузер"}],"subtitles":[{"depth":2,"value":"Подключение зависимости","anchor":"#подключение-зависимости"},{"depth":2,"value":"Загрузка драйвера через WebDriverManager","anchor":"#загрузка-драйвера-через-webdrivermanager"},{"depth":2,"value":"Открыть и закрыть браузер","anchor":"#открыть-и-закрыть-браузер"},{"depth":2,"value":"Начало работы","anchor":"#начало-работы"},{"depth":3,"value":"Старт сессии","anchor":"#старт-сессии"},{"depth":3,"value":"Переход на страницу","anchor":"#переход-на-страницу"},{"depth":3,"value":"Получить заголовок страницы","anchor":"#получить-заголовок-страницы"},{"depth":3,"value":"Ожидания","anchor":"#ожидания"},{"depth":3,"value":"Поиск элементов","anchor":"#поиск-элементов"},{"depth":3,"value":"Действия на странице","anchor":"#действия-на-странице"},{"depth":3,"value":"Запрос информации об элементе","anchor":"#запрос-информации-об-элементе"},{"depth":2,"value":"Capabilities","anchor":"#capabilities"},{"depth":4,"value":"browserName","anchor":"#browsername"},{"depth":4,"value":"browserVersion","anchor":"#browserversion"},{"depth":4,"value":"pageLoadStrategy","anchor":"#pageloadstrategy"},{"depth":4,"value":"platformName","anchor":"#platformname"},{"depth":4,"value":"acceptInsecureCerts","anchor":"#acceptinsecurecerts"},{"depth":4,"value":"timeouts","anchor":"#timeouts"},{"depth":4,"value":"unhandledPromptBehavior","anchor":"#unhandledpromptbehavior"},{"depth":4,"value":"strictFileInteractability","anchor":"#strictfileinteractability"},{"depth":4,"value":"proxy","anchor":"#proxy"},{"depth":3,"value":"Firefox","anchor":"#firefox"},{"depth":3,"value":"Internet Explorer","anchor":"#internet-explorer"},{"depth":4,"value":"fileUploadDialogTimeout","anchor":"#fileuploaddialogtimeout"},{"depth":4,"value":"ensureCleanSession","anchor":"#ensurecleansession"},{"depth":4,"value":"ignoreZoomSetting","anchor":"#ignorezoomsetting"},{"depth":4,"value":"ignoreProtectedModeSettings","anchor":"#ignoreprotectedmodesettings"},{"depth":4,"value":"silent","anchor":"#silent"},{"depth":4,"value":"Command-Line Options","anchor":"#command-line-options"},{"depth":4,"value":"forceCreateProcessApi","anchor":"#forcecreateprocessapi"},{"depth":2,"value":"Работа с браузером","anchor":"#работа-с-браузером"},{"depth":3,"value":"Получение заголовка","anchor":"#получение-заголовка"},{"depth":3,"value":"Получение текущего URL","anchor":"#получение-текущего-url"},{"depth":3,"value":"Навигация","anchor":"#навигация"},{"depth":4,"value":"Переход на страницу","anchor":"#переход-на-страницу-1"},{"depth":4,"value":"Возврат назад","anchor":"#возврат-назад"},{"depth":4,"value":"Переход вперед","anchor":"#переход-вперед"},{"depth":4,"value":"Обновить страницу","anchor":"#обновить-страницу"},{"depth":3,"value":"JavaScript окна","anchor":"#javascript-окна"},{"depth":4,"value":"Ожидание всплавающего окна браузера","anchor":"#ожидание-всплавающего-окна-браузера"},{"depth":4,"value":"Получить текст из всплывающего окна","anchor":"#получить-текст-из-всплывающего-окна"},{"depth":4,"value":"Нажать OK кнопку","anchor":"#нажать-ok-кнопку"},{"depth":4,"value":"Отклонить всплывающее окно","anchor":"#отклонить-всплывающее-окно"},{"depth":4,"value":"Ввести текст в всплывающем окне","anchor":"#ввести-текст-в-всплывающем-окне"},{"depth":3,"value":"Работа с Cookie","anchor":"#работа-с-cookie"},{"depth":4,"value":"Добавить Cookie","anchor":"#добавить-cookie"},{"depth":4,"value":"Проверка что Cookie","anchor":"#проверка-что-cookie"},{"depth":4,"value":"Получить имя Cookie","anchor":"#получить-имя-cookie"},{"depth":4,"value":"Получить все Cookie","anchor":"#получить-все-cookie"},{"depth":4,"value":"Удалить Cookie","anchor":"#удалить-cookie"},{"depth":4,"value":"Удалить все Cookie","anchor":"#удалить-все-cookie"},{"depth":4,"value":"Проверка что Cookie отправляются с одного сайта","anchor":"#проверка-что-cookie-отправляются-с-одного-сайта"},{"depth":3,"value":"Работа с iFrame","anchor":"#работа-с-iframe"},{"depth":4,"value":"Переключение на фрейм через WebElement","anchor":"#переключение-на-фрейм-через-webelement"},{"depth":4,"value":"Переключение на фрейм через имя или id","anchor":"#переключение-на-фрейм-через-имя-или-id"},{"depth":4,"value":"Переключение на фрейм через index","anchor":"#переключение-на-фрейм-через-index"},{"depth":4,"value":"Возврат на основную страницу","anchor":"#возврат-на-основную-страницу"},{"depth":3,"value":"Работа с окнами и вкладками","anchor":"#работа-с-окнами-и-вкладками"},{"depth":4,"value":"Получить обработчик текущего окна","anchor":"#получить-обработчик-текущего-окна"},{"depth":4,"value":"Переключиться на новое окно или вкладку","anchor":"#переключиться-на-новое-окно-или-вкладку"},{"depth":4,"value":"Создать(открыть) новое окно или вкладку и переключиться на нее(Selenium 4)","anchor":"#создатьоткрыть-новое-окно-или-вкладку-и-переключиться-на-нееselenium-4"},{"depth":4,"value":"Закрыть окно или вкладку","anchor":"#закрыть-окно-или-вкладку"},{"depth":4,"value":"Закрыть браузер и закончить сессию","anchor":"#закрыть-браузер-и-закончить-сессию"},{"depth":4,"value":"Управление окном","anchor":"#управление-окном"},{"depth":5,"value":"Получить размер окна","anchor":"#получить-размер-окна"},{"depth":5,"value":"Установить размер окна","anchor":"#установить-размер-окна"},{"depth":5,"value":"Получить положение окна","anchor":"#получить-положение-окна"},{"depth":4,"value":"Переместить окно","anchor":"#переместить-окно"},{"depth":5,"value":"Увеличить окно на максимум","anchor":"#увеличить-окно-на-максимум"},{"depth":5,"value":"Свернуть окно(Selenium 4)","anchor":"#свернуть-окноselenium-4"},{"depth":5,"value":"Развернуть окно на полный экран","anchor":"#развернуть-окно-на-полный-экран"},{"depth":5,"value":"Сделать скриншот","anchor":"#сделать-скриншот"},{"depth":5,"value":"Сделать скриншот элемента","anchor":"#сделать-скриншот-элемента"},{"depth":5,"value":"Выполнить скрипт","anchor":"#выполнить-скрипт"},{"depth":5,"value":"Напечатать страницу","anchor":"#напечатать-страницу"},{"depth":5,"value":"Below","anchor":"#below"},{"depth":5,"value":"Left of","anchor":"#left-of"},{"depth":5,"value":"Right of","anchor":"#right-of"},{"depth":5,"value":"Near","anchor":"#near"},{"depth":3,"value":"Поиск элементов","anchor":"#поиск-элементов-1"},{"depth":4,"value":"Поиск дочернего элемента","anchor":"#поиск-дочернего-элемента"},{"depth":4,"value":"Поиск нескольких элементов","anchor":"#поиск-нескольких-элементов"},{"depth":4,"value":"Получить активный элемент","anchor":"#получить-активный-элемент"},{"depth":3,"value":"Взаимодействие с элеентами","anchor":"#взаимодействие-с-элеентами"},{"depth":4,"value":"Клик - Click","anchor":"#клик---click"},{"depth":4,"value":"Ввод символов - Send Keys","anchor":"#ввод-символов---send-keys"},{"depth":4,"value":"Очистить поле - Clear","anchor":"#очистить-поле---clear"},{"depth":3,"value":"Информация об элементе","anchor":"#информация-об-элементе"},{"depth":4,"value":"Видимость","anchor":"#видимость"},{"depth":4,"value":"Доступность","anchor":"#доступность"},{"depth":4,"value":"Выбран ли","anchor":"#выбран-ли"},{"depth":4,"value":"Имя тега","anchor":"#имя-тега"},{"depth":4,"value":"Размер и положение","anchor":"#размер-и-положение"},{"depth":4,"value":"Получить CSS свойство","anchor":"#получить-css-свойство"},{"depth":4,"value":"Получить текст элемента","anchor":"#получить-текст-элемента"},{"depth":3,"value":"Работа с выпадающим списком","anchor":"#работа-с-выпадающим-списком"},{"depth":4,"value":"Определить элемент выпадающего списка","anchor":"#определить-элемент-выпадающего-списка"},{"depth":4,"value":"Выбрать опцию","anchor":"#выбрать-опцию"},{"depth":4,"value":"Получить все выбранные опции","anchor":"#получить-все-выбранные-опции"},{"depth":4,"value":"Получить первую выбранную опцию","anchor":"#получить-первую-выбранную-опцию"},{"depth":4,"value":"Получить все опции","anchor":"#получить-все-опции"},{"depth":4,"value":"Отменить выбор","anchor":"#отменить-выбор"},{"depth":4,"value":"Поддерживает ли список множественный выбор","anchor":"#поддерживает-ли-список-множественный-выбор"},{"depth":2,"value":"Удаленный браузер","anchor":"#удаленный-браузер"},{"depth":3,"value":"Добавление опций","anchor":"#добавление-опций"},{"depth":3,"value":"Local file detector","anchor":"#local-file-detector"},{"depth":3,"value":"","anchor":""}],"tags":[{"id":"Автоматизация тестирования","title":"Автоматизация тестирования","path":"/tag/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}]},"comments":{"edges":[]}},"context":{}}