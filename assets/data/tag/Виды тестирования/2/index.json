{"hash":"7ce6058f470c3851afaa44882541a7f3d1089ffc","data":{"tag":{"title":"Виды тестирования","path":"/tag/%D0%92%D0%B8%D0%B4%D1%8B%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/","belongsTo":{"totalCount":15,"pageInfo":{"totalPages":2,"currentPage":2},"edges":[{"node":{"id":"be63b1908e8b0d387151ddea9164dd99","title":"Виды тестирования по уровню деталиции приложения (по уровню тестирования)","content":"\n## Модульное (компонентное) тестирование (Unit testing, Module testing, Component testing)\nНаправлено на проверку отдельных небольших частей приложения, которые (как правило) можно исследовать изолированно от других подобных частей. \n\nПри выполнении данного тестирования могут проверяться отдельные функции или методы классов, сами классы, взаимодействие классов, небольшие библиотеки, отдельные части приложения. Часто данный вид тестирования реализуется с использованием специальных технологий и инструментальных средств автоматизации тестирования, значительно упрощающих и ускоряющих разработку соответствующих тест-кейсов.\n\n«Юнит-тестирование», как правило, направлено на тестирование атомарных участков кода, «Модульное» — на тестирование классов и небольших библиотек, «Компонентное» — на тестирование библиотек и структурных частей приложения. Но эта классификация не стандартизирована, и у различных авторов можно встретить совершенно разные взаимоисключающие трактовки.\n\n## Интеграционное тестирование (Integration testing, Component integration testing, Pairwise integration testing, System integration testing, Incremental testing, Interface testing, Thread testing) \nНаправлено на проверку взаимодействия между несколькими частями приложения (каждая из которых, в свою очередь, проверена отдельно на стадии модульного тестирования). К сожалению, даже если мы работаем с очень качественными отдельными компонентами, «на стыке» их взаимодействия часто возникают проблемы. Именно эти проблемы и выявляет интеграционное тестирование. (См. также техники вос- ходящего, нисходящего и гибридного тестирования в хронологической классификации по иерархии компонентов.)\n\nПодходы к интеграционному тестированию:\n\n- Снизу вверх (Bottom Up Integration)\n\nВсе низкоуровневые модули, процедуры или функции собираются воедино и затем тестируются. После чего собирается следующий уровень модулей для проведения интеграционного тестирования. Данный подход считается полезным, если все или практически все модули, разрабатываемого уровня, готовы. Также данный подход помогает определить по результатам тестирования уровень готовности приложения.\n\n- Сверху вниз (Top Down Integration)\n\nВначале тестируются все высокоуровневые модули, и постепенно один за другим добавляются низкоуровневые. Все модули более низкого уровня симулируются заглушками с аналогичной функциональностью, затем по мере готовности они заменяются реальными активными компонентами. Таким образом мы проводим тестирование сверху вниз.\n\n- Большой взрыв («Big Bang» Integration)\n\nВсе или практически все разработанные модули собираются вместе в виде законченной системы или ее основной части, и затем проводится интеграционное тестирование. Такой подход очень хорош для сохранения времени. Однако если тест кейсы и их результаты записаны не верно, то сам процесс интеграции сильно осложнится, что станет преградой для команды тестирования при достижении основной цели интеграционного тестирования.\n\n## Системное тестирование (System testing) \nНаправлено на проверку всего приложения как единого целого, собранного из частей, проверенных на двух предыдущих стадиях. Здесь не только выявляются дефекты «на стыках» компонентов, но и появляется возможность полноценно взаимодействовать с приложением с точки зрения конечного пользователя, применяя множество других видов тестирования, перечисленных в данной главе.\n\n---\n\nС классификацией по уровню детализации приложения связан интересный печальный факт: если предыдущая стадия обнаружила проблемы, то на следующей стадии эти проблемы точно нанесут удар по качеству; если же предыдущая стадия не обнаружила проблем, это ещё никоим образом не защищает нас от проблем на следующей стадии.\n\nЕсли обратиться к словарю ISTQB и прочитать определение уровня тестирования (test level), то можно увидеть, что аналогичное разбиение на модульное, интеграционное и системное тестирование, к которым добавлено ещё и приёмочное тестирование, используется в контексте разделения областей ответственности на проекте. Но такая классификация больше относится к вопросам управления проектом, чем к тестированию в чистом виде, а потому выходит за рамки рассматриваемых нами вопросов.\n\n- Приемочное\n","date":"2022-05-16T00:00:00.000Z","path":"/vidy-testirovaniya-po-urovnyu-detaliczii-prilozheniya-po-urovnyu-testirovaniya/","icon":"fas fa-bug","image":"null","order":10,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Виды тестирования","path":"/tag/%D0%92%D0%B8%D0%B4%D1%8B%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}],"headings":[{"value":"Модульное (компонентное) тестирование (Unit testing, Module testing, Component testing)","anchor":"#модульное-компонентное-тестирование-unit-testing-module-testing-component-testing"},{"value":"Интеграционное тестирование (Integration testing, Component integration testing, Pairwise integration testing, System integration testing, Incremental testing, Interface testing, Thread testing)","anchor":"#интеграционное-тестирование-integration-testing-component-integration-testing-pairwise-integration-testing-system-integration-testing-incremental-testing-interface-testing-thread-testing"},{"value":"Системное тестирование (System testing)","anchor":"#системное-тестирование-system-testing"}]}},{"node":{"id":"48a2cbf9f6a2e3be841b2f6a6c6796b1","title":"Виды тестирования по принципам работы с приложением","content":"\n## Позитивное тестирование (Positive testing) \nНаправлено на исследование приложения в ситуации, когда все действия выполняются строго по инструкции без каких бы то ни было ошибок, отклонений, ввода неверных данных и т.д. \n\nЕсли позитивные тест-кейсы завершаются ошибками, это тревожный признак — приложение работает неверно даже в идеальных условиях (и можно предположить, что в неидеальных условиях оно работает ещё хуже). \n\nДля ускорения тестирования несколько позитивных тест-кейсов можно объединять (например, перед отправкой заполнить все поля формы верными значениями) — иногда это может усложнить диагностику ошибки, но существенная экономия времени компенсирует этот риск.\n\n## Негативное тестирование (Negative testing, Invalid testing)\nНаправлено на исследование работы приложения в ситуациях, когда с ним выполняются (некорректные) операции и/или используются данные, потенциально приводящие к ошибкам (классика жанра — деление на ноль). \n\nПоскольку в реальной жизни таких ситуаций значительно больше (пользователи допускают ошибки, злоумышленники осознанно «ломают» приложение, в среде работы приложения возникают проблемы и т. д.), негативных тест-кейсов оказывается значительно больше, чем позитивных (иногда — в разы или даже на порядки). \n\nВ отличие от позитивных негативные тест-кейсы не стоит объединять, т. к. подобное решение может привести к неверной трактовке поведения приложения и пропуску (необнаружению) дефектов.","date":"2022-05-16T00:00:00.000Z","path":"/vidy-testirovaniya-po-princzipam-raboty-s-prilozheniem/","icon":"fas fa-bug","image":"null","order":10,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Виды тестирования","path":"/tag/%D0%92%D0%B8%D0%B4%D1%8B%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}],"headings":[{"value":"Позитивное тестирование (Positive testing)","anchor":"#позитивное-тестирование-positive-testing"},{"value":"Негативное тестирование (Negative testing, Invalid testing)","anchor":"#негативное-тестирование-negative-testing-invalid-testing"}]}},{"node":{"id":"1c93528f55299e3a76c2d8b0144d2d93","title":"Виды тестирования  по природе приложения","content":"\nДанный вид классификации является искусственным, поскольку «внутри» речь будет идти об одних и тех же видах тестирования, отличающихся в данном контексте лишь концентрацией на соответствующих функциях и особенностях приложения, использованием специфических инструментов и отдельных техник.\n\n## Тестирование веб-приложений (Web-applications testing) \nСопряжено с интенсивной деятельностью в области тестирования совместимости (в особенности — кросс-браузерного тестирования), тестирования производительности, автоматизации тестирования с использованием широкого спектра инструментальных средств.\n\n## Тестирование мобильных приложений (Mobile applications testing) \nТакже требует повышенного внимания к тестированию совместимости, оптимизации производительности (в том числе клиентской части с точки зрения снижения энергопотребления), автоматизации тестирования с применением эмуляторов мобильных устройств.\n\n## Тестирование настольных приложений (Desktop applications testing) \nЯвляется самым классическим среди всех перечисленных в данной классификации, и его особенности зависят от предметной области приложения, нюансов архитектуры, ключевых показателей качества и т. д.\n\nЭту классификацию можно продолжать очень долго. Например, можно отдельно рассматривать тестирование консольных приложений (console applications testing) и приложений с графическим интерфейсом (GUI-applications testing), серверных приложений (server applications testing) и клиентских приложений (client applications testing) и т. д.","date":"2022-05-16T00:00:00.000Z","path":"/vidy-testirovaniya-po-prirode-prilozheniya/","icon":"fas fa-bug","image":"null","order":10,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Виды тестирования","path":"/tag/%D0%92%D0%B8%D0%B4%D1%8B%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}],"headings":[{"value":"Тестирование веб-приложений (Web-applications testing)","anchor":"#тестирование-веб-приложений-web-applications-testing"},{"value":"Тестирование мобильных приложений (Mobile applications testing)","anchor":"#тестирование-мобильных-приложений-mobile-applications-testing"},{"value":"Тестирование настольных приложений (Desktop applications testing)","anchor":"#тестирование-настольных-приложений-desktop-applications-testing"}]}},{"node":{"id":"b2507b0db7418c6abfe0f2288423492a","title":"Виды тестирования по фокусировке на уровне архитектуры приложения","content":"\nДанный вид классификации, как и предыдущий, также является искусственным и отражает лишь концентрацию внимания на отдельной части приложения.\n\n## Тестирование уровня представления (Presentation tier testing) \nСконцентрировано на той части приложения, которая отвечает за взаимодействие с «внешним миром» (как пользователями, так и другими приложениями). Здесь исследуются вопросы удобства использования, скорости отклика интерфейса, совместимости с браузерами, корректности работы интерфейсов.\n\n## Тестирование уровня бизнес-логики (Business logic tier testing)\nОтвечает за проверку основного набора функций приложения и строится на базе ключевых требований к приложению, бизнес-правил и общей проверки функциональности.\n\n## Тестирование уровня данных (Data tier testing) \nСконцентрировано на той части приложения, которая отвечает за хранение и некоторую обработку данных (чаще всего — в базе данных или ином хранилище). Здесь особый интерес представляет тестирование данных, проверка соблюдения бизнес-правил, тестирование производительности.\n ","date":"2022-05-16T00:00:00.000Z","path":"/vidy-testirovaniya-po-fokusirovke-na-urovne-arhitektury-prilozheniya/","icon":"fas fa-bug","image":"null","order":10,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Виды тестирования","path":"/tag/%D0%92%D0%B8%D0%B4%D1%8B%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}],"headings":[{"value":"Тестирование уровня представления (Presentation tier testing)","anchor":"#тестирование-уровня-представления-presentation-tier-testing"},{"value":"Тестирование уровня бизнес-логики (Business logic tier testing)","anchor":"#тестирование-уровня-бизнес-логики-business-logic-tier-testing"},{"value":"Тестирование уровня данных (Data tier testing)","anchor":"#тестирование-уровня-данных-data-tier-testing"}]}},{"node":{"id":"2316ca7e1d904579ac9ceeb91855288a","title":"Виды тестирования по привлечению конечных пользователей","content":"\nВсе три перечисленных ниже вида тестирования относятся к операционному тестированию.\n\n## Альфа-тестирование (Alpha testing) \nВыполняется внутри организации-разработчика с возможным частичным привлечением конечных пользователей. Может являться формой внутреннего приёмочного тестирования. \n\nВ некоторых источниках отмечается, что это тестирование должно проводиться без привлечения команды разработчиков, но другие источники не выдвигают такого требования. \n\nСуть этого вида вкратце: продукт уже можно периодически показывать внешним пользователям, но он ещё достаточно «сырой», потому основное тестирование выполняется организацией-разработчиком.\n\n## Бета-тестирование (Beta testing) \nВыполняется вне организации-разработчика с активным привлечением конечных пользователей/заказчиков. Может являться формой внешнего приёмочного тестирования. \n\nСуть этого вида вкратце: продукт уже можно открыто показывать внешним пользователям, он уже достаточно стабилен, но проблемы всё ещё могут быть, и для их выявления нужна обратная связь от реальных пользователей.\n\n## Гамма-тестирование (Gamma testing)\nФинальная стадия тестирования перед выпуском продукта, направленная на исправление незначительных дефектов, обнаруженных в бета-тестировании.\nКак правило, также выполняется с максимальным привлечением конечных пользователей/заказчиков. Может являться формой внешнего приёмочного тестирования. \n\nСуть этого вида вкратце: продукт уже почти готов, и сейчас обратная связь от реальных пользователей используется для устранения последних недоработок.","date":"2022-05-16T00:00:00.000Z","path":"/vidy-testirovaniya-po-privlecheniyu-konechnyh-polzovatelej/","icon":"fas fa-bug","image":"null","order":10,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Виды тестирования","path":"/tag/%D0%92%D0%B8%D0%B4%D1%8B%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}],"headings":[{"value":"Альфа-тестирование (Alpha testing)","anchor":"#альфа-тестирование-alpha-testing"},{"value":"Бета-тестирование (Beta testing)","anchor":"#бета-тестирование-beta-testing"},{"value":"Гамма-тестирование (Gamma testing)","anchor":"#гамма-тестирование-gamma-testing"}]}}]}},"relatedTag":null},"context":{}}