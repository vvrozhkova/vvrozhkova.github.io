{"hash":"aa5a7ff62b399012289acf12f7cc1503ba4e22e5","data":{"tag":{"title":"Виды тестирования","path":"/tag/%D0%92%D0%B8%D0%B4%D1%8B%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/","belongsTo":{"totalCount":15,"pageInfo":{"totalPages":2,"currentPage":2},"edges":[{"node":{"id":"9d2df53edb3e4f5b29b515bdbc25e32d","title":"Виды тестирования по (убыванию) степени важности тестируемых функций (по уровню функционального тестирования)","content":"\nВ некоторых источниках эту разновидность классификации также называют «по глубине тестирования».\n\n## Дымовое тестирование (Smoke test, Intake test, Build verification test) \nНаправлено на проверку самой главной, самой важной, самой ключевой функциональности, неработоспособность которой делает бессмысленной саму идею использования приложения (или иного объекта, подвергаемого дымовому тестированию).\n\nДымовое тестирование проводится после выхода нового билда, чтобы определить общий уровень качества приложения и принять решение о (не)целесообразности выполнения тестирования критического пути и расширенного тестирования. \n\nПоскольку тест-кейсов на уровне дымового тестирования относительно немного, а сами они достаточно просты, но при этом очень часто повторяются, они являются хорошими кандидатами на автоматизацию. В связи с высокой важностью тест-кейсов на данном уровне пороговое значение метрики их прохождения часто выставляется равным 100 % или близким к 100 %.\n\n## Тестирование критического пути (Critical path test) \nНаправлено на исследование функциональности, используемой типичными пользователями в типичной повседневной деятельности. \n\nСуществует большинство пользователей, которые чаще всего используют некое подмножество функций приложения. Именно эти функции и нужно проверить, как только мы убедились, что приложение «в принципе работает» (дымовой тест прошёл успешно). Если по каким-то причинам приложение не выполняет эти функции или выполняет их некорректно, очень многие пользователи не смогут достичь множества своих целей. \n\nПороговое значение метрики успешного прохождения «теста критического пути» уже немного ниже, чем в дымовом тестировании, но всё равно достаточно высоко (как пра- вило, порядка 70–80–90 % — в зависимости от сути проекта).\n\n## Расширенное тестирование (Extended test)\nНаправлено на исследование всей заявленной в требованиях функциональности — даже той, которая низко проранжирована по степени важности. При этом здесь также учитывается, какая функциональность является более важной, а какая — менее важной. Но при наличии достаточного количества времени и иных ресурсов тест-кейсы этого уровня могут затронуть даже самые низкоприоритетные требования.\n\nЕщё одним направлением исследования в рамках данного тестирования являются нетипичные, маловероятные, экзотические случаи и сценарии использования функций и свойств приложения, затронутых на предыдущих уровнях. \n\nПороговое значение метрики успешного прохождения расширенного тестирования существенно ниже, чем в тестировании критического пути (иногда можно увидеть даже значения в диапазоне 30–50 %, т.к. подавляющее большинство найденных здесь дефектов не представляет угрозы для успешного использова- ния приложения большинством пользователей).\n\nК сожалению, часто можно встретить мнение, что дымовое тестирование, тестирование критического пути и расширенное тестирование напрямую связаны с позитивным тестированием и негативным тестированием, и негативное появляется только на уровне тестирования критического пути. Это не так. Как позитивные, так и негативные тесты могут (а иногда и обязаны) встречаться на всех перечисленных уровнях. Например, деление на ноль в калькуляторе явно должно относиться к дымовому тестирова- нию, хотя это яркий пример негативного тест-кейса.","date":"2022-05-16T00:00:00.000Z","path":"/vidy-testirovaniya-po-ubyvaniyu-stepeni-vazhnosti-testiruemyh-funkczij-po-urovnyu-funkczionalnogo-testirovaniya/","icon":"fas fa-bug","image":"null","order":10,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Виды тестирования","path":"/tag/%D0%92%D0%B8%D0%B4%D1%8B%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}],"headings":[{"value":"Дымовое тестирование (Smoke test, Intake test, Build verification test)","anchor":"#дымовое-тестирование-smoke-test-intake-test-build-verification-test"},{"value":"Тестирование критического пути (Critical path test)","anchor":"#тестирование-критического-пути-critical-path-test"},{"value":"Расширенное тестирование (Extended test)","anchor":"#расширенное-тестирование-extended-test"}]}},{"node":{"id":"48a2cbf9f6a2e3be841b2f6a6c6796b1","title":"Виды тестирования по принципам работы с приложением","content":"\n## Позитивное тестирование (Positive testing) \nНаправлено на исследование приложения в ситуации, когда все действия выполняются строго по инструкции без каких бы то ни было ошибок, отклонений, ввода неверных данных и т.д. \n\nЕсли позитивные тест-кейсы завершаются ошибками, это тревожный признак — приложение работает неверно даже в идеальных условиях (и можно предположить, что в неидеальных условиях оно работает ещё хуже). \n\nДля ускорения тестирования несколько позитивных тест-кейсов можно объединять (например, перед отправкой заполнить все поля формы верными значениями) — иногда это может усложнить диагностику ошибки, но существенная экономия времени компенсирует этот риск.\n\n## Негативное тестирование (Negative testing, Invalid testing)\nНаправлено на исследование работы приложения в ситуациях, когда с ним выполняются (некорректные) операции и/или используются данные, потенциально приводящие к ошибкам (классика жанра — деление на ноль). \n\nПоскольку в реальной жизни таких ситуаций значительно больше (пользователи допускают ошибки, злоумышленники осознанно «ломают» приложение, в среде работы приложения возникают проблемы и т. д.), негативных тест-кейсов оказывается значительно больше, чем позитивных (иногда — в разы или даже на порядки). \n\nВ отличие от позитивных негативные тест-кейсы не стоит объединять, т. к. подобное решение может привести к неверной трактовке поведения приложения и пропуску (необнаружению) дефектов.","date":"2022-05-16T00:00:00.000Z","path":"/vidy-testirovaniya-po-princzipam-raboty-s-prilozheniem/","icon":"fas fa-bug","image":"null","order":10,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Виды тестирования","path":"/tag/%D0%92%D0%B8%D0%B4%D1%8B%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}],"headings":[{"value":"Позитивное тестирование (Positive testing)","anchor":"#позитивное-тестирование-positive-testing"},{"value":"Негативное тестирование (Negative testing, Invalid testing)","anchor":"#негативное-тестирование-negative-testing-invalid-testing"}]}},{"node":{"id":"1c93528f55299e3a76c2d8b0144d2d93","title":"Виды тестирования  по природе приложения","content":"\nДанный вид классификации является искусственным, поскольку «внутри» речь будет идти об одних и тех же видах тестирования, отличающихся в данном контексте лишь концентрацией на соответствующих функциях и особенностях приложения, использованием специфических инструментов и отдельных техник.\n\n## Тестирование веб-приложений (Web-applications testing) \nСопряжено с интенсивной деятельностью в области тестирования совместимости (в особенности — кросс-браузерного тестирования), тестирования производительности, автоматизации тестирования с использованием широкого спектра инструментальных средств.\n\n## Тестирование мобильных приложений (Mobile applications testing) \nТакже требует повышенного внимания к тестированию совместимости, оптимизации производительности (в том числе клиентской части с точки зрения снижения энергопотребления), автоматизации тестирования с применением эмуляторов мобильных устройств.\n\n## Тестирование настольных приложений (Desktop applications testing) \nЯвляется самым классическим среди всех перечисленных в данной классификации, и его особенности зависят от предметной области приложения, нюансов архитектуры, ключевых показателей качества и т. д.\n\nЭту классификацию можно продолжать очень долго. Например, можно отдельно рассматривать тестирование консольных приложений (console applications testing) и приложений с графическим интерфейсом (GUI-applications testing), серверных приложений (server applications testing) и клиентских приложений (client applications testing) и т. д.","date":"2022-05-16T00:00:00.000Z","path":"/vidy-testirovaniya-po-prirode-prilozheniya/","icon":"fas fa-bug","image":"null","order":10,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Виды тестирования","path":"/tag/%D0%92%D0%B8%D0%B4%D1%8B%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}],"headings":[{"value":"Тестирование веб-приложений (Web-applications testing)","anchor":"#тестирование-веб-приложений-web-applications-testing"},{"value":"Тестирование мобильных приложений (Mobile applications testing)","anchor":"#тестирование-мобильных-приложений-mobile-applications-testing"},{"value":"Тестирование настольных приложений (Desktop applications testing)","anchor":"#тестирование-настольных-приложений-desktop-applications-testing"}]}},{"node":{"id":"2316ca7e1d904579ac9ceeb91855288a","title":"Виды тестирования по привлечению конечных пользователей","content":"\nВсе три перечисленных ниже вида тестирования относятся к операционному тестированию.\n\n## Альфа-тестирование (Alpha testing) \nВыполняется внутри организации-разработчика с возможным частичным привлечением конечных пользователей. Может являться формой внутреннего приёмочного тестирования. \n\nВ некоторых источниках отмечается, что это тестирование должно проводиться без привлечения команды разработчиков, но другие источники не выдвигают такого требования. \n\nСуть этого вида вкратце: продукт уже можно периодически показывать внешним пользователям, но он ещё достаточно «сырой», потому основное тестирование выполняется организацией-разработчиком.\n\n## Бета-тестирование (Beta testing) \nВыполняется вне организации-разработчика с активным привлечением конечных пользователей/заказчиков. Может являться формой внешнего приёмочного тестирования. \n\nСуть этого вида вкратце: продукт уже можно открыто показывать внешним пользователям, он уже достаточно стабилен, но проблемы всё ещё могут быть, и для их выявления нужна обратная связь от реальных пользователей.\n\n## Гамма-тестирование (Gamma testing)\nФинальная стадия тестирования перед выпуском продукта, направленная на исправление незначительных дефектов, обнаруженных в бета-тестировании.\nКак правило, также выполняется с максимальным привлечением конечных пользователей/заказчиков. Может являться формой внешнего приёмочного тестирования. \n\nСуть этого вида вкратце: продукт уже почти готов, и сейчас обратная связь от реальных пользователей используется для устранения последних недоработок.","date":"2022-05-16T00:00:00.000Z","path":"/vidy-testirovaniya-po-privlecheniyu-konechnyh-polzovatelej/","icon":"fas fa-bug","image":"null","order":10,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Виды тестирования","path":"/tag/%D0%92%D0%B8%D0%B4%D1%8B%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}],"headings":[{"value":"Альфа-тестирование (Alpha testing)","anchor":"#альфа-тестирование-alpha-testing"},{"value":"Бета-тестирование (Beta testing)","anchor":"#бета-тестирование-beta-testing"},{"value":"Гамма-тестирование (Gamma testing)","anchor":"#гамма-тестирование-gamma-testing"}]}},{"node":{"id":"b2507b0db7418c6abfe0f2288423492a","title":"Виды тестирования по фокусировке на уровне архитектуры приложения","content":"\nДанный вид классификации, как и предыдущий, также является искусственным и отражает лишь концентрацию внимания на отдельной части приложения.\n\n## Тестирование уровня представления (Presentation tier testing) \nСконцентрировано на той части приложения, которая отвечает за взаимодействие с «внешним миром» (как пользователями, так и другими приложениями). Здесь исследуются вопросы удобства использования, скорости отклика интерфейса, совместимости с браузерами, корректности работы интерфейсов.\n\n## Тестирование уровня бизнес-логики (Business logic tier testing)\nОтвечает за проверку основного набора функций приложения и строится на базе ключевых требований к приложению, бизнес-правил и общей проверки функциональности.\n\n## Тестирование уровня данных (Data tier testing) \nСконцентрировано на той части приложения, которая отвечает за хранение и некоторую обработку данных (чаще всего — в базе данных или ином хранилище). Здесь особый интерес представляет тестирование данных, проверка соблюдения бизнес-правил, тестирование производительности.\n ","date":"2022-05-16T00:00:00.000Z","path":"/vidy-testirovaniya-po-fokusirovke-na-urovne-arhitektury-prilozheniya/","icon":"fas fa-bug","image":"null","order":10,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Виды тестирования","path":"/tag/%D0%92%D0%B8%D0%B4%D1%8B%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}],"headings":[{"value":"Тестирование уровня представления (Presentation tier testing)","anchor":"#тестирование-уровня-представления-presentation-tier-testing"},{"value":"Тестирование уровня бизнес-логики (Business logic tier testing)","anchor":"#тестирование-уровня-бизнес-логики-business-logic-tier-testing"},{"value":"Тестирование уровня данных (Data tier testing)","anchor":"#тестирование-уровня-данных-data-tier-testing"}]}}]}},"relatedTag":null},"context":{}}