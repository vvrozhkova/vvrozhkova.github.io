{"hash":"7ce6058f470c3851afaa44882541a7f3d1089ffc","data":{"tag":{"title":"interview","path":"/tag/interview/","belongsTo":{"totalCount":8,"pageInfo":{"totalPages":1,"currentPage":1},"edges":[{"node":{"id":"683a344fdf62d3e0bdbf3d79b92601ea","title":"Подготовка к собеседованию на QA Automation Engineer","content":"\n## 1. Теория тестирования\n01. [Тестирование, Quality control, Quality assurance](/testirovanie-quality-control-quality-assurance/)\n02. [Понятие качества, международные стандарты качества](/ponyatie-kachestva-mezhdunarodnye-standarty-kachestva/)\n03. [Жизненный цикл дефекта](/zhiznennyj-czikl-defekta/)\n04. [Жизненный цикл разработки ПО, SDLC (Software Development LifeCycle)](/zhiznennyj-czikl-razrabotki-po-sdlc-software-development-life-cycle/)\n05. [Модели разработки ПО](/modeli-razrabotki-po/)\n06. [Методологии разработки ПО: Scrum, Kanban, RUP, DSDM, RAD, XP](/metodologii-razrabotki-po-scrum-kanban-rup-dsdm-msf-xp)\n07. [Жизненный цикл тестирования приложений, STLC (Software Testing LifeCycle)](zhiznennyj-czikl-testirovaniya-prilozhenij-stlc-software-testing-life-cycle/)\n08. [Принципы тестирования, Agile принципы тестирования](/princzipy-testirovaniya-agile-princzipy-testirovaniya/)\n09. [Практики и подходы тестирования](/praktiki-i-podhody-testirovaniya/\")\n10. [Виды тестирования](/vidy-testirovaniya/)\n11. [Уровни тестирования](/urovni-testirovaniya/)\n12. [Техники тест-дизайна](/tehniki-test-dizajna/)\n13. [Тестовая документация](/testovaya-dokumentacziya/)\n  - [Тестовая политика и стратегия](/testovaya-politika-i-strategiya/) \n  - [Международные стандарты тестовой документации](/mezhdunarodnye-standarty-testovoj-dokumentaczii/)\n  - [Master Test Plan и тестовые планы для каждого уровня](/master-test-plan-i-testovye-plany-dlya-kazhdogo-urovnya/)\n  - [Понятие Test Case и Test Suite](/ponyatie-test-case-i-test-suite/)\n  - [Понятие Test Basis, Test Condition и Test Procedure](/ponyatie-test-basis-test-condition-i-test-procedure/)\n  - [Checl-list, как представитель Experience-Based](/checl-list-kak-predstavitel-experience-based/)\n  - [Bug Report](/bug-report/)\n  - [Summary Report](/summary-report/)\n  - [Requirements Tracebility Matrix](/requirements-tracebility-matrix/)\n  - [Test Data Tables](/test-data-tables/)\n  - [Test Scenario](/test-scenario/)\n  - [External Test Reports](/external-test-reports/)\n  - [Критерии приемки](/kriterii-priemki)\n  - [Метрики тестирования](/metriki-testirovaniya/)\n  - [Требования](/trebovaniya/)\n  - [Тестовый оракул](/testovyj-orakul/)\n\n\n## 2. Тестирование WEB приложений\n- 01. [Понимание DOM модели](/ponimanie-dom-modeli/)\n- 02. [Какие веб-элементы бывают](/kakie-veb-elementy-byvayut/)\n- 03. Веб-формы и веб-сервера\n- 04. [UI(UX) и Pixel Perfect](/ui-ux-i-pixel-perfect/)\n- 05. [Тестирование верстки, JS ошибок](/testirovanie-verstki-js-oshibok/)\n- 06. Тестирование мобильной верстки\n- 07. Тестирование функций безопасности SSL\n- 08. [Работа с Dev Tool](/rabota-s-dev-tool/)\n- 09. Подходы к тестированию веб приложений\n- 10. Тестирование кросбраузерности, масштабируемости\n- 11. Тестирование кодировок\n- 12. Тестирование локализации, интернационализации\n- 13. Конфигурационное тестирование\n- 14. Работа с Cookie\n\n## 3. Тестирование API\n- [Понимание клиент-серверной архитектуры](/ponimanie-klient-servernoj-arhitektury/)\n- [Взаимодействие сервера, клиента и БД](/vzaimodejstvie-servera-klienta-i-bd/)\n- [REST и SOAP](/rest-i-soap/)\n- JSON vs XML vs WSDL\n- [Response codes](/response-codes/)\n- HTTP/HTTPS структура и методы\n- [Аутентификация и авторизация](/autentifikacziya-i-avtorizacziya/)\n- Mock servers\n- Написание тестов, assertions, запуск коллекций\n- Уровни переменных и работа с ними\n- Токены, pre-request scripts, debugging API\n- Monitoring and reports\n- Работа со Swagger\n- Описение Rest запросов (Open API)\n- Что такое Open API\n- Типы авторизации (basic auth, oAuth, jwt что-то типо того)\n- GET vs POST, POST vs PUT + идемпотентность\n- http 1.1 vs http 2\n- CSRF token\n\n## 4. Тестирование Mobile\n- Особенности тестирования мобильных приложений\n- Требования AppStore и PlayMarket к релизу\n- Классификация мобильных устройств и расширений\n- Виды мобильных устройств\n- Уровни тестирования mobile\n- Виды тестирования mobile\n- Симуляторы и эмуляторы\n- составление юзабио=лити тестов\n- Тестирование утечки памяти\n- Тестирование энергопотребления\n- Тестирование прерываний и человеческого фактора\n- Эвристики и мнемоники\n- Типичные баги\n- Тестирование игр на мобильных устройствах\n\n## 5. Нагрузочное тестирование\n- Load testing vs Perfomance vs Volume vs Stress\n- Метрики нагрузочного тестирования\n- Инструменты нагрузочного тестирования\n- Администрирование с настройкой мониторинга\n- Работа со скриптами, парсерами и заглушками\n- Основные методики и отчеты\n- Понятие настройки генератора нагрузки\n\n## 6. Системы контроля версий\n- Что такое система контроля версий, цель и виды\n- Основные команды GIT\n- Работа с тегами\n- Просмотр коммитов\n- Ветвление в GIT и работа с ветками\n- Установка GIT на сервер\n\n## 7. Основы HTML & CSS\n- Что такое HTML\n- Что такое CSS\n- Структура веб страницы\n- Основные элементы (html, head, title, meta, style, body, link)\n- Атрибуты\n- Работа с таблицами, тегами\n- Применение стилей и CSS-правил\n\n## 8. SQL и NoSQL базы данных\n- Что такое базы данных и их классификация\n- Формы нормализации баз данных\n- Понятие СУБД\n- 12 правил Кодда\n- Базовые запросы с использованием LIKE, BETWEEN, ORDER BY, ALIASES, IN, TOP/LIMIT, DISTINCT\n- Понятие NULL\n- CREATE, DROP, DELETE, UPDATE, INSERT, ALTER\n- Объединение таблиц(вложенные запросыб джойны и т.д.)\n- Работа с агрегатными функциями GROUP BY, HAVING\n- Представления, хранимые процедуры, триггеры и функции\n- Работа с индексами\n- Constraints\n- Понятие и виды NoSWL баз данных\n\n## 9. Компьютерные сети\n- Классификация и топология сетей\n- [Модель OSI vs стек протоколов TCP/IP](/model-osi-vs-stek-protokolov-tcp-ip/)\n- Основные стандарты\n- Протоколы по уровням и их особенности\n- HTTP, FTP, POP3, SMTP, UDP, TCP, ARP, IPv4 vs IPv6, PPP, ICMP\n- Ethernet, WI-FI, IP, MAC, Маска подсети, VLAN\n- DHCP и DNS\n- Типы данных(сегменты, датаграммы, пакеты, биты, кадры)\n- Сетевое оборудование\n\n## 10. Основы тест менеджмента\n- Метрики тестирования\n- Понятие ROI. Формула, расчеты, примеры\n- Модели улучшения тестовго процесса (TMMi, CTP, STEP, TPI NEXT и другие) Особенности их применения\n- Виды моделей Risk-Based testing. Решение практических кейсов.\n- Основы управления QA командой. Основные показатели\n- Оценка трудозатрат на тестирование\n- Оценка качества продукта\n- TEST MANAGEMENT TOOLS\n\n## 11. Основы автоматизированного тестирования\n- Понятие автоматизированного тестирования. Когда стоит применять, а когда нет\n- Базовые основы программирования(типы данных, классы, методы, конструкторы, интерфесы, принципы ООП)\n- Xpath, CSS-селекторы, локаторы\n- Работа с Selenium WebDriver\n- Написаниеи запуск примитивных автотестов, работа с отчетами об их прохождении\n- Понятие BDD, Gherkin\n- Работа со средой разработки + GIT\n\n## 12. Основы тестирования безопасности\n- Основы тестирования безопасности\n- OWASP TOP-10\n- классификация видов уязвимостей\n- Понятие XSS, INJECTIONS, Authorization Bypass\n- Опыт работы с 2-3 инструментами (OWASP ZAP, Nmap, Metasploit, SQLmap, BeFF и др)\n- Суметь протестировать сайт на наличие SQL-инъекций\n- Базовое представление о Kali Linux\n\n## 13. Виртуализация\n- Понятие и настройка виртуализации\n- Паравиртуализация\n- Работа с VIRTUAL BOX\n- Работа с VMWare\n- Установка и работа с различными ОС\n- Команды Linux. Работа в терминале Mac OS\n- Суметь поднять виртуальную машину и подключиться к ней\n\n## 14. Основы работы со снифферами\n- Понятие и виды снифферов\n- Опыт работы с Fiddler\n- Опыт работы с Charles\n- Опыт работы с Wireshark\n- Суметь перехватить пакет и проанализировать трафик\n\n## 15. Инструменты для тестирования\n- Postman, SOAP UI, CURL, Katalon Studio\n- Jmeter, Grafana, Apigee, Browserstacks, Genymotion\n- PowerShell, Redmine, Jira, HP ALM, IBM Rational Quality Manager, MSTeam Foundation Server, TestRail, TestLink\n- Notepad++, PSPad, Snagit, ScreenHunter, Snipping tool, Monosnap, Sitechco, FakeFiller, PICT, Mackaroo, Lipsum\n- DiffChecker, Intellij IDEA, Eclipse и т.д.\n\n","date":"2022-06-21T00:00:00.000Z","path":"/podgotovka-k-sobesedovaniyu-na-qa-automation-engineer/","icon":"fas fa-bug","image":"null","order":1,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"собеседование","path":"/tag/%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"},{"title":"interview","path":"/tag/interview/"}],"headings":[{"value":"1. Теория тестирования","anchor":"#1-теория-тестирования"},{"value":"2. Тестирование WEB приложений","anchor":"#2-тестирование-web-приложений"},{"value":"3. Тестирование API","anchor":"#3-тестирование-api"},{"value":"4. Тестирование Mobile","anchor":"#4-тестирование-mobile"},{"value":"5. Нагрузочное тестирование","anchor":"#5-нагрузочное-тестирование"},{"value":"6. Системы контроля версий","anchor":"#6-системы-контроля-версий"},{"value":"7. Основы HTML & CSS","anchor":"#7-основы-html--css"},{"value":"8. SQL и NoSQL базы данных","anchor":"#8-sql-и-nosql-базы-данных"},{"value":"9. Компьютерные сети","anchor":"#9-компьютерные-сети"},{"value":"10. Основы тест менеджмента","anchor":"#10-основы-тест-менеджмента"},{"value":"11. Основы автоматизированного тестирования","anchor":"#11-основы-автоматизированного-тестирования"},{"value":"12. Основы тестирования безопасности","anchor":"#12-основы-тестирования-безопасности"},{"value":"13. Виртуализация","anchor":"#13-виртуализация"},{"value":"14. Основы работы со снифферами","anchor":"#14-основы-работы-со-снифферами"},{"value":"15. Инструменты для тестирования","anchor":"#15-инструменты-для-тестирования"}]}},{"node":{"id":"b10c9dd7b8dd4a38cdf2d00c801f1043","title":"Подготовка к собеседованию на QA Automation Engineer 2","content":"\nhttps://itvdn.com/ru/blog/article/250-questions-qa?utm_sourse=tg_post_/250_questions_qa\n\nhttps://www.youtube.com/channel/UC6hNNlCXv1ZgdGpziNf83RA/videos\n\nhttps://www.youtube.com/watch?v=za6VI5uplIk\n\nhttps://www.youtube.com/watch?v=PIxa53N_uIM\n\nhttps://www.youtube.com/watch?v=LR7aDc_G5Xo\n\nhttps://www.youtube.com/watch?v=KlE3BOltGdw\n\nhttps://www.youtube.com/watch?v=GI2D3MAZBe0\n\nhttps://www.youtube.com/watch?v=PBjYqFNfLhw\n\nhttps://www.youtube.com/watch?v=u5BU2CxgBIo\n\nhttps://www.youtube.com/watch?v=PMJYLi_ePiQ\n\nhttps://www.youtube.com/watch?v=l3vC73Hgl-w\n\nhttps://www.youtube.com/watch?v=Fj1DdwSiY34\n\nhttps://www.youtube.com/watch?v=QnUFyAiL0N0&t=673s\n\nhttps://www.youtube.com/watch?v=KFgYa6GkAjM\n\nhttps://www.youtube.com/watch?v=dMdHRYfjzx0&t=1s\n\nhttps://www.youtube.com/watch?v=6bq28qjTHQk\n\nhttps://www.youtube.com/watch?v=vmOK5r4bjRU\n\nhttps://www.youtube.com/watch?v=WOo3YZHIDYE&t=2s\n\nhttps://www.youtube.com/watch?v=q75avN98ibg\n\nhttps://www.youtube.com/watch?v=XhKDpflWKls&t=2101s\n\nhttps://www.youtube.com/watch?v=4D40jGV8Jb8\n\nhttps://www.youtube.com/watch?v=4ESHltu1YBI\n\n\n\n## QA\n\n## Теоретическая база по Computer Science \nпонимание работы целевой платформы, общие принципы построения приложений, версионность, SDLC и прочее\n\nhttps://www.youtube.com/playlist?list=PLtPJ9lKvJ4oiNMvYbOzCmWy6cRzYAh9B1\n\n## Теоретическая база по тестированию\nтест-дизайн, практики и подходы тестирования, артефакты тестирования и принципы и подходы к построению и проведению тестирования.\n\n## Теоретическая база по автоматизации\nкакие инструменты есть, как автоматизируются те или иные сценарии, что стоит автоматизировать, а что нет и с какой стороны ко всему этому подходить. Пресловутый page object и html\\page elements.\n\n## Теоретическая база по программированию\nООП, структуры данных, способность решать минимальные типовые задачи, знание Java\\Python.\n\n\n\n\n### Основы тест-дизайна\n\n- как бы вы составили тест-кейсы для какого-то функционала или целой программы\n\n### Понимание работы клиент-серверных приложений\n\n- как работает Web\n- протокол HTTP\n- связка HTML / CSS / JavaScript\n- смысл кросс-браузерного тестирования\n\nкак настроить Selenium или Selenoid, как подбирать CSS или XPath-локаторы для элементов, какие браузеры выбрать для тестов.\nДля автоматизации API необходимо знать про методы HTTP-запросов (GET, POST, PUT, DELETE и т.д.) и их отличия, коды ответа сервера и их основные форматы (JSON, XML).\n\nНа практической части могут дать проверить работу какого-нибудь приложения, попросить составить список тест-кейсов и рассказать про особенности тестирования подобных продуктов.\n\n\n## Java\n\n- вопросы по ООП - что такое класс и экземпляр класса, что такое инкапсуляция, полиморфизм и наследование, какие бывают модификаторы доступа (в Java) и прочее.\n\nЕще на собеседовании могут поспрашивать немного про паттерны программирования. Тут хорошо знать про Singleton, Factory, PageObject, PageFactory, Builder и так далее. Можно еще почитать про принципы разработки SOLID, KISS, DRY, SRP.\n\n## TestOps\n\nс какой CI-системой вы чаще всего работали. На мой взгляд, самыми популярными являются Jenkins, Gitlab CI, TeamCity и Bamboo.\n\nПомимо этого спросят про опыт работы с bash: команды cd, ls, ps, mv, cp и так далее. Просто, чтобы убедиться, что вы не растеряетесь, зайдя на какой-нибудь сервер на основе linux по ssh.\n\nЕще могут быть вопросы по Docker - что такое образ, как запустить контейнер, как сделать маунт директории хост-машины, как собрать docker compose файл, как распространять образы между коллегами (docker registry)... Примерно так.\n\nСкорее всего попросят решить какую-нибудь задачку на SQL-запрос. Он тоже довольно популярен и с ним приходится работать, например, при тестировании серверной части: баз данных, сервисов или API.\n\nНапоследок могут спросить про системы контроля версий. Сейчас, на мой взгляд, самая популярная - это Git. Кандидата могут спросить про то, что такое ветки и коммиты, попросить решить какую-нибудь простую задачу. Например, рассказать о способе решения конфликтов мержа.","date":"2022-05-26T00:00:00.000Z","path":"/podgotovka-k-sobesedovaniyu-na-qa-automation-engineer-2/","icon":"fas fa-bug","image":"null","order":2,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"собеседование","path":"/tag/%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"},{"title":"interview","path":"/tag/interview/"}],"headings":[{"value":"QA","anchor":"#qa"},{"value":"Теоретическая база по Computer Science","anchor":"#теоретическая-база-по-computer-science"},{"value":"Теоретическая база по тестированию","anchor":"#теоретическая-база-по-тестированию"},{"value":"Теоретическая база по автоматизации","anchor":"#теоретическая-база-по-автоматизации"},{"value":"Теоретическая база по программированию","anchor":"#теоретическая-база-по-программированию"},{"value":"Java","anchor":"#java"},{"value":"TestOps","anchor":"#testops"}]}},{"node":{"id":"223b955029c664acea8a15873cc80f7f","title":"Теоретическая база по автоматизации","content":"\nhttps://devsday.ru/blog/details/763\n\ntodo \nизучить https://drill4j.github.io/\n\nhttps://ru.education-wiki.com/8998094-automation-testing-interview-questions\n\nhttps://www.toolsqa.com/\nhttps://coderlessons.com/tutorials/kachestvo-programmnogo-obespecheniia/uchebnik-selenium/uchebnik-selenium\n\nhttps://jsehelper.blogspot.com/2016/01/junit.html\n\nhttps://coderlessons.com/tutorials/kachestvo-programmnogo-obespecheniia/ruchnoe-testirovanie/interviu-po-avtomatizatsii-testirovaniia-q-a\n\nhttps://aqa-topics.herokuapp.com/\n\nhttps://sites.google.com/view/aqa-interview\n\nhttps://www.youtube.com/watch?v=fBTQ3v0i9ic\n\nhttps://www.youtube.com/watch?v=d7aq0aXYEss\n\nhttps://www.youtube.com/watch?v=lWhvKId7IYY\n\nhttps://www.youtube.com/watch?v=gm3lcdcNvMs\n\nhttps://www.youtube.com/watch?v=9kaHs4wCKFc\n\nhttps://www.youtube.com/watch?v=uSVI6Hzu2JM\n\nhttps://atesting.ru/kak-obiasnit-intervuery-stryktyry-avtomatizacii-testirovaniia/\n\nhttp://getbug.ru/101-voprosov-po-avtomatizatsii-i-testirovaniyu-vruchnuyu/\n\n## Test NG\n\nhttps://ru.lambdageeks.com/testng-interview-questions-and-answers/\nhttps://xwizard-test.blogspot.com/2017/02/qa-interview-qa-automation-python-linux.html\n\nhttps://habr.com/ru/company/sbermarket/blog/665260/\n\nhttps://www.conventionalcommits.org/ru/v1.0.0/\n\nhttps://telegra.ph/Ne-avtomatizirujte-test-cases-02-21\n\nЯ больше по java.\nНаписать прогу FizzBuzz.\nФункцию для нахождения факториала.\nРеализация любого алгоритма сортировки.\nSelenium: Explicit/Implicit wait, что лучше, когда какой лучше применять, что это вообще такое.\nВиды селекторов , какие быстрее. и т.д.\nJava: В основном вопросы как по учебнику. Бывает иногда что то необычное - как изменяется размер hashmap, как ведет себя ArrayList при добавлении или удалении элементов.\nStream, lambda, default method, опять же довольно стандартно.\nSQL: Joins, Unions, Delete/Truncate, Having, ну может попросят какой то простенький запрос набросать\n\n\nРаспарсить строку - вытащить все инты, раскидать их по двум массивам - в одном четные по возрастанию, в другом нечетные по убыванию\n\nВиды тестирования, разница между Load и Perfomance testing.\nУровни тестирования.\nКак будешь тестировать апп, когда требований нет , аппликейшен готов, и есть неделя до релиза.\nКак поведешь себя в ситуации нескольких проектов одновременно.\nКак будешь разрабатывать automation framework, который можно применять более чем в одном проекте.\nТехники тестирования и их применение.\n\n\nCI tools - Jenkins - тут зависит от вашего опыта. Я больше по созданию джоб и навинчиванию плагинов на уже существующий каркас.\nМетодологии разработки.\nSoftware development life cycle, аналогично для тестирования.\nSeverity/Priority\n\nУмеешь ли писать framework с нуля.\nxpath: contains, text, or/and.\nКак написать общий xtype для элементов разного типа, но с одним class.\nАналогичный вопрос для CSS selectors.\n\nКак смержить два массива - алгоритм и реализация.\nКак из 4-х чисел получить максимальное время в 24-ом формате.\nАлгоритм, как такое тестировать будешь.\nJunit и TestNg - различия, что лучше и почему.\nData providers.\n\n\nava:\n\nТеория:\n\n1)Принципы ООП\n2)Объяснить своими словами каждый принцип.\n3)Модификаторы доступа. Какие знаете? Зачем используются?\n4)Переопределение, перегрузка - что это ? Цели применения?\n5)Наследование и композиция - что это ? Цели применения?\n6)Зачем нужен интерфейс, абстрактный класс, enum?\n7)Паттерны программирования: Singleton (Одиночка), Abstract factory (Абстрактная фабрика), Decorator(Декоратор).\n\nАвтоматизация:\n\n1)Что такое Selenium?\nЗачем нужен webdriver?\nЗачем нужен selenium-server?\n\n2)Что такое Junit? TestNG? Как запускаете тесты?\n3)Maven. Зачем используется?\n4)Jenkins, TeamCity что это? Какой и как использовали?\n5)Использовали ли Selenide, Allure. Что это за библиотеки и зачем используются?\n6)Паттерн PageObject. Объяснить в теории его смысл.\n\n\nОтносительно недавно, вновь прошел через данную полосу препятствий.\nСобеседовался на QA Automation Lead/Senior и SDET.\nПрактически, никто не задавал вопросов по теории тестирования. В основном, фокус на стратегии, и как внедрять процесс автоматизации. Разве, что классический вопрос про, как тестировать, когда время поджимает.\n\nПро классику, типо, что такое селениум, пейджобджект, кукумбер не буду писать.\n\nСобственно вопросы( идут как попало):\n1. Java - все по классике. Но теперь добавились вопросы по stream/optional, анонимные классы, функциональные интерфейсы, лямбда, предикаты.\n2. Задачки : сортировку никто не отменял. Пузырек, quick sort, merge, selection. И их математическая сложность.\nКак написать простенький rest request с какому то урлу и как расспарсить ответ.\nКак реализовать интерфейс итератор. Развернуть строку, как проверить на палиндром, факториал, фиббоначи. Как найти цикл в связном списке.\nКак удалить дубликаты из списка, как проверить что дубликаты удалены.\nРасспросить строку в зависимости от условий.\n\nКак схлопывать массивы.. Например:\nInput: [2,5],[7,8],[4,5]\nOutput: [2,5],[7,8]\n\nМогут попросить реализовать класс с какой то логикой.\n\nЯ заметил, что лично меня стали спрашивать с уклоном в программирование. На последнем собеседовании было много алгоритмов и вопросов по ним.\n\nПару раз попадал на system design interview.\nОдин раз просили задизайнить твиттер, а потом нетфликс. Это дико круто и интересно.. Но без практики это вообще труба.\nТут просто гугл в помощь и миллион вопросов к тем, кто ставит перед вами эту задачу. Вы должны спрашивать, и использовать ответы на ваши вопросы в построении ответов.\n\n3. Jenkins/teamcity - что это, с чем едят, зачем нужно, как использовать.\nЧто есть CI/CD зачем надо, в чем плюсы.\n4. Docker - что это. Зачем?\nВ чем отличие от VM Docker file vs container vs image. Что такое Docker layer.\nКак двум контейнерам увидеть друг друга.\nЧто такое service. Что такое commit.\n5. SOLID -что это, как расшифровывается.\n6. Уделите внимания структурам данных : hash table, list, set, tree, queue.\n7. Git: cherry pick, merge, rebase.\n\nhttp://infobase.athn.ru/program/2017/11/junior-automation-qa-voprosyi-na-sobesedovanii/\n\nhttps://ru.bitdegree.org/rukovodstvo/selenium/\n\nhttps://habr.com/ru/company/otus/blog/350368/\n\nhttps://www.youtube.com/watch?v=C8Z-N0y6Sqo&list=PLMrFx1ncacK7qZFZB9oePwIi_oFPqHHKM&index=6\n\nhttps://www.youtube.com/watch?v=C8Z-N0y6Sqo&list=PLMrFx1ncacK7qZFZB9oePwIi_oFPqHHKM&index=6\n\nhttps://www.youtube.com/watch?v=ZWI7Khx6UpE&t=367s\n\n\nПо Selenium я бы также советовал подготовиться. Примеры вопросов есть тут и тут.\n\nТакже могут спросить про CSS/XPath-локаторы. Я разобрался в них достаточно глубоко, так как понимал, что на такой должности буду пользоваться этой информацией и навыками довольно часто.\n\nнастройка Selenium/Selenoid, какие браузеры использовать, как правильно подбирать CSS локаторы","date":"2022-05-26T00:00:00.000Z","path":"/teoreticheskaya-baza-po-avtomatizaczii/","icon":"fas fa-robot","image":"null","order":4,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"собеседование","path":"/tag/%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"},{"title":"interview","path":"/tag/interview/"}],"headings":[{"value":"Test NG","anchor":"#test-ng"}]}},{"node":{"id":"09744d88b447518239c928939357dd85","title":"Теоретическая база по программированию","content":"\n\nТут уже посерьезнее и нужно будет готовить вопросы о типах данных, переменных, циклах, массивах, ООП, исключениях, коллекциях, строках, паттернах проектирования (Singleton/PageObject/PageFactory/Builder и прочее). Ознакомиться с примерными вопросами, в данном случае — Java, можно тут.\n\nС практической точки зрения на самом собеседовании могут попросить написать алгоритм сортировки либо что-то связанное с объектами.\n\nНе всем кандидатам подобного собеседования нравиться, когда их просят написать тестовый код, аргументируя это тем, что в действительности это вовсе не нужно для работы.\n\nКонечно, в этом есть доля правды, но делается это все для того, чтобы узнать с какими фреймворками кандидат может работать, а с какими, банально, не знаком.\n\nЧаще всего, если человек действительно умеет и любит писать код, он запросто справится с тестовым заданием. Особенно если у него имеется опыт работы на специфических задачах (использование циклов, ветвей, работа с массивами и хеш-картами).\n\nОбязательно будет пару вопросов касательно ООП — понятие класса и экземпляра класса, термин инкапсуляции, разновидности модификаторов доступа и другое.\n\nДополнительно могут начать интересоваться вашими познаниями в паттернах программирования. Здесь нужно ориентироваться в PageFactory, Factory, Builder и PageObject. Можно заранее подучить принципы разработки SRP, KISS, SOLID и DRY.\n\n## Java\n\nключевые изменения в java начиная с 9ой версии\n\nСамоучитель\nhttps://metanit.com/java/tutorial/\nhttp://proglang.su/java\nhttps://howtodoinjava.com/java/\n\n## паттерны проектирования\n\n- https://refactoring.guru/ru/design-patterns/catalog\n\nhttps://atesting.ru/top-40-voprosov-i-otvetov-na-sobesedovanii-po-java-v-2021-gody/\n\n\n## GIT\nhttps://atesting.ru/60-voprosov-dlia-sobesedovanii-po-git-kotorye-vam-nyjno-podgotovit-v-2021-gody/\n\nhttps://www.hackerrank.com/\n\nhttps://www.codewars.com/\n\n\nhttps://leetcode.com/  \nhttps://www.codewars.com/","date":"2022-05-26T00:00:00.000Z","path":"/teoreticheskaya-baza-po-programmirovaniyu/","icon":"fas fa-bug","image":"null","order":5,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"собеседование","path":"/tag/%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"},{"title":"interview","path":"/tag/interview/"}],"headings":[{"value":"Java","anchor":"#java"},{"value":"паттерны проектирования","anchor":"#паттерны-проектирования"},{"value":"GIT","anchor":"#git"}]}},{"node":{"id":"1c91dbf0eb6c3d54b9ff3616da82f872","title":"Теоретическая база по TestOps","content":"\n\nВ этом блоке могут поинтересоваться знаниями работы с CI-системой, а именно с чем вы предпочитаете работать. Могут спросить касательно опыта работы с bash: знаете ли вы команды mv, cd, ps, ls.\n\nМогут спрашивать о Docker — понятие образа, как правильно запускать контейнер, как выполнить установку директории host-машины и прочее.\n\nВ конце, вероятнее всего, спросят касательно знаний о системах контроля версий — от принципов работы git до вариантов решения конфликтов при Merge Request.\n\nhttps://habr.com/ru/company/maxilect/blog/548876/\n\n## Системы контроля версий\n- Что такое система контроля версий, цель и виды\n- Основные команды GIT\n- Есть удаленный репозиторий по ссылке http://1.2.6.192/test.git. Какие шаги нужно выполнить для того, чтобы подтянуть этот репозиторий локально? \nТут всё просто. Проверяем умение человека работать с системами контроля версий. Как ни странно, этот вопрос тоже оказался неподъемным для большинства кандидатов. \nКакого ответа я жду: \n1. Проверить, установлен ли git локально(мы же тестировщики, помните?)\n2. Проверить, есть ли у нас права на доступ к этому репозиторию.\n3. Сделать git init/checkout/pull ИЛИ git clone для репозитория, если предыдущие два шага не выявили проблем. \n- Работа с тегами\n- Просмотр коммитов\n- Ветвление в Git и работа с ветками\n- Установка GIT на сервер\n\n\nКак работает Интернет\nhttps://developer.mozilla.org/ru/docs/Learn/Common_questions/How_does_the_Internet_work\nhttps://developer.mozilla.org/ru/docs/Learn/Common_questions/Pages_sites_servers_and_search_engines\nhttps://developer.mozilla.org/ru/docs/Learn/Common_questions/What_is_a_domain_name\nЭта статья о том, что такое Интернет, и как он работает.\n\nНеобходимые знания:\tОтсутствуют, но мы будем признательны, если вы сначала прочтёте Материал о там как начать разрабатывать свой сайт\nЦель:\t\nВы изучите основы технической инфраструктуры Веба и поймёте разницу между Вебом и интернетом. \n\nРезюме\nИнтернет является основой сети (the Web), технической инфраструктурой, благодаря которой и существует Всемирная Паутина. По своей сути, интернет - очень большая сеть компьютеров, которые могут взаимодействовать друг с другом.\n\nИстория интернета не до конца ясна. Проект по созданию интернета был начат в 60-х годах как исследовательский проект при поддержке министерства обороны США, но уже в 80-е годы вырос в сеть, которую поддерживали и развивали множество университетов и частных компаний. Технологии, лежащие в основе интернета, также продолжали развиваться со временем, но основной принцип работы не сильно изменился: Интернет - это способ подключить компьютеры в единую сеть и убедиться, что даже при серьёзных сбоях, они всё равно найдут способ связаться друг с другом.\n\nАктивное изучение\nКак работает интернет за 5 минут: 5-минутный видеоролик поможет вам понять базовые принципы работы интернета (автор Aaron Titus).\nПогружаемся глубже\nПростая сеть\nКогда нужно связать между собой два компьютера, вы должны связать их в сеть либо проводным (обычно с помощью Ethernet кабеля), либо беспроводным способом (например, с помощью WiFi или Bluetooth). Современные компьютеры поддерживают любой из этих способов связи.\n\nПримечание: До конца этой статьи мы будем говорить только о физическом (проводном) способе подключения, но беспроводные сети работают аналогичным образом.\n\nTwo computers linked together\n\nТаким способом вы можете подключить более двух компьютеров, но с каждым новым это становится все сложнее. Если хочется подключить, скажем, 10 компьютеров, вам понадобится 45 кабелей и 9 сетевых плат в каждом компьютере!\n\nTen computers all together\n\nЧтобы решить эту проблему, каждый компьютер в сети подключается к специальному маленькому компьютеру. Этот компьютер называют маршрутизатором. Маршрутизатор исполняет только одну роль: как сигнальщик на железной дороге он следит за тем, чтобы пакет, отправленный одним компьютером — источником — достиг пункта назначения. Чтобы отправить сообщение компьютеру B, компьютер A сначала должен отправить его маршрутизатору, который перенаправит его компьютеру B и проконтролирует, чтобы данные не попали компьютеру C.\n\nС добавлением маршрутизатора наша сеть здорово упрощается: чтобы соединить 10 компьютеров нам требуется только 10 кабелей (каждый кабель соединяет маршрутизатор с одним из компьютеров).\n\nTen computers with a router\n\nСеть сетей\nПока все нормально. Но что нам делать, если нужно объединить в сеть сотни, тысячи или миллиарды компьютеров? Конечно, один маршрутизатор не справится с этой задачей, но если вы внимательно читали, то помните, что маршрутизатор — это обычный компьютер, и ничто не мешает нам соединить друг с другом 2 маршрутизатора. Давайте сделаем это.\n\nTwo routers linked together\n\nПодключая компьютеры к маршрутизатору, а затем — маршрутизатор к другому маршрутизатору, мы можем увеличивать нашу сеть до сколь угодно больших размеров.\n\nRouters linked to routers\n\nТакая сеть уже очень похожа на то, что мы называем интернетом, но мы что-то упустили. Наша сеть построена для решения только наших задач. Но кроме неё есть и другие сети: наши друзья, соседи — кто угодно может создать свою сеть. Как же нам их объединить? Мы не можем протянуть кабели между нашим домом и всеми остальными сетями в мире. Чтобы решить эту проблему, мы можем воспользоваться уже существующими кабельными сетями. Ведь у нас дома уже есть кабели, например, электрические или телефонные. Телефонный провод уже соединяет ваш дом со всем остальным миром, так что он идеально подходит для решения нашей задачи. Чтобы подключить нашу сеть к глобальной сети с помощью телефонного провода, нам понадобится специальное оборудование, которое называется модем. Модем перекодирует информацию, поступающую из нашей сети в формат, который можно передавать через телефонную сеть, и наоборот, декодируют информацию из телефонной сети в формат, который распознают наши компьютеры.\n\nA router linked to a modem\n\nИтак, мы подключились к телефонной сети. Следующий шаг — передать сообщение из нашей сети в сеть, с которой мы хотим связаться. Чтобы сделать это, мы должны подключить нашу сеть к провайдеру услуг интернета (Internet Service Provider (ISP)). Провайдер — компания, которая обслуживает специальные маршрутизаторы, которые не только подключены друг к другу (объединяют в единую сеть всех клиентов провайдера), но также связаны с маршрутизаторами других провайдеров. Таким образом, наше сообщение, пройдя транзитом через сеть нескольких провайдеров, достигнет сеть назначения. Интернет — это сеть сетей, которая объединяет в себе всю вышеперечисленную инфраструктуру.\n\nFull Internet stack\n\nПоиск компьютера\nЧтобы послать сообщение какому-то компьютеру, необходимо как-то обратиться к нему, выделить среди других. Поэтому каждый компьютер, подключённый к сети, имеет свой уникальный адрес для связи: этот адрес называют IP-адресом (IP — сокращение для Internet Protocol, протокол интернета). В зависимости от версии протокола IP этот адрес может записываться по-разному. Самая широко используемая версия интернет-протокола — версия 4. Адреса IPv4 обычно записываются в виде четырёх чисел, разделённых точками, например: 192.168.2.10.\n\nТакие адреса отлично подходят для компьютеров, но людям очень сложно их запоминать. Чтобы упростить себе жизнь, мы можем присвоить каждому IP-адресу псевдоним с понятным для человека именем. Такой псевдоним называют доменным именем. Например, google.com — доменное имя, которое является псевдонимом IP-адреса 173.194.121.32. Использование доменного имени — самый простой способ обратиться к компьютеру в интернете.\n\nShow how a domain name can alias an IP address\n\nИнтернет и веб\nКак вы уже заметили, когда мы просматриваем Веб с помощью браузера, обычно мы используем доменное имя, чтобы обратиться к веб-сайту. Означает ли это, что Интернет и Веб — это одно и то же? Ответ не так прост. Мы уже знаем, что Интернет — это техническая основа, которая позволяет миллиардам компьютеров связываться друг с другом. Среди этих компьютеров есть небольшая группа (называемая веб-серверами), которые могут отправлять сообщения, распознаваемые браузерами. Интернет —  это инфраструктура, а Веб — это сервис, построенный на основе этой инфраструктуры. Стоит отметить, что кроме Веба есть и другие сервисы, построенные на базе Интернета. Например, электронная почта или IRC (en-US).","date":"2022-05-26T00:00:00.000Z","path":"/teoreticheskaya-baza-po-test-ops/","icon":"fas fa-bug","image":"null","order":6,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"собеседование","path":"/tag/%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"},{"title":"interview","path":"/tag/interview/"}],"headings":[{"value":"Системы контроля версий","anchor":"#системы-контроля-версий"}]}},{"node":{"id":"54c48691fab0f00f74bb7b7545fbca72","title":"WEB тестирование. Список вопросов","content":"\n\n\n\nКак работает Веб\nНазад\nОбзор: Getting started with the web\nКак работает Веб даст упрощённое представление о том, что происходит при просмотре веб-страницы в браузере на вашем компьютере или телефоне.\n\nЭта теория не так важна для написания веб-кода в краткосрочной перспективе, но в скором времени вы действительно начнёте извлекать выгоду из понимания того, что происходит в фоновом режиме.\n\nКлиенты и серверы\nКомпьютеры, подключённые к сети называются клиентами и серверами. Упрощённая схема того, как они взаимодействуют, может выглядеть следующим образом:\n\n\n\nКлиенты являются обычными пользователями, подключёнными к Интернету посредством устройств (например, компьютер подключён к Wi-Fi, или ваш телефон подключён к мобильной сети) и программного обеспечения, доступного на этих устройствах (как правило, браузер, например, Firefox или Chrome).\nСерверы - это компьютеры, которые хранят веб-страницы, сайты или приложения. Когда клиентское устройство пытается получить доступ к веб-странице, копия страницы загружается с сервера на клиентский компьютер для отображения в браузере пользователя.\nОстальные части панели инструментов\nКлиент и сервер, о которых мы рассказали выше, не раскрывают всю суть. Есть много других компонентов, и мы опишем их ниже.\n\nА сейчас давайте представим, что Веб - это дорога. Одна сторона дороги является клиентом, который представляет собой ваш дом. Другая сторона дороги является сервером, который представляет собой магазин. Вы хотите что-то купить в нём.\n\n\n\nПомимо клиента и сервера, мы также должны уделить внимание:\n\nВаше Интернет-подключение: Позволяет отправлять и принимать данные по сети. Оно подобно улице между домом и магазином.\nTCP/IP: Протокол Управления Передачей и Интернет Протокол являются коммуникационными протоколами, которые определяют, каким образом данные должны передаваться по сети. Они как транспортные средства, которые позволяют сделать заказ, пойти в магазин и купить ваши товары. В нашем примере, это как автомобиль или велосипед (или собственные ноги).\nDNS: Система Доменных Имён напоминает записную книжку для веб-сайтов. Когда вы вводите веб-адрес в своём браузере, браузер обращается к DNS, чтобы найти реальный адрес веб-сайта, прежде чем он сможет его получить. Браузеру необходимо выяснить, на каком сервере живёт сайт, поэтому он может отправлять HTTP-сообщения в нужное место (см. Ниже). Это похоже на поиск адреса магазина, чтобы вы могли попасть в него.\nHTTP: Протокол Передачи Гипертекста - это протокол, который определяет язык для клиентов и серверов, чтобы общаться друг с другом. Он, как язык, который вы используете, чтобы заказать ваш товар.\nФайлы компонентов: сайт состоит из нескольких различных файлов, которые подобны различным отделам с товарами в магазине. Эти файлы бывают двух основных типов:\nФайлы кода: сайты построены преимущественно на HTML, CSS и JavaScript, хотя вы познакомитесь с другими технологиями чуть позже.\nМатериалы: это собирательное название для всех других вещей, составляющих сайт, такие как изображения, музыка, видео, документы Word и PDF.\nЧто же на самом деле происходит?\nКогда вы вводите веб-адрес в свой браузер (для нашей аналогии - посещаете магазин):\n\nБраузер обращается к DNS серверу и находит реальный адрес сервера, на котором \"живёт\" сайт (Вы находите адрес магазина).\nБраузер посылает HTTP запрос к серверу, запрашивая его отправить копию сайта для клиента (Вы идёте в магазин и заказываете товар). Это сообщение и все остальные данные, передаваемые между клиентом и сервером, передаются по интернет-соединению с использованием протокола TCP/IP.\nЕсли сервер одобряет запрос клиента, сервер отправляет клиенту статус \"200 ОК\", который означает: \"Конечно, вы можете посмотреть на этот сайт! Вот он\", а затем начинает отправку файлов сайта в браузер в виде небольших порций, называемых пакетными данными (магазин выдаёт вам ваш товар или вам привозят его домой).\nБраузер собирает маленькие куски в полноценный сайт и показывает его вам (товар прибывает к вашей двери — новые вещи, потрясающе!).\nDNS\nРеальные веб-адреса - неудобные, незапоминающиеся строки, которые вы вводите в адресную строку, чтобы найти ваши любимые веб-сайты. Эти строки состоят из чисел, например: 63.245.215.20.\n\nТакой набор чисел называется IP-адресом и представляет собой уникальное местоположение в Интернете. Впрочем, его не очень легко запомнить, правда? Вот почему изобрели DNS. Это специальные сервера, которые связывают веб-адрес, который вы вводите в браузере (например, \"mozilla.org\"), с реальным IP-адресом сайта.\n\nСайты можно найти непосредственно через их IP-адреса. Вы можете найти IP-адрес веб-сайта, введя его домен в инструмент, как IP Checker.\n\nПакеты\nРанее мы использовали термин \"пакеты\", чтобы описать формат, в котором данные передаются от сервера к клиенту. Что мы имеем в виду? В основном, когда данные передаются через Интернет, они отправляются в виде тысячи мелких кусочков, так что множество разных пользователей могут скачивать один и тот же сайт одновременно. Если бы сайты отправлялись одним большим куском, тогда бы только один пользователь мог скачать его за один раз, и это, очевидно, сделало бы пользование интернетом не эффективным и не очень радостным.\n\n\n\n- Веб формы и веб сервера\n## UI/UX и Pixel Perfect\n\n\n- Тестирование верстки, JS ошибок\n- Тестирование мобильной верстки\n- Тестирование функциональной безопасности SSL\n- Работа с Dev Tool\n- Подходы к тестированию веб приложений\n- Тестирование кросбраузерности, масштабируемости\n- Тестирование кодировок\n- Тестирование локализации, интернационализации\n- Конфигурационное тестирование\n- Работа с Cookie\n\n\n## особенности веб-тестирования\nhttps://www.softwaretestinghelp.com/web-application-testing/\n\n\nhttps://www.youtube.com/watch?v=-AqjiEfSrDE\n\nhttps://www.youtube.com/watch?v=WMjrSyUiXNA\n\nhttps://www.youtube.com/watch?v=7moC23y6G1Q","date":"2022-05-26T00:00:00.000Z","path":"/web-testirovanie-spisok-voprosov/","icon":"fas fa-bug","image":"null","order":7,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"собеседование","path":"/tag/%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"},{"title":"interview","path":"/tag/interview/"}],"headings":[{"value":"UI/UX и Pixel Perfect","anchor":"#uiux-и-pixel-perfect"},{"value":"особенности веб-тестирования","anchor":"#особенности-веб-тестирования"}]}},{"node":{"id":"eac50fcd8d5b67134863f3f1d1b1ec1f","title":"API тестирование","content":"\n## Общая теория\n\n- https://www.guru99.com/api-testing.html\n\n## Postman\n\n- https://www.guru99.com/postman-tutorial.html\n\n## Что такое JSON\n\n- https://habr.com/ru/post/554274/\n- https://qaautomation.expert/2021/06/25/how-to-send-a-json-xml-file-as-payload-to-request-using-rest-assured/\n\nhttps://ruseller.com/lessons.php?rub=28&id=1212\n\nhttps://habr.com/ru/post/31225/\n\nhttps://www.youtube.com/watch?v=QYg5z6EGOk4\n\n\n## Тестирование API\n\n- Понимание клиент-серверной архитектуры, толстый тонкий клиенты\n- Взаиодействие сервера клиента и БД\n- REST vs SOAP\n- JSON vs XML vs WSDL\n- Response codes: 418, 403, 502, 302, 204\n- HTTP/HTTPS структура и методы\n- Аутентификация и авторизация\n- Mock servers\n- Написание тестов, assertions, запуск коллекций\n- Уровни переменных и работа с ними\n- Токены, pre-request scripts, debugging API\n- Monitoring and reports\n- Работа со Swagger\n- Описение Rest запросов (Open API)\n* Что такое Open API\n* Типы авторизации (basic auth, oAuth, jwt что-то типо того)\n* GET vs POST, POST vs PUT + идемпотентность\n* http 1.1 vs http 2\n* CSRF token\n\n\n\n## API\nhttps://atesting.ru/voprosy-na-sobesedovanii-po-testirovaniu-api/","date":"2022-05-26T00:00:00.000Z","path":"/api-testirovanie/","icon":"fas fa-bug","image":"null","order":8,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"собеседование","path":"/tag/%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"},{"title":"interview","path":"/tag/interview/"},{"title":"api","path":"/tag/api/"}],"headings":[{"value":"Общая теория","anchor":"#общая-теория"},{"value":"Postman","anchor":"#postman"},{"value":"Что такое JSON","anchor":"#что-такое-json"},{"value":"Тестирование API","anchor":"#тестирование-api"},{"value":"API","anchor":"#api"}]}},{"node":{"id":"3c8ce22e762e91d5cff223062f22176b","title":"SQL","content":"\n## Задачи\n\n- http://www.sql-tutorial.ru/\n\n- https://www.sql-ex.ru/\n\nhttps://sqlzoo.net/wiki/SQL_Tutorial\n\n## Обучающие курсы\n\n- https://www.freecodecamp.org/news/sql-and-databases-full-course/  \nhttps://www.youtube.com/watch?v=HXV3zeQKqGY\n\n- https://stepik.org/course/51562/promo\n\n## Статья со списком книг\n\n- https://progerlib.ru/sql-books\n\n## Статьи по теме\n\n- https://artoftesting.com/sql-for-testers\n","date":"2022-05-26T00:00:00.000Z","path":"/sql/","icon":"fas fa-bug","image":"null","order":10,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"собеседование","path":"/tag/%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"},{"title":"interview","path":"/tag/interview/"},{"title":"sql","path":"/tag/sql/"}],"headings":[{"value":"Задачи","anchor":"#задачи"},{"value":"Обучающие курсы","anchor":"#обучающие-курсы"},{"value":"Статья со списком книг","anchor":"#статья-со-списком-книг"},{"value":"Статьи по теме","anchor":"#статьи-по-теме"}]}}]}},"relatedTag":null},"context":{}}