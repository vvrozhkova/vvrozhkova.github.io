{"hash":"aa5a7ff62b399012289acf12f7cc1503ba4e22e5","data":{"tag":{"title":"план проекта","path":"/tag/%D0%BF%D0%BB%D0%B0%D0%BD%20%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B0/","belongsTo":{"totalCount":3,"pageInfo":{"totalPages":1,"currentPage":1},"edges":[{"node":{"id":"c66f02339f21ce00fa32d069c52d071a","title":"Java Core","content":"\nJava Core\n\n## Что такое программа\n\nЛюбая программа это набор инструкций, которые выполняет процессор или его микропрограмма. Эти инструкции называются машинным кодом. \nОни показывают процессору откуда взять данные, что с ними сделать и куда поожить результат. Hello world на машинном языке выглядел бы как набор цифр и букв, набор инструкций зависит от реализации конкретного процессора и унифицируется на уровне операционных систем(созданием виртуального процесора с универсальным набором инструкций). \n\n\n## Появление и развитие языка программирования\n\n1. Чтобы было проще запоминать машинные коды для каждого кода придумали мнемоники. Так появился язык Asembler и код стал немного понятнее. \n\n2. Затем появились языки высокого уровня которые оперируют простыми словами, а специальные программы - компеляторы и интерпретаторы приводили их в машинный код. \n\n3. Следующим этапом развития стало компиляция языка программирования не напрямую в машинный код, а сначала в промежуточный байт-код, по этому пути пошли разработчики java и dotNet'a. \n\n- Разработчики Java создали концепцию JVM - java virtual machine - виртуальная машина, которая может исполнять bytecode скомпелированный из java кода. Создав реализацию такой виртуальной машины для разных платформ, мы получили возможность писать на джаве для любой платформы. \n\n- Разработчики из дотнета пошли другим путем и создали clr - common language runtime если разработчики джава были сосредоточены только на языке джава, то clr был создан для возможности писать на разных языках в пределах одного решения но при этом все ставки делались только на windows. \n\nВ настоящее время обе команды пересмотрели свою концепцию: в jvm появилась поддержка в том числе и других языков, а для дот нета почвилась платформа Mono которая позволяет запускать C# практически на любом устройстве. \n\n## Что такое JVM?\n\nJVM состоит из:\n- Class Loader, загружающего файлы с байт кодом в память;\n- виртуальная память, куда все это загружается;\n- движок, который исполняет и оптимизирует код;\n- дополнительные интерфейсы и библиотеки для работы с нативным кодом (кодом написанном на c/c++/assembler'e).\n\n### Class Loader\n\nРазличают 3 вида:\n- bootstrap - загружает все стандартные классы Java, т.е. все которые содержатся в пакетах java.lang, java.net и т.д.;\n- extension - загружает классы из дополнительных библиотек, которые стаятся вместе с jdk и jre;\n- application - загружает классы из  classpath папок, которые может настроить сам разработчик.\n\n### JVM Memory - виртуальная память\n\n- Method Area, metaspace - здесь хранятся все статичные структуры и сам код, эта область является частью Heap(кучи)\n- Heap - большая область памяти в которой хранятся все создаваемые объекты, она выделяется сразу при запуске и делится между всеми основными потоками. Здесь обычно происходят основные утечки память и здесь же работает garbage collector(уборщик мусора). GC - собирает информацию о данных которые больше не используются и пытается их удалить.\n- Stack - более емкая область памяти, которая создается при создании потока, у каждого потока свой стек. Стек устроен по принципу первый вошел последний вышел(FILO). Для каждого вызываемого метода в стеке создается frame, набор именнованных параметров которые хранит переменные созданные в этом методе, промежуточные результаты и итоговый результат который возвращается через return. После выполнения метода его фрейм извлекается из стека и происходит переход к фрейму метода который был положен в стек перед ним, те тот метод который вызывал данный метод. \n- PC Registers - содержат указатели на внутренние инструкции самой java.\n- Native Method Stack - стек для нативных методов.\n\n### Движок\n\n- JIT - just-in-time компилятор - оптимизирует уже скомпелированный байт код \n- Интерпретатор который исполняет скомпелированный байт код\n\n\n### JRE\n\nJVM + java библиотеки\n\n### JDK\n\nJRE + инструменты разработчика + компилятор\n\n","date":"2024-03-29T00:00:00.000Z","path":"/java-core/","icon":"fas fa-code","image":"null","order":1,"category":{"title":"java","path":"/category/java/"},"tags":[{"title":"java","path":"/tag/java/"},{"title":"autotests","path":"/tag/autotests/"},{"title":"автотесты","path":"/tag/%D0%B0%D0%B2%D1%82%D0%BE%D1%82%D0%B5%D1%81%D1%82%D1%8B/"},{"title":"план проекта","path":"/tag/%D0%BF%D0%BB%D0%B0%D0%BD%20%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B0/"}],"headings":[{"value":"Что такое программа","anchor":"#что-такое-программа"},{"value":"Появление и развитие языка программирования","anchor":"#появление-и-развитие-языка-программирования"},{"value":"Что такое JVM?","anchor":"#что-такое-jvm"}]}},{"node":{"id":"c3df7d90d4bbd4a557fa97ed5ab680d2","title":"Создаем основу проекта","content":"\n- Какие тесты нужно автоматизировать в первую очередь?\nБерем тесты, которые чаще всего проверяются, чаще всего стреляют и которые больше всего затратны с точки зрения ручного тестирования.\n\n- эффективность автоматизации\nhttps://www.youtube.com/watch?v=GpvY3NF9mRc\n\nGradle\n\n1 создаем градл проект через идею.\n2 редактируем файл build.gradle \n\nПосле создания проекта дефолтный скрипт выглядит так:\n\n```groovy\nplugins {\n    id 'java' //плагин для сблорки java приложения\n}\n\n// группа и версия проекта\ngroup 'io.vvrozhkova'\nversion '1.0-SNAPSHOT'\n\n\n//репозиторий для скачивания зависимостей\nrepositories {\n    mavenCentral()\n}\n\n\n//список зависимостей\ndependencies {\n    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'\n    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'\n}\n\n\n//настройка запуска тестов через JUnit\ntest {\n    useJUnitPlatform()\n}\n```\n\n\n","date":"2024-03-29T00:00:00.000Z","path":"/sozdaem-osnovu-proekta/","icon":"fas fa-code","image":"null","order":1,"category":{"title":"java","path":"/category/java/"},"tags":[{"title":"java","path":"/tag/java/"},{"title":"autotests","path":"/tag/autotests/"},{"title":"автотесты","path":"/tag/%D0%B0%D0%B2%D1%82%D0%BE%D1%82%D0%B5%D1%81%D1%82%D1%8B/"},{"title":"план проекта","path":"/tag/%D0%BF%D0%BB%D0%B0%D0%BD%20%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B0/"}],"headings":[]}},{"node":{"id":"b98339b91504be9db7d95591e1741b37","title":"План содания проекта для UI автотестов","content":"\n1. [Создаем основу проекта](/sozdaem-osnovu-proekta/)\n","date":"2024-03-29T00:00:00.000Z","path":"/plan-sodaniya-proekta-dlya-ui-avtotestov/","icon":"fas fa-code","image":"null","order":1,"category":{"title":"java","path":"/category/java/"},"tags":[{"title":"java","path":"/tag/java/"},{"title":"autotests","path":"/tag/autotests/"},{"title":"автотесты","path":"/tag/%D0%B0%D0%B2%D1%82%D0%BE%D1%82%D0%B5%D1%81%D1%82%D1%8B/"},{"title":"план проекта","path":"/tag/%D0%BF%D0%BB%D0%B0%D0%BD%20%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B0/"}],"headings":[]}}]}},"relatedTag":null},"context":{}}