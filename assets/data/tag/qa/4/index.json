{"hash":"74078440e78cf7eff9cd218b18924da13af0a419","data":{"tag":{"title":"qa","path":"/tag/qa/","belongsTo":{"totalCount":39,"pageInfo":{"totalPages":4,"currentPage":4},"edges":[{"node":{"id":"7a5ca99f9f48162e1bff6496b6f4dc68","title":"Общие вопросы TestOps","content":"\n## Какие есть виды индексов? Когда и зачем использовать?\nИндекс (англ. index) — объект базы данных, создаваемый с целью повышения производительности поиска данных. Таблицы в базе данных могут иметь большое количество строк, которые хранятся в произвольном порядке, и их поиск по заданному критерию путём последовательного просмотра таблицы строка за строкой может занимать много времени. Индекс формируется из значений одного или нескольких столбцов таблицы и указателей на соответствующие строки таблицы и, таким образом, позволяет искать строки, удовлетворяющие критерию поиска. Ускорение работы с использованием индексов достигается в первую очередь за счёт того, что индекс имеет структуру, оптимизированную под поиск — например, сбалансированного дерева.\n\nВ общем виде, индекс в базах данных — это файл с последовательностью пар ключей и указателей. Идея использования индексов пришла от того, что современные базы данных слишком массивны и не помещаются в основную память. Мы обычно делим данные на блоки и размещаем данные в памяти поблочно. Однако поиск записи в БД может занять много времени. С другой стороны, файл индексов или блок индексов намного меньше блока данных и может поместиться в буфере основной памяти, что увеличивает скорость поиска записи.\n\nРазрежённый индекс (англ. sparse index) характеризуется тем, что каждый ключ ассоциируется с определённым указателем на блок в сортированном файле данных.\n\nПлотный индекс (англ. dense index) в свою очередь отличается тем, что каждый ключ ассоциируется с определённым указателем на запись в сортированном файле данных.\n\nВ кластерных индексах с дублированными ключами разрежённый индекс указывает на наименьший ключ в каждом блоке, в то время как плотный индекс указывает на первую запись с указанным ключом.\n\n## Можно ли вывести список баз данных/таблиц через CLI\n\nВ Postgress\n\n```\n-l или \\list\n```\n\nВ MySQL\n\n```sql\nSHOW DATABASES;\n```\n\n## Транзакции,команды для транзакций\nТранзакции — это фундаментальное понятие во всех СУБД. Суть транзакции в том, что она объединяет последовательность действий в одну операцию «всё или ничего». Промежуточные состояния внутри последовательности не видны другим транзакциям, и если что-то помешает успешно завершить транзакцию, ни один из результатов этих действий не сохранится в базе данных.\n\nТранзакцией называется последовательность операций над данными имеющая начало и конец\n\nТранзакция это последовательное выполнение операций чтения и записи. Окончанием транзакции может быть либо сохранение изменений (фиксация, commit) либо отмена изменений (откат, rollback). Применительно к БД транзакция это нескольких запросов, которые трактуются как единый запрос.\n\nТранзакции должны удовлетворять свойствам ACID\n\nАтомарность. Транзакция либо выполняется полностью либо не выполняется вовсе.\n\nСогласованность. При завершении транзакции не должны быть нарушены ограничения накладываемые на данные (например constraints в БД). Согласованность подразумевает, что система будет переведена из одного корректного состояния в другое корректное.\n\nИзолированность. Параллельно выполняемые транзакции не должны влиять друг на друга, например менять данные которые использует другая транзакция. Результат выполнения параллельных транзакций должен быть таким, как если бы транзакции выполнялись последовательно.\n\nУстойчивость. После фиксации изменения не должны быть утеряны.\n\n```sql\nBEGIN;\nUPDATE accounts SET balance = balance - 100.00\n    WHERE name = 'Alice';\nSAVEPOINT my_savepoint;\nUPDATE accounts SET balance = balance + 100.00\n    WHERE name = 'Bob';\n-- ошибочное действие... забыть его и использовать счёт Уолли\nROLLBACK TO my_savepoint;\nUPDATE accounts SET balance = balance + 100.00\n    WHERE name = 'Wally';\nCOMMIT;\n```\n\n## Что такое индекс и что такое ключ\nКлюч представляет собой комбинацию полей, данные в которых однозначно определяют каждую запись в таблице. Простой ключ состоит из одного поля, а составной (сложный) из нескольких полей. Поля, по которым построен ключ, называют ключевыми. \n\nИндекс, как и ключ, представляет собой своеобразное оглавление таблицы, просмотр которого выполняется перед обращением к ее записям. Таким образом, использование индекса повышает скорость доступа к данным в таблице за счет того, что доступ выполняется не последовательным, а индексно-последовательным методом.\n\n## Deployment strategies\n\n### Rolling (постепенный, «накатываемый» деплой)\n\nЭто стандартная стратегия развертывания в Kubernetes. Она постепенно, один за другим, заменяет pod'ы со старой версией приложения на pod'ы с новой версией — без простоя кластера.\n\n### Recreate (повторное создание)\n\nВ этом простейшем типе развертывания старые pod'ы убиваются все разом и заменяются новыми\n\n### Blue/Green (сине-зеленые развертывания)\n\nСтратегия сине-зеленого развертывания (иногда ее ещё называют red/black, т.е. красно-чёрной) предусматривает одновременное развертывание старой (зеленой) и новой (синей) версий приложения. После размещения обеих версий обычные пользователи получают доступ к зеленой, в то время как синяя доступна для QA-команды для автоматизации тестов через отдельный сервис или прямой проброс портов\n\n### Canary (канареечные развертывания)\n\nКанареечные выкаты похожи на сине-зеленые, но лучше управляются и используют прогрессивный поэтапный подход. К этому типу относятся несколько различных стратегий, включая «скрытые» запуски и А/В-тестирование.\n\nЭта стратегия применяется, когда необходимо испытать некую новую функциональность, как правило, в бэкенде приложения. Суть подхода в том, чтобы создать два практически одинаковых сервера: один обслуживает почти всех пользователей, а другой, с новыми функциями, обслуживает лишь небольшую подгруппу пользователей, после чего результаты их работы сравниваются. Если все проходит без ошибок, новая версия постепенно выкатывается на всю инфраструктуру.\n\n### Dark (скрытые) или А/В-развертывания\n\nСкрытое развертывание — еще одна вариация канареечной стратегии (с ней, кстати, Flagger тоже может работать). Разница между скрытым и канареечным развертыванием состоит в том, что скрытые развертывания имеют дело с фронтендом, а не с бэкендом, как канареечные.\n\nДругое название этих развертываний — А/В-тестирование. Вместо того, чтобы открыть доступ к новой функции всем пользователям, ее предлагают лишь ограниченной их части. Обычно эти пользователи не знают, что выступают тестерами-первопроходцами (отсюда и термин «скрытое развертывание»).\n\n### Flagger и A/B-развертывания\n\nПомимо маршрутизации с учётом весов, Flagger также может направлять на канареечный сервер трафик в зависимости от параметров HTTP. При А/В-тестировании можно использовать заголовки HTTP или файлы cookie для перенаправления определенного сегмента пользователей. Это особенно эффективно в случае frontend-приложений, требующих привязки сессии к серверу (session affinity). Дополнительную информацию можно найти в документации Flagger.\n\n## Что такое контроллер?\nКонтроллер - это что-либо в вашем кластере, которое отслеживает хотя бы один другой тип ресурса Kubernetes. Контроллеры могут быть пассивными или активными. Активный контроллер сам выполнит необходимые действия; пассивы будут передавать изменения другим компонентам или серверу API кластера.\n\n## Что такое операторы?\nОператор - это специализированная форма контроллера. Операторы реализуют модель контроллера, что означает, что они переводят кластер в определенное состояние, но у них также есть дополнительные характеристики. Первоначально этот термин был придуман CoreOS, но теперь получил более широкое распространение в Kubernetes.\n\nОператоры адаптированы к конкретным приложениям. Они добавляют расширения Kubernetes API через пользовательские определения ресурсов, создавая новые типы объектов, используемых приложением, которым они управляют.\n\n## Права к файлу 755\nУ файла установлены права 755. \n\nПервая цифра — 7, это значит, что хозяин имеет на файл все права: чтение, запись и запуск (7 — 111). \n\nВторая цифра — 5, пользователи из одной с хозяином группы имеют возможность читать и запускать файл, но не могут в него писать (5 — 101). \n\nАналогично и все остальные — третья цифра тоже пятерка.\n\n## Какое максимальное количество docker layers возможно\n127\n\n## Что такое многоэтапный build\n\nмного-этапные (multi-stage builds) сборки позволяют значительно упростить процесс и описать его внутри Dockerfile. Каждая инструкция FROM может использовать индивидуальный базовый образ и каждая из них начинает новую стадию сборки docker образа. Но основное преимущество, что вы можете копировать необходимые артефакты из одной стадии в другую. В результате все вышеперечисленные шаги могут быть описаны вот так\nDockerfile:\n\n```docker\nFROM golang:latest as build\nCOPY . .\nRUN go build ./src/main.go\n\nFROM alpine:latest as production\nCOPY --from=build /go/main .\nCMD [\"./main\"]\n```\n\n## DinD (Docker in docker)\n\nDocker предоставляется в виде самодостаточного образа через тег docker:dind на Docker Hub.\n\nЗапустив этот образ, вы получите функционирующую установку демона Docker внутри вашего нового контейнера.\n\nОн будет работать независимо от демона вашего хоста, который запускает контейнер dind, поэтому docker ps внутри контейнера даст результаты, отличные от docker ps на вашем хосте.\n\n```\ndocker run -d --privileged --name docker \\\n    -e DOCKER_TLS_CERTDIR=/certs \\\n    -v docker-certs-ca:/certs/ca \\\n    -v docker-certs-client:/certs/client \\\n    docker:dind\n```\n\nИспользование Docker-in-Docker таким образом связано с одним большим предостережением: необходимо использовать привилегированный режим.\n\nЭто ограничение действует, даже если вы используете контейнеры без рутов.\n\nПривилегированный режим активируется флагом –privileged в команде, показанной выше.\n\nИспользование привилегированного режима дает контейнеру полный доступ к вашей хост-системе.\n\nЭто необходимо в сценарии Docker-in-Docker, чтобы ваш внутренний Docker мог создавать новые контейнеры.\n\nОднако в некоторых средах это может быть неприемлемым риском для безопасности.\n\nСуществуют и другие проблемы с dind.\n\nВ некоторых системах могут возникать конфликты с модулями безопасности Linux Security Modules (LSM), такими как AppArmor и SELinux.\n\nЭто происходит, когда внутренний Docker применяет политики LSM, которые внешний демон не может предугадать.\n\nЕще одна проблема связана с файловыми системами контейнеров.\n\nВнешний демон будет работать поверх обычной файловой системы вашего хоста, например ext4.\n\n## Переменная PATH\nДля того, чтобы посмотреть содержимое переменной PATH в Linux, выполните в терминале команду:\n\necho $PATH\n\nДля того, чтобы добавить новый путь к переменной PATH, можно воспользоваться командой export. Например, давайте добавим к значению переменной PATH папку/opt/local/bin. Для того, чтобы не перезаписать имеющееся значение переменной PATH новым, нужно именно добавить (дописать) это новое значение к уже имеющемуся, не забыв о разделителе-двоеточии:\n\nexport PATH=$PATH:/opt/local/bin\n\n## Команды для копирования и переименования файла\n- cp\n- mv\n\n## Команда env\n\nКоманда env позволяет модифицировать список переменных окружения перед исполнением пользовательской команды. В некоторых командных оболочках она является встроенной, в некоторых — внешней командой.\n\nБазовый синтаксис команды выглядит следующим образом:\n\n```\n$ env [параметры] [ИМЯ=ЗНАЧЕНИЕ] ... [команда]\n```\n\nПри вызове env без каких-либо параметров будет выведен список всех переменных окружения. \nИсполнение команды с измененными значениями переменных окружения\nДля изменения значения произвольной переменной окружения перед запуском команды достаточно указать имя этой переменной и ее значение после символа равенства. Например, для вывода времени по Гринвичу достаточно изменить значение переменной окружения TZ:\n\n```\n$ env TZ=GMT date\nСр июл 26 17:50:30 GMT 2017\n```\n\nИсполнение команды лишь с заданными переменными окружения\nДля исполнения команды с несколькими пользовательскими переменными окружения следует воспользоваться параметром -i и вручную задать значения необходимых переменных:\n```\n$ env -i PWD=/root env\nPWD=/root\n```\n\nDELETE vs TRUNCATE\n\n## Партиционирование \nПартиционирование – это метод разделения больших (исходя из количества записей, а не столбцов) таблиц на много маленьких. И желательно, чтобы это происходило прозрачным для приложения способом.\n\nкогда таблица готова, я могу создать партиции, что означает – наследованные таблицы:\n\ncreate table users_1 () inherits (users);\n\n* Deadlock\n* Задачка на LEFT JOIN примерно как в собесе выше\n\nЧто такое CI/CD\n* Инструменты (Jenkins, Gitlab CI ...)\n* Green / Blue deploy\n* Канареечный релиз\n* Балансировщик\n\n## В чем отличие контейнеризации от виртуализации\nВиртуализация - эмулируется аппаратное окружение и может быть запущен широкий спектр гостевых операционных систем,\nКонтейнеризация - может быть запущен экземпляр операционной системы только с тем же ядром, что и у хостовой операционной системы \nотсутствуют дополнительные ресурсные накладные расходы на эмуляцию виртуального оборудования и запуск полноценного экземпляра операционной системы","date":"2022-07-07T00:00:00.000Z","path":"/obshhie-voprosy-test-ops/","icon":"fas fa-bug","image":"null","order":5,"category":{"title":"testops","path":"/category/testops/"},"tags":[{"title":"qa","path":"/tag/qa/"}],"headings":[{"value":"Какие есть виды индексов? Когда и зачем использовать?","anchor":"#какие-есть-виды-индексов-когда-и-зачем-использовать"},{"value":"Можно ли вывести список баз данных/таблиц через CLI","anchor":"#можно-ли-вывести-список-баз-данныхтаблиц-через-cli"},{"value":"Транзакции,команды для транзакций","anchor":"#транзакциикоманды-для-транзакций"},{"value":"Что такое индекс и что такое ключ","anchor":"#что-такое-индекс-и-что-такое-ключ"},{"value":"Deployment strategies","anchor":"#deployment-strategies"},{"value":"Что такое контроллер?","anchor":"#что-такое-контроллер"},{"value":"Что такое операторы?","anchor":"#что-такое-операторы"},{"value":"Права к файлу 755","anchor":"#права-к-файлу-755"},{"value":"Какое максимальное количество docker layers возможно","anchor":"#какое-максимальное-количество-docker-layers-возможно"},{"value":"Что такое многоэтапный build","anchor":"#что-такое-многоэтапный-build"},{"value":"DinD (Docker in docker)","anchor":"#dind-docker-in-docker"},{"value":"Переменная PATH","anchor":"#переменная-path"},{"value":"Команды для копирования и переименования файла","anchor":"#команды-для-копирования-и-переименования-файла"},{"value":"Команда env","anchor":"#команда-env"},{"value":"Партиционирование","anchor":"#партиционирование"},{"value":"В чем отличие контейнеризации от виртуализации","anchor":"#в-чем-отличие-контейнеризации-от-виртуализации"}]}},{"node":{"id":"1c91dbf0eb6c3d54b9ff3616da82f872","title":"Теоретическая база по TestOps","content":"\n\nВ этом блоке могут поинтересоваться знаниями работы с CI-системой, а именно с чем вы предпочитаете работать. Могут спросить касательно опыта работы с bash: знаете ли вы команды mv, cd, ps, ls.\n\nМогут спрашивать о Docker — понятие образа, как правильно запускать контейнер, как выполнить установку директории host-машины и прочее.\n\nВ конце, вероятнее всего, спросят касательно знаний о системах контроля версий — от принципов работы git до вариантов решения конфликтов при Merge Request.\n\nhttps://habr.com/ru/company/maxilect/blog/548876/\n\n## Системы контроля версий\n- Что такое система контроля версий, цель и виды\n- Основные команды GIT\n- Есть удаленный репозиторий по ссылке http://1.2.6.192/test.git. Какие шаги нужно выполнить для того, чтобы подтянуть этот репозиторий локально? \nТут всё просто. Проверяем умение человека работать с системами контроля версий. Как ни странно, этот вопрос тоже оказался неподъемным для большинства кандидатов. \nКакого ответа я жду: \n1. Проверить, установлен ли git локально(мы же тестировщики, помните?)\n2. Проверить, есть ли у нас права на доступ к этому репозиторию.\n3. Сделать git init/checkout/pull ИЛИ git clone для репозитория, если предыдущие два шага не выявили проблем. \n- Работа с тегами\n- Просмотр коммитов\n- Ветвление в Git и работа с ветками\n- Установка GIT на сервер\n\n\nКак работает Интернет\nhttps://developer.mozilla.org/ru/docs/Learn/Common_questions/How_does_the_Internet_work\nhttps://developer.mozilla.org/ru/docs/Learn/Common_questions/Pages_sites_servers_and_search_engines\nhttps://developer.mozilla.org/ru/docs/Learn/Common_questions/What_is_a_domain_name\nЭта статья о том, что такое Интернет, и как он работает.\n\nНеобходимые знания:\tОтсутствуют, но мы будем признательны, если вы сначала прочтёте Материал о там как начать разрабатывать свой сайт\nЦель:\t\nВы изучите основы технической инфраструктуры Веба и поймёте разницу между Вебом и интернетом. \n\nРезюме\nИнтернет является основой сети (the Web), технической инфраструктурой, благодаря которой и существует Всемирная Паутина. По своей сути, интернет - очень большая сеть компьютеров, которые могут взаимодействовать друг с другом.\n\nИстория интернета не до конца ясна. Проект по созданию интернета был начат в 60-х годах как исследовательский проект при поддержке министерства обороны США, но уже в 80-е годы вырос в сеть, которую поддерживали и развивали множество университетов и частных компаний. Технологии, лежащие в основе интернета, также продолжали развиваться со временем, но основной принцип работы не сильно изменился: Интернет - это способ подключить компьютеры в единую сеть и убедиться, что даже при серьёзных сбоях, они всё равно найдут способ связаться друг с другом.\n\nАктивное изучение\nКак работает интернет за 5 минут: 5-минутный видеоролик поможет вам понять базовые принципы работы интернета (автор Aaron Titus).\nПогружаемся глубже\nПростая сеть\nКогда нужно связать между собой два компьютера, вы должны связать их в сеть либо проводным (обычно с помощью Ethernet кабеля), либо беспроводным способом (например, с помощью WiFi или Bluetooth). Современные компьютеры поддерживают любой из этих способов связи.\n\nПримечание: До конца этой статьи мы будем говорить только о физическом (проводном) способе подключения, но беспроводные сети работают аналогичным образом.\n\nTwo computers linked together\n\nТаким способом вы можете подключить более двух компьютеров, но с каждым новым это становится все сложнее. Если хочется подключить, скажем, 10 компьютеров, вам понадобится 45 кабелей и 9 сетевых плат в каждом компьютере!\n\nTen computers all together\n\nЧтобы решить эту проблему, каждый компьютер в сети подключается к специальному маленькому компьютеру. Этот компьютер называют маршрутизатором. Маршрутизатор исполняет только одну роль: как сигнальщик на железной дороге он следит за тем, чтобы пакет, отправленный одним компьютером — источником — достиг пункта назначения. Чтобы отправить сообщение компьютеру B, компьютер A сначала должен отправить его маршрутизатору, который перенаправит его компьютеру B и проконтролирует, чтобы данные не попали компьютеру C.\n\nС добавлением маршрутизатора наша сеть здорово упрощается: чтобы соединить 10 компьютеров нам требуется только 10 кабелей (каждый кабель соединяет маршрутизатор с одним из компьютеров).\n\nTen computers with a router\n\nСеть сетей\nПока все нормально. Но что нам делать, если нужно объединить в сеть сотни, тысячи или миллиарды компьютеров? Конечно, один маршрутизатор не справится с этой задачей, но если вы внимательно читали, то помните, что маршрутизатор — это обычный компьютер, и ничто не мешает нам соединить друг с другом 2 маршрутизатора. Давайте сделаем это.\n\nTwo routers linked together\n\nПодключая компьютеры к маршрутизатору, а затем — маршрутизатор к другому маршрутизатору, мы можем увеличивать нашу сеть до сколь угодно больших размеров.\n\nRouters linked to routers\n\nТакая сеть уже очень похожа на то, что мы называем интернетом, но мы что-то упустили. Наша сеть построена для решения только наших задач. Но кроме неё есть и другие сети: наши друзья, соседи — кто угодно может создать свою сеть. Как же нам их объединить? Мы не можем протянуть кабели между нашим домом и всеми остальными сетями в мире. Чтобы решить эту проблему, мы можем воспользоваться уже существующими кабельными сетями. Ведь у нас дома уже есть кабели, например, электрические или телефонные. Телефонный провод уже соединяет ваш дом со всем остальным миром, так что он идеально подходит для решения нашей задачи. Чтобы подключить нашу сеть к глобальной сети с помощью телефонного провода, нам понадобится специальное оборудование, которое называется модем. Модем перекодирует информацию, поступающую из нашей сети в формат, который можно передавать через телефонную сеть, и наоборот, декодируют информацию из телефонной сети в формат, который распознают наши компьютеры.\n\nA router linked to a modem\n\nИтак, мы подключились к телефонной сети. Следующий шаг — передать сообщение из нашей сети в сеть, с которой мы хотим связаться. Чтобы сделать это, мы должны подключить нашу сеть к провайдеру услуг интернета (Internet Service Provider (ISP)). Провайдер — компания, которая обслуживает специальные маршрутизаторы, которые не только подключены друг к другу (объединяют в единую сеть всех клиентов провайдера), но также связаны с маршрутизаторами других провайдеров. Таким образом, наше сообщение, пройдя транзитом через сеть нескольких провайдеров, достигнет сеть назначения. Интернет — это сеть сетей, которая объединяет в себе всю вышеперечисленную инфраструктуру.\n\nFull Internet stack\n\nПоиск компьютера\nЧтобы послать сообщение какому-то компьютеру, необходимо как-то обратиться к нему, выделить среди других. Поэтому каждый компьютер, подключённый к сети, имеет свой уникальный адрес для связи: этот адрес называют IP-адресом (IP — сокращение для Internet Protocol, протокол интернета). В зависимости от версии протокола IP этот адрес может записываться по-разному. Самая широко используемая версия интернет-протокола — версия 4. Адреса IPv4 обычно записываются в виде четырёх чисел, разделённых точками, например: 192.168.2.10.\n\nТакие адреса отлично подходят для компьютеров, но людям очень сложно их запоминать. Чтобы упростить себе жизнь, мы можем присвоить каждому IP-адресу псевдоним с понятным для человека именем. Такой псевдоним называют доменным именем. Например, google.com — доменное имя, которое является псевдонимом IP-адреса 173.194.121.32. Использование доменного имени — самый простой способ обратиться к компьютеру в интернете.\n\nShow how a domain name can alias an IP address\n\nИнтернет и веб\nКак вы уже заметили, когда мы просматриваем Веб с помощью браузера, обычно мы используем доменное имя, чтобы обратиться к веб-сайту. Означает ли это, что Интернет и Веб — это одно и то же? Ответ не так прост. Мы уже знаем, что Интернет — это техническая основа, которая позволяет миллиардам компьютеров связываться друг с другом. Среди этих компьютеров есть небольшая группа (называемая веб-серверами), которые могут отправлять сообщения, распознаваемые браузерами. Интернет —  это инфраструктура, а Веб — это сервис, построенный на основе этой инфраструктуры. Стоит отметить, что кроме Веба есть и другие сервисы, построенные на базе Интернета. Например, электронная почта или IRC (en-US).","date":"2022-05-26T00:00:00.000Z","path":"/teoreticheskaya-baza-po-test-ops/","icon":"fas fa-bug","image":"null","order":6,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"собеседование","path":"/tag/%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"},{"title":"interview","path":"/tag/interview/"}],"headings":[{"value":"Системы контроля версий","anchor":"#системы-контроля-версий"}]}},{"node":{"id":"54c48691fab0f00f74bb7b7545fbca72","title":"WEB тестирование. Список вопросов","content":"\n\n\n\nКак работает Веб\nНазад\nОбзор: Getting started with the web\nКак работает Веб даст упрощённое представление о том, что происходит при просмотре веб-страницы в браузере на вашем компьютере или телефоне.\n\nЭта теория не так важна для написания веб-кода в краткосрочной перспективе, но в скором времени вы действительно начнёте извлекать выгоду из понимания того, что происходит в фоновом режиме.\n\nКлиенты и серверы\nКомпьютеры, подключённые к сети называются клиентами и серверами. Упрощённая схема того, как они взаимодействуют, может выглядеть следующим образом:\n\n\n\nКлиенты являются обычными пользователями, подключёнными к Интернету посредством устройств (например, компьютер подключён к Wi-Fi, или ваш телефон подключён к мобильной сети) и программного обеспечения, доступного на этих устройствах (как правило, браузер, например, Firefox или Chrome).\nСерверы - это компьютеры, которые хранят веб-страницы, сайты или приложения. Когда клиентское устройство пытается получить доступ к веб-странице, копия страницы загружается с сервера на клиентский компьютер для отображения в браузере пользователя.\nОстальные части панели инструментов\nКлиент и сервер, о которых мы рассказали выше, не раскрывают всю суть. Есть много других компонентов, и мы опишем их ниже.\n\nА сейчас давайте представим, что Веб - это дорога. Одна сторона дороги является клиентом, который представляет собой ваш дом. Другая сторона дороги является сервером, который представляет собой магазин. Вы хотите что-то купить в нём.\n\n\n\nПомимо клиента и сервера, мы также должны уделить внимание:\n\nВаше Интернет-подключение: Позволяет отправлять и принимать данные по сети. Оно подобно улице между домом и магазином.\nTCP/IP: Протокол Управления Передачей и Интернет Протокол являются коммуникационными протоколами, которые определяют, каким образом данные должны передаваться по сети. Они как транспортные средства, которые позволяют сделать заказ, пойти в магазин и купить ваши товары. В нашем примере, это как автомобиль или велосипед (или собственные ноги).\nDNS: Система Доменных Имён напоминает записную книжку для веб-сайтов. Когда вы вводите веб-адрес в своём браузере, браузер обращается к DNS, чтобы найти реальный адрес веб-сайта, прежде чем он сможет его получить. Браузеру необходимо выяснить, на каком сервере живёт сайт, поэтому он может отправлять HTTP-сообщения в нужное место (см. Ниже). Это похоже на поиск адреса магазина, чтобы вы могли попасть в него.\nHTTP: Протокол Передачи Гипертекста - это протокол, который определяет язык для клиентов и серверов, чтобы общаться друг с другом. Он, как язык, который вы используете, чтобы заказать ваш товар.\nФайлы компонентов: сайт состоит из нескольких различных файлов, которые подобны различным отделам с товарами в магазине. Эти файлы бывают двух основных типов:\nФайлы кода: сайты построены преимущественно на HTML, CSS и JavaScript, хотя вы познакомитесь с другими технологиями чуть позже.\nМатериалы: это собирательное название для всех других вещей, составляющих сайт, такие как изображения, музыка, видео, документы Word и PDF.\nЧто же на самом деле происходит?\nКогда вы вводите веб-адрес в свой браузер (для нашей аналогии - посещаете магазин):\n\nБраузер обращается к DNS серверу и находит реальный адрес сервера, на котором \"живёт\" сайт (Вы находите адрес магазина).\nБраузер посылает HTTP запрос к серверу, запрашивая его отправить копию сайта для клиента (Вы идёте в магазин и заказываете товар). Это сообщение и все остальные данные, передаваемые между клиентом и сервером, передаются по интернет-соединению с использованием протокола TCP/IP.\nЕсли сервер одобряет запрос клиента, сервер отправляет клиенту статус \"200 ОК\", который означает: \"Конечно, вы можете посмотреть на этот сайт! Вот он\", а затем начинает отправку файлов сайта в браузер в виде небольших порций, называемых пакетными данными (магазин выдаёт вам ваш товар или вам привозят его домой).\nБраузер собирает маленькие куски в полноценный сайт и показывает его вам (товар прибывает к вашей двери — новые вещи, потрясающе!).\nDNS\nРеальные веб-адреса - неудобные, незапоминающиеся строки, которые вы вводите в адресную строку, чтобы найти ваши любимые веб-сайты. Эти строки состоят из чисел, например: 63.245.215.20.\n\nТакой набор чисел называется IP-адресом и представляет собой уникальное местоположение в Интернете. Впрочем, его не очень легко запомнить, правда? Вот почему изобрели DNS. Это специальные сервера, которые связывают веб-адрес, который вы вводите в браузере (например, \"mozilla.org\"), с реальным IP-адресом сайта.\n\nСайты можно найти непосредственно через их IP-адреса. Вы можете найти IP-адрес веб-сайта, введя его домен в инструмент, как IP Checker.\n\nПакеты\nРанее мы использовали термин \"пакеты\", чтобы описать формат, в котором данные передаются от сервера к клиенту. Что мы имеем в виду? В основном, когда данные передаются через Интернет, они отправляются в виде тысячи мелких кусочков, так что множество разных пользователей могут скачивать один и тот же сайт одновременно. Если бы сайты отправлялись одним большим куском, тогда бы только один пользователь мог скачать его за один раз, и это, очевидно, сделало бы пользование интернетом не эффективным и не очень радостным.\n\n\n\n- Веб формы и веб сервера\n## UI/UX и Pixel Perfect\n\n\n- Тестирование верстки, JS ошибок\n- Тестирование мобильной верстки\n- Тестирование функциональной безопасности SSL\n- Работа с Dev Tool\n- Подходы к тестированию веб приложений\n- Тестирование кросбраузерности, масштабируемости\n- Тестирование кодировок\n- Тестирование локализации, интернационализации\n- Конфигурационное тестирование\n- Работа с Cookie\n\n\n## особенности веб-тестирования\nhttps://www.softwaretestinghelp.com/web-application-testing/\n\n\nhttps://www.youtube.com/watch?v=-AqjiEfSrDE\n\nhttps://www.youtube.com/watch?v=WMjrSyUiXNA\n\nhttps://www.youtube.com/watch?v=7moC23y6G1Q","date":"2022-05-26T00:00:00.000Z","path":"/web-testirovanie-spisok-voprosov/","icon":"fas fa-bug","image":"null","order":7,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"собеседование","path":"/tag/%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"},{"title":"interview","path":"/tag/interview/"}],"headings":[{"value":"UI/UX и Pixel Perfect","anchor":"#uiux-и-pixel-perfect"},{"value":"особенности веб-тестирования","anchor":"#особенности-веб-тестирования"}]}},{"node":{"id":"eac50fcd8d5b67134863f3f1d1b1ec1f","title":"API тестирование","content":"\n## Общая теория\n\n- https://www.guru99.com/api-testing.html\n\n## Postman\n\n- https://www.guru99.com/postman-tutorial.html\n\n## Что такое JSON\n\n- https://habr.com/ru/post/554274/\n- https://qaautomation.expert/2021/06/25/how-to-send-a-json-xml-file-as-payload-to-request-using-rest-assured/\n\nhttps://ruseller.com/lessons.php?rub=28&id=1212\n\nhttps://habr.com/ru/post/31225/\n\nhttps://www.youtube.com/watch?v=QYg5z6EGOk4\n\n\n## Тестирование API\n\n- Понимание клиент-серверной архитектуры, толстый тонкий клиенты\n- Взаиодействие сервера клиента и БД\n- REST vs SOAP\n- JSON vs XML vs WSDL\n- Response codes: 418, 403, 502, 302, 204\n- HTTP/HTTPS структура и методы\n- Аутентификация и авторизация\n- Mock servers\n- Написание тестов, assertions, запуск коллекций\n- Уровни переменных и работа с ними\n- Токены, pre-request scripts, debugging API\n- Monitoring and reports\n- Работа со Swagger\n- Описение Rest запросов (Open API)\n* Что такое Open API\n* Типы авторизации (basic auth, oAuth, jwt что-то типо того)\n* GET vs POST, POST vs PUT + идемпотентность\n* http 1.1 vs http 2\n* CSRF token\n\n\n\n## API\nhttps://atesting.ru/voprosy-na-sobesedovanii-po-testirovaniu-api/","date":"2022-05-26T00:00:00.000Z","path":"/api-testirovanie/","icon":"fas fa-bug","image":"null","order":8,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"собеседование","path":"/tag/%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"},{"title":"interview","path":"/tag/interview/"},{"title":"api","path":"/tag/api/"}],"headings":[{"value":"Общая теория","anchor":"#общая-теория"},{"value":"Postman","anchor":"#postman"},{"value":"Что такое JSON","anchor":"#что-такое-json"},{"value":"Тестирование API","anchor":"#тестирование-api"},{"value":"API","anchor":"#api"}]}},{"node":{"id":"9f205e84a1cb63966bc269b6cc70a787","title":"Тестирование Mobile","content":"\n\n## Тестирование Mobile\n\n- Особенности тестирования мобильных приложений\n- Требования AppStore и PlayMarket к релизу\n- Классификация мобильных устройств и расширений\n- Виды мобильных приложений\n- Уровни тестирования mobile\n- Виды тестирования mobile\n- Симуляторы и эмуляторы\n- Составление юзабилити тестов\n- Тестирование утечки памяти\n- Тестирование жнергопотребления\n- Тестирование прерываний и человеческого фактора\n- Эвристики и мнемоники\n- Типичные баги\n- Тестирование игр на мобильных устройствах\n\nПод мобильное тестирование придется вооружиться знаниями работы драйверов Espresso, XCUITest, либо же иметь представление о работе с Appium.\n\nДополнительно плюсом будут навыки конфигурации фермы устройств и установка нужных эмуляторов, а также симуляторов.\n\n## особенности мобильного тестирования\n\nhttps://www.softwaretestinghelp.com/beginners-guide-to-mobile-application-testing/\nhttps://testlio.com/blog/10-mobile-testing-types-and-approaches/","date":"2022-05-26T00:00:00.000Z","path":"/testirovanie-mobile/","icon":"fas fa-bug","image":"null","order":9,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"bug report","path":"/tag/bug%20report/"}],"headings":[{"value":"Тестирование Mobile","anchor":"#тестирование-mobile"},{"value":"особенности мобильного тестирования","anchor":"#особенности-мобильного-тестирования"}]}},{"node":{"id":"3c8ce22e762e91d5cff223062f22176b","title":"SQL","content":"\n## Задачи\n\n- http://www.sql-tutorial.ru/\n\n- https://www.sql-ex.ru/\n\nhttps://sqlzoo.net/wiki/SQL_Tutorial\n\n## Обучающие курсы\n\n- https://www.freecodecamp.org/news/sql-and-databases-full-course/  \nhttps://www.youtube.com/watch?v=HXV3zeQKqGY\n\n- https://stepik.org/course/51562/promo\n\n## Статья со списком книг\n\n- https://progerlib.ru/sql-books\n\n## Статьи по теме\n\n- https://artoftesting.com/sql-for-testers\n","date":"2022-05-26T00:00:00.000Z","path":"/sql/","icon":"fas fa-bug","image":"null","order":10,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"собеседование","path":"/tag/%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"},{"title":"interview","path":"/tag/interview/"},{"title":"sql","path":"/tag/sql/"}],"headings":[{"value":"Задачи","anchor":"#задачи"},{"value":"Обучающие курсы","anchor":"#обучающие-курсы"},{"value":"Статья со списком книг","anchor":"#статья-со-списком-книг"},{"value":"Статьи по теме","anchor":"#статьи-по-теме"}]}},{"node":{"id":"8b4d70813978c867a6a091289198c743","title":"Требования на вакансии QA Automation Engineer","content":"\n\n## QA\n- Основы тест-дизайна\n- Жизненный цикл ПО и ПАК\n- методики тестирования\n\n- Теория тестирования UI: web, mobile\n- Теория тестирования API: RESTful (типы запросов, JSON over REST, Websocket), SOAP\n- Понимание работы клиент-серверных приложений\n- Работа с XML, JSON\n- Создание и выполнения тестовых планов и тестовых сценариев\n- Знание Unix/Linux операционных систем и команд пользователя\n- базовые навыки по работе с компьютерными сетями (TCP/IP)\n- Agile-практики (Scrum, Kanban)\n- Понимание принципов работы реляционных СУБД, знание транзакций БД, Опыт работы с БД на уровне написания простых запросов\n- Инструменты Web Debugging (fiddler, Wireshark, burp)\n\n## Программирование\n- Уверенное знание Python\n- Уверенное знание Java\n- Уверенное знание Kotlin\n- Знание bash\n- паттерны проектирования\n- code-review\n- объектно-ориентированное проектирование\n\n## Библиотеки для автотестирования\n- PyTest(request???)/TestNG/JUnit\n- Selenium\n- Maven/Gradle\n- Selenide\n- Allure\n- Системы контроля версий: Git\n- CI/CD (Jenkins(написание pipelin'ов), TeamCity, Gitlab CI, Bitbucket Pipelines)\n- Gitlab\n- Cucumber\n- Appium\n- Postman, SoapUI, Charles proxy, Fiddler, консоль разработчика Chrome\n- Jira, Confluence\n- RestAssured\n- системами управления тестированием: TestRail\n- Kibana и Jaeger\n- DevOps: Selenoid, Selenium Grid, Docker приложения\n- Систем логирования: Splunk, Graylog, Kibana\n- SQL и БД (PostgreSQL)\n- Swift, XCUITest\n\n## Остальное\n- Нагрузочное тестирование\n- Ansible и Terraform ????\n- опыт работы в рамках MSA, SOA\n- владение инструментами для получения и анализа log'ов\n- опыт работы с DB и message broker;\n\nПроекты автоматизации ui web, ui mobile, api","date":"2020-05-01T00:00:00.000Z","path":"/trebovaniya-na-vakansii-qa-automation-engineer/","icon":"fas fa-bug","image":"null","order":11,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"}],"headings":[{"value":"QA","anchor":"#qa"},{"value":"Программирование","anchor":"#программирование"},{"value":"Библиотеки для автотестирования","anchor":"#библиотеки-для-автотестирования"},{"value":"Остальное","anchor":"#остальное"}]}},{"node":{"id":"bcc6d03e58eb0e67abad86a409225502","title":"Сайты для практики","content":"\n##  Потестить отдельные элементы\n\n- https://demoqa.com/auto-complete\n- https://demosite.executeautomation.com/index.html#\n- https://demoqa.com/\n- http://the-internet.herokuapp.com/\n- http://uitestingplayground.com/\n- https://www.w3schools.com/howto/\n- https://www.way2automation.com/demo.html\nеще один сайт с примерами разных элементов страницы для отработки взаимодействий в автотестах\n\n## Для тестирования API\n\n- https://jsonplaceholder.typicode.com/\n- https://reqres.in/\n- http://httpbin.org/\n\n- https://developer.marvel.com/docs\n- https://petstore.swagger.io/\n- https://ergast.com/mrd/\n- http://restful-booker.herokuapp.com/  \nhttp://restful-booker.herokuapp.com/apidoc/index.html\n- https://thinkingtester.com/new-api-and-ui-test-app/  \nhttps://thinking-tester-contact-list.herokuapp.com/\n\n## Для тестирования UI\n\n- https://www.zalando.co.uk/cart/\n\n- http://computer-database.gatling.io/computers\n\n- https://demo.guru99.com/\n\n- http://demowebshop.tricentis.com/\n\n- https://phptravels.com/demo\n\n- https://www.zazzle.com/\n\n- https://www.saucedemo.com/\n\n- https://www.globalsqa.com/website-automation-practice/\nhttps://www.globalsqa.com/demo-site/\n\n- http://automationpractice.com/index.php  \nпример интернет-магазина\n\n- https://blazedemo.com/index.php\n\n- https://phptravels.com/demo/  \nпример CRM системы, но формы логина не работают :(\n\n- https://github.com/TheJambo/ToDoInterviewTest\nhttp://todolist.james.am/#/\n\n- https://loginii.com/orangehrm-page  \nhttps://www.orangehrm.com/ - оригинал  \nhttps://www.softwaretestinghelp.com/free-online-software-testing-qa-training-course/ - тренинг по этому сайту;\nмного ссылок на web приложение, но тоже как то авторизация не отрабатывает\n\n- http://thelab.boozang.com/sortedList\n\n- https://www.opencart.com/\n\n- https://www.demoblaze.com/\n\n- https://www.globalsqa.com/angularJs-protractor/BankingProject/#/login\n\n- https://computer-database.gatling.io/computers\n- https://candymapper.com/\n\n- https://demowebsch.web-school.in/index.php/user/login  \nhttps://web-school.in/try-demo/  \nhttps://www.schoolerp.org/  \n\n- https://opensource-demo.orangehrmlive.com/  \nUsername : Admin | Password : admin123 )\n\n## Для тестирования мобильных приложений \n\n- https://github.com/fossasia/susi_android\n\n## Просто ресурсы\n\n- https://randomuser.me/changelog\nгенерация пользовательских данных\n\n- https://abstracta.us/blog/software-testing/best-demo-websites-for-practicing-different-types-of-software-tests/\n\n- https://www.blazemeter.com/blog/getting-started-jmeter-basic-tutorial\n\n- http://timvroom.com/selenium/playground/\n\n- https://www.softwaretestinghelp.com/sample-test-cases-testing-web-desktop-applications/\n\n\n- https://parabank.parasoft.com/parabank/index.htm\n\n- https://automationpanda.com/2021/12/29/want-to-practice-test-automation-try-these-demo-sites/\n\n- https://vc.ru/dev/199012-bystryy-start-gayd-po-avtomatizirovannomu-testirovaniyu-dlya-android-razrabotchika-jvm","date":"2022-05-22T00:00:00.000Z","path":"/sajty-dlya-praktiki/","icon":"fas fa-bug","image":"null","order":12,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"}],"headings":[{"value":" Потестить отдельные элементы","anchor":"#потестить-отдельные-элементы"},{"value":"Для тестирования API","anchor":"#для-тестирования-api"},{"value":"Для тестирования UI","anchor":"#для-тестирования-ui"},{"value":"Для тестирования мобильных приложений","anchor":"#для-тестирования-мобильных-приложений"},{"value":"Просто ресурсы","anchor":"#просто-ресурсы"}]}},{"node":{"id":"f8d301994acdf61e1e7f73a36e997909","title":"Пример резюме","content":"\nhttps://les-company.ru/sobesedovaniye-dlya-qa-rezyume-voprosy-na-interv-yu-peregovory-o-zarplate-poleznyye-ssylki/\n\nДиаграммы Исикавы!!!!\n\nhttps://www.englishdom.com/blog/kak-sostavit-rezyume-testirovshhika-na-anglijskom/\n\n\nhttps://zen.yandex.ru/media/qadecret/sobesedovanie-na-poziciiu-qaspecialistatestirovscika-kak-vybrat-luchshuiu-kompaniiu-5f117cbc1015531af6e4aad8\n\nAutomation QA Engineer\nАктивно интересуюсь сферой информационных технологий. Много времени посвящаю самообразованию — занимался под руководством ментора, прохожу курсы повышения квалификации.\nЧлен Санкт-Петербургского сообщества тестировщиков. Организовал и был спикером на внутреннем QA митапе First Line Software.\n\nTest Design, Manual Testing, Автоматизация тестирования, Unit Testing, Selenium, Allure, Java, RabbitMQ, Ruby, RoR, SQL, PL/SQL, Docker, Redis\n\nУчаствовал во внутреннем хакатоне First Line Software\n\nРабота\nАвтоматизация тестирования бекенда на Oracle.\nСоздание стендов.\nUnit testing.\nСоздание инструментов тестирования.\nПоддержка тестов на Robot Framework и Java.\n\nAutomation QA Engineer\n— Настройка CI(TeamCity) для запуска тестов.\n— Код-ревью.\n— Поддержка существующего фреймворка.\n— Поддержка и развитие тестовой инфраструктуры.\n— Написание тестов на Java + Selenium(JDI) + Maven + TestNG.\n— Взаимодействие с заказчиком и разработчиками для определения наиболее приоритетной функциональности.\n\nПроект:\nПлатформа, предоставляеющая сервисы, автоматизирующие процессы создания и заказа типовой маркетинговой продукции: брошюр, буклетов, рекламной почтовой корреспонденции, а также аналогичных материалов в электронном формате, включая создание лендинговых страниц(B2B, B2C).\n\nОбщепроектная деятельность:\n— Постановка задач на улучшение и доработку приложения (UI,UX, функциональные доработки).\n— Анализ бизнес модели и выработка решений по её улучшению.\n— Взаимодействие с командой разработчиков\n\nТест Дизайн и ручное тестирование:\n— Составление плана тестирования продукта;\n— Функциональное, UI, usability тестирование;\n— Тестирование приложений на платформах iOS, Android;\n— Выявление, описание и контроль устранения дефектов;\n— Срочное тестирование без документации;\n— Тестирование требований;\n— Тестирование в условиях часто меняющихся требований;\n\nАвтоматизированное тестирование:\n— Написание автотестов для тестирования приложения\n(связка Cucumber + Capybara(Selenium) + SitePrism)\n— Написание генератора тестовых данных\n\nРабота с программами и фреймворками:\n— Selenium\n— Cucumber\n— Jira, Trello\n— Test Rail\n\nПроекты:\n— https://ondoc.me\nМедицинская Информационая Система предоставляющая:\n— клиникам: дополнительные возможности возврата пациентов\n— врачам: возможность оказания телемедицинских услуг,\n— пациентам: возможность получить телемедицинские услуги, записаться на очный прием/обследование, получить мед. данные в удобном виде, не пропустить прием лекарств.\nСервисы представлены в WEB, iOS, Android.\n— Кастомные приложения для VIP клиентов.\n\nОбщепроектная деятельность:\n— Участие в составлении пользовательских инструкций\n— Анализ бизнес модели клиента и выработка решений по её улучшению.\n— Взаимодействие с командой разработчиков, руководителей проектов и т.д.\n— Менторство над junior qa.\n\nТест Дизайн и ручное тестирование:\n— Проработка и написание тестовой документации (чек-листы, тестовые сценарии)\n— Функциональное, UI, usability тестирование\n— Кроссбраузерное тестирование\n— Выявление, описание и контроль устранения дефектов\n— Срочное тестирование без документации\n— Определение наиболее приоритетной функциональности для регрессионного тестирования\n\nРабота с программами и фреймворками:\n— Selenium (Webdriver)\n— RSpec\n— Redmine, Jira\n— Test Rail","date":"2022-05-26T00:00:00.000Z","path":"/primer-rezyume/","icon":"fas fa-bug","image":"null","order":13,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"bug report","path":"/tag/bug%20report/"}],"headings":[]}}]}},"relatedTag":{"id":"4b276a3a6b99e78392dc449c5d9ba01b","title":"qa","path":"/tag/qa/","related":[{"id":"java","path":"/tag/java/","title":"java"}]}},"context":{}}