{"hash":"7ef89d9cd3f6579eddc6e6b2d3ffbd18a73c2491","data":{"tag":{"title":"qa","path":"/tag/qa/","belongsTo":{"totalCount":39,"pageInfo":{"totalPages":4,"currentPage":3},"edges":[{"node":{"id":"cc667eaa58f6aa157b8997aa91218af2","title":"Ethernet, WI-FI, IP, MAC, Маска подсети, VLAN","content":"\nВсе компьютеры соединены между собой в сеть, соединены неким образом кабелями или по wi-fi и как-то между собой взаимодействуют. \n\n## Хост\nКогда компьютер находится в сети он называется хостом. **Хост** - единица в сети, это любой уствройство в сети которое имеет интерфейс. \n\n## Сетевой итерфейс\n**Итнерфейс** - способ управления чем-то, **сетевой интерфейс** - это сетевая карта в компьютере. \n\nКоманда ipconfig, ifconfig(MacOS, Linux) - посмотреть сетевые интерфейсы. \nИнтерфейсов может быть несколько, но если его не будет то он не будет хостом, тк у него не будет сети. \n\n## Hostname\nHostname - имя хоста в сети, как он называется. \n\nwww.google.com\n\nwww - имя хоста  \ngoogle.com - домен\n\n## IP адрес\nКомпьютеры не понимают по именам. Но понимают адреса - IP address. \n\n**IP адрес** - это идентификатор интерфейса. IP адрес - это 4 числа через точку (.), от 0 до 255. \n\nПочему не больше 255?\n\nУ нас под адрес выделяется пространство и оно занимает 32 бита. Поэтому больше чем 4 числа, каждое по 8 бит и от 0 до 255, мы туда поместить не можем. \n\nПример IP адреса: 192.168.1.76\n\n## Маска подсети \nЛюбая сеть имеет размер, он задается **маской (сетевая маска)**. Маска задает размер сети.\n\nКогда мы говорим, что у нас IP адрес 192.168.1.0 с маской 255.255.255.0 - это значит в диапазоне моей сети все адреса будут от 192.168.1.0 до 192.168.1.255.\n\nЕсли в маске идет число 255 это значит, что дальше менять это число нельзя, а там где 0 может быть любое число. Чтобы расширять сеть маска корректируется с конца.\n\n192.168 обычно роутер работает в диапазоне начинающемся с этих цифр.\n\nЕсть несколько диапазонов сетей которые имеют особое значение:\n- 192.168.0.0/16\n- 10.0.0.0/8\n- 172.15.0.0/16\n- 127.0.0.0/8 - 127.0.0.1/32- диапазон который используется только один адрес\n\nВ маске каждая часть 255 - это 8 бит, получается 255.255.255.255 = 8+8+8+8 = 32.\nПоэтому для сокращения пишут просто количество бит которое можно добавить.\n\n## Диапазон сети\nДиапазон сети - это размер сети, внутри которой компьютеры будут видеть друг друга, компьютеры за пределами сети видеть компьютеры внутри сети не будут.\n\n127.0.0.1/32 - адрес нашего компьютера, и другие компьютеры по этому адресу увидят только свой компьютер, а не наш.\n\nИнтернет - это совокупность сетей, которые соединены между собой и работают. 0.0.0.0/0 - весь интернет.\n\nРоутер (маршрутизатор, getway) - устройство у которого есть больше одного интерфейса и они находятся в разных сетях и роутер соединяет одну подсеть с другой подсетью и благодаря этому мы можем взаимодействовать.\n\n**VLAN порт** - это второй интерфейс роутера - порт к которому подключен провайдер и на VLAN будет другая подсеть.\n\n192.168.0.0/16 - локальные сети.\n\n## NAT\nNAT - ретрансляция адресов.\nКогда мы обращаемся в сеть, мы обращаемся через VLAN и наш ip меняется.\n\n**Проброска порта** - это когда то что приходит на адрес VLAN можно пробросить к локальному адресу. Чтобы наш компьютер стал доступен из вне.\n\n**Толстый клиент** - 1С бухгалтерия, компьютерные онлайн игры;\n\n**Тонкий клиент** - браузерные приложения;\n\n## MAC\nMAC - физический адрес, назначается утсройству заводом изготовителем.\n\nИспользуется при первичной адресации, чтобы вас можно было найти в сети при первичном обращении.\n\n## DHCP\nDHCP протсокл динамических хостов, протокол к котрому обращается клиент и он выдает настройки: ip адрес, маску, шлюз, DNS.\nDHCP выдает настройки в аренду.\n\n## DNS\nDNS, Domain Name System - серверное приложение, которое хранит таблицу, в которой записано доменное имя и его ip адрес и слушает запросы от пользователей и выдает ip адрес запрашиваемого сайта.\n\n## Протокол\nПротокол - набор правил, описание того, как работают между собой клиент и сервер.\n\nПротоколы и порты по умолчанию:\n- DHCP \n- DNS :53\n- HTTP :80\n- FTP :21\n- POP3 :110\n- UDP/TCP\n\n## Порт\nКогда серверное прилодение работает оно занимает опрелеленный порт.\n\nПорт - это число от 1- 65535. IP адрес можно сравнить с домом, а порт - это квартира.\n\nОдин порт может использовать только одно приложение. Если нужно несколько приложений нужно добавить еще один порт.\n","date":"2022-06-24T00:00:00.000Z","path":"/ethernet-wi-fi-ip-mac-maska-podseti-vlan/","icon":"fas fa-bug","image":"null","order":1,"category":{"title":"nets","path":"/category/nets/"},"tags":[{"title":"qa","path":"/tag/qa/"}],"headings":[{"value":"Хост","anchor":"#хост"},{"value":"Сетевой итерфейс","anchor":"#сетевой-итерфейс"},{"value":"Hostname","anchor":"#hostname"},{"value":"IP адрес","anchor":"#ip-адрес"},{"value":"Маска подсети","anchor":"#маска-подсети"},{"value":"Диапазон сети","anchor":"#диапазон-сети"},{"value":"NAT","anchor":"#nat"},{"value":"MAC","anchor":"#mac"},{"value":"DHCP","anchor":"#dhcp"},{"value":"DNS","anchor":"#dns"},{"value":"Протокол","anchor":"#протокол"},{"value":"Порт","anchor":"#порт"}]}},{"node":{"id":"0863d597c5db8b9e48addd453dcef705","title":"Тестирование мобильного приложения","content":"\n## С чего начать?\n\n### Этап 1: Планирование\nКогда этап разработки приложения почти завершен, вы должны снова поставить перед собой вопрос - чего вы пытаетесь достичь разработкой данного приложения и какие у вас есть ограничения.\n\nВы должны определить следующее:\n\n- Взаимодействует ли ваше приложение с другими приложениями?\n- Насколько функциональны все возможности приложения?\n- Является ли тестируемое мобильное приложение нативным, Mobile-web или гибридным?\n- Ограничена ли задача тестирования приложения тестированием только внешнего интерфейса?\n- Стоят ли задачи на тестирование бэкенда?\n- Какова должна быть совместимость с различными беспроводными сетями?\n- Как сильно данные приложения и свободное пространство, занимаемое им, зависят от особенностей использования приложения?\n- Насколько быстро загружается ваше приложение, насколько быстро происходит серфинг по меню приложения и его функциям?\n- Как будет обрабатываться возможное увеличение нагрузки на приложение?\n- Влияют ли различные изменения в статусе и состоянии телефона на работу мобильного приложения?\n- Убедитесь, что вы договорились с командой тестировщиков о роли каждого из них и о ваших ожиданиях от процесса тестирования. В конце концов, общение является ключом к поддержанию правильной рабочей среды в команде.\n\nПравильное понимание ролей и задач также относится и к моменту прописывания списка тест кейсов. Вся команда QA должна поддерживать и обновлять этот документ с отчетами по тестированию всех функций, реализованных на протяжении всего процесса разработки.\n \n### Этап 2. Определение необходимых типов тестирования мобильных приложений\nПеред тестированием любых мобильных приложений определите, что именно в данном мобильном приложении вы хотите протестировать: набор функциональности, удобство использования, совместимость, производительность, безопасность и т. д. На этом же этапе имеет смысл выбрать методы тестирования мобильного приложения.\n\nОпределите, на какие целевые устройства направлено данное приложение, и какие требования  к функционалу следует проверить.\n\nВы также должны определить, какие целевые устройства нужно включить в список тестирования.\n\nВы можете сделать это следующим образом:\n\n- Выяснить, какие устройства будет поддерживать приложение;\n- Определить, какая версия операционной системы будет самой ранней из тех, что  поддерживаются приложением;\n\n- Выявить наиболее популярные модели мобильных устройств у целевой аудитории;\n- Определить набор не основных (дополнительных) устройств с экранами разных размеров, потенциально  поддерживаемых приложением;\n- Решить, будете ли вы использовать для тестирования физические устройства или их эмуляторы.\n\n### Этап 3: Тестовые случаи и разработка сценариев тестирования приложения\nПодготовьте документ, описывающий тестовые случаи (test cases) для каждой тестируемой функции и функциональности.\n\nВ дополнение к функциональным тестовым случаям, также должны быть охвачены некоторые отдельные моменты (кейсы):\n\n- Особенность использование батареи;\n- Скорость работы приложения;\n- Требования к данным;\n- Объем используемой памяти.\n\nТакже перед началом тестирования важно определиться, какое сочетание ручного и автоматического тестирования вы будете применять.\n\nПри необходимости подготовьте отдельные наборы ручных тестовых случаев и сценариев для автоматического тестирования и адаптируйте их согласно требованиям проекта.\n \n### Этап 4: Ручное и автоматическое тестирование\nТеперь пришло время для выполнения ручных и автоматизированных тестов.\nРанее, на предыдущих этапах, вы уже определили, какие тесты и скрипты использовать и подготовили их. Теперь, на текущем этапе, вы выполняете запуск тестов для проверки механизмов основной функциональности, чтобы убедиться в отсутствии поломок.\n\nАвтоматизированное тестирование мобильных приложений хорошо экономит время и другие ресурсы тестировщиков.\n\n### Этап 5: Тестирование юзабилити и бета-тестирование\nПосле того, как базовый функционал протестирован, настало время убедиться, что мобильное приложение является достаточно простым в использовании и обеспечивает удовлетворительный пользовательский опыт. На этом этапе необходимо поддерживать соответствие матрице кроссплатформенности, чтобы обеспечить охват пользователей различных платформ, достигнутый бета-тестерами.\n\nПосле того, как приложение будет протестировано внутри компании, вы сможете выпустить бета-версию приложения на рынок.\n\n**Тестирование совместимости**\n\nМобильные устройства различаются в зависимости от платформы, модели и версии их операционной системы. Важно выбрать такое подмножество устройств, которое будет соответствовать вашему приложению.\n\n**Тестирование пользовательского интерфейса**\n\nПользовательский опыт является ключевым элементом, при тестировании приложения. Ведь наше приложение разрабатывается именно для конечных пользователей. Вам следует качественно проверить удобство использования приложения, навигацию по его элементам и контент. Тестируйте меню, опции, кнопки, закладки, историю, настройки и навигацию приложения.\n\n**Тестирование интерфейса**\n\nТестирование пунктов меню, кнопок, закладок, истории, настроек и навигации по приложению.\n\n**Тестирование внешних факторов**\n\nПриложения для мобильных устройств не будут единственными приложениями на устройстве пользователя. Вместе с вашим приложением будут установлены приложения от сторонних разработчиков. Возможно десятки таких приложений. Следовательно, вашему приложению придётся взаимодействовать с этими сторонними приложениями и прерывать работу различных функций устройства, таких как различные типы сетевых подключений, обращение к SD-карте, телефонные звонки и другие функции устройства.\n\n**Тестирование доступности**\n\nМобильными устройствами могут пользоваться различные люди с ограниченными возможностями. По этой причине важно  протестировать возможность работы с приложением людей с дальтонизмом, нарушениями слуха, проблемами пожилого возраста и другими возможными проблемами.  Такое тестирование является важной частью общего тестирования юзабилити.\n\n### Этап 6: Тестирование производительности\nМобильные устройства предоставляют для приложений меньший объем памяти и меньшую доступную мощность процессора, чем стационарные компьютеры и ноутбуки. По этой причине в работе мобильных приложений очень важна эффективность использования предоставляемых ресурсов. Вам следует проверить работоспособность тестируемого приложения, изменив соединение с 2G, 3G на WIFI, проверить скорость отклика, потребление заряда батареи, стабильность работы и т. д.\n\nРекомендуется проверять приложение на предмет масштабируемости применения и наличие возможных проблем с производительностью.\n\nВ рамках этого этапа важно пройти и нагрузочное тестирование мобильного приложения.\n\n**Функциональное тестирование**\n\nФункциональность приложения должна быть полностью протестирована. Особое внимание следует уделить установке, обновлениям, регистрации и входу в систему, обеспечению, работе со специфическими функциями устройства и сообщениям об ошибках.\n\nФункциональное тестирование мобильного приложения, по большей части, может быть выполнено так же, как вы выполнили бы его для любого другого типа приложения. По этой причине мы не будем вдаваться в подробности этого типа тестирования. Однако следует указать области, которые имеют особое значение для мобильных приложений.\n\nИмейте в виду, что функциональное тестирование должно включать в себя тестирование всех функций приложения и не должно быть излишне сосредоточено на какой-то одной функции.\n\nВ рамках функционального тестирования, вам следует выполнить следующие тесты:\n\n- Тестирование процесса установки;\n- Тестирование возможности обновлений;\n- Эксплуатационное тестирование;\n- Тестирование процесса регистрации и авторизации;\n- Тестирование функций, специфических для устройства;\n- Тестирование отправки и получения сообщений об ошибках;\n- Низкоуровневое тестирование ресурсов: использование памяти, автоматическое освобождение ресурсов и т.д.\n- Тестирование сервисов: функционирование как в режиме онлайн, так и в автономном режиме.\n\n### Этап 7: Аттестационное тестирование и тестирование безопасности приложения\nБезопасность и конфиденциальность данных имеют огромное значение в наше время. Пользователи требуют, чтобы вся их информация хранилась безопасно и конфиденциально.\n\nУбедитесь, что тестируемое приложение надежно защищено. Выполните проверку на возможность внедрения SQL инъекций, на возможность перехвата сеансов, анализа дампов данных, анализа пакетов и SSL трафика.\n\nОчень важно проверить безопасность хранилища конфиденциальных данных вашего мобильного приложения и его поведение в соответствии с различными схемами разрешений для устройств.\n\nПомимо проверки безусловного шифрования имен пользователей и паролей, задайте себе следующие вопросы:\n\n- Есть ли у приложения сертификаты безопасности?\n- Использует ли приложение безопасные сетевые протоколы?\n- Существуют ли какие-либо ограничения, например количество попыток входа в систему до блокировки пользователей?\n \n### Этап 8: Тестирование устройства\nВыполните тесты по тем алгоритмам, которые вы ранее прописали в тестовых случаях и сценариях тестирования на всех определенных для тестирования устройствах, в облаке и / или на физических устройствах.\n\n### Этап 9: контрольный этап и резюме\nЭтот этап включает в себя подробное и полное тестирование - от ранних итеративных этапов тестирования до регрессионных тестов, которые все еще могут потребоваться для стабилизации работы приложения и выявления незначительных дефектов.\n\nНа этом этапе тестирования вы можете добавить для проверки новые функции и изменить настройки на те, которых не будет в финальной версии.\n\nПосле завершения тестирования приложения, дополнительные параметры и функции, добавленные для проверки на этом этапе, удаляются, и окончательная версия становится готовой для представления общественности.\n\n**Итоговый отчет о тестировании**\n\nВесь процесс тестирования мобильных приложений должен быть тщательно задокументирован. Проверьте дважды, сделаны ли нужные записи, и после этого сформируйте свой окончательный отчет о тестировании (test summary report).\n\nЭтот отчет должен включать:\n\n- Важную информацию, выявленную в результате проведенных испытаний;\n- Информацию о качестве проводимого тестирования;\n- Сводную информацию о качестве тестируемого мобильного приложения;\n- Статистику, полученную из отчетов об различных инцидентах;\n- Информацию о видах тестирования и времени, затраченном на каждый из них.\n\nСледует также указать в отчете, что:\n\n- данное мобильное приложение пригодно для использования в том качестве, в котором заявлено;\n- соответствует всем критериям приемлемости функционала и качества работы.\n\n","date":"2022-09-07T00:00:00.000Z","path":"/testirovanie-mobilnogo-prilozheniya/","icon":"fas fa-code","image":"null","order":1,"category":{"title":"mobile","path":"/category/mobile/"},"tags":[{"title":"qa","path":"/tag/qa/"}],"headings":[{"value":"С чего начать?","anchor":"#с-чего-начать"}]}},{"node":{"id":"2793248ccd806c635d93023fd7da0d80","title":"Модель OSI vs стек протоколов TCP/IP","content":"\n## Модель OSI\nМодель OSI - это описание уровней и какие протоколы используются на этих уровнях.\n\n### Уровни\n\n- Прикладной: HTTP, FTP, POP3\n- Представления: JPG, ASCII\n- Сеансовый: RPC, PAP\n- Транспортный: TCP, UDP\n- Сетевой: IP(IPv4, IPv6)\n- Канальный: Ethernet, 802.22\n- Физический: радиоканал или витая пара\n\n### Разница между TCP и UDP\n\n\n**UDP** - транспортный протокол без подтверждения доставки;  \nТак как нам не всегда нужно подтверждение доставки и не важна точность данных, например, разговор по скайпу, прослушивание музыки.\n\n**TCP** - транспортный протокол с подтверждением доставки;  \nНапример, открытие страницы в интернет -  если что то не дойдет, то поедет верстка, отправка письма - если что то потеряется, то будет потерян смысл пиисьма, отправка файла и т.д.\n\nЕсли смотреть на процесс открытия web-страницы в интернете то это будет выглядеть так:  \n\nесли смотреть с **физического уровня**, то  мы подключены к интернету по витой паре или радиоканалу(wi-fi);\n\nесли с **канального уровня**, то у wi-fi есть стандарт 802.11g 802.11ab мы подкючаемся по нему;\n\nс точки зрения **сетевого уровня**, у нас ip адресация - откуда и куда нужно отправить информацию;\n\nс точки зрения **транспортного уровня**, http работает по TCP, проверка целостности данных;\n\n**сеансовый уровень** не используется;\n\nс точки зрения **представления** мы отправили наш запрос в виде текста (ASCII - текст);\n\nс точки зрения **прикладного уровня**, мы используем HTTP;\n\n## Модель TCP/IP\n\nTCP/IP - название стека протоколов\n\n- Прикладной: HTTP, FTP, POP3\n- Транспортный: TCP, UDP\n- Сетевой: IP(IPv4, IPv6)\n- Сетевого доступа: Ethernet, 802.22 + радиоканал или витая пара\n\n\nЧек-лист API тестов\nКорректность структуры данных\nPOST запросы\nЗаполнены все поля валидными данными\nЗаполнены только обязательные поля\nЗаполнены не все обязательные поля\nНе заполнено ни одно поле\nВалидация данных в полях (корректные и некорректные данные)\nПустой JSON\nДата создания объекта\nGET запросы\nПустой список (если возможно)\nЗаполненный список\nПагинация в списке (limit, offset)\nПолучение списка с ограничением на количество записей\nПолучение списка начиная с указанного номера\nВ случае передачи параметров с некорректным значением возвращается 400 с описанием ошибки в теле ответа\nПри отрицательном offset список пользователей возвращается начиная с первой позиции\nПри несуществующем offset возвращается пустой список пользователей\nСортировка списка\nЗапрос данных по валидному ID, проверка возвращения корректных данных\nЗапрос данных по несуществующему ID, но в валидном формате\nЗапрос данных по невалидному ID\nPUT запросы\nОбновление с корректными данными\nОбновление по несуществующему ID\nОбновление по невалидному ID\nВалидация полей (корректные и некорректные данные)\nЧастичное обновление (в JSON присутствуют не все поля)\nDELETE запросы\nУдаление существующего объекта\nУдаление уже удаленного объекта\nУдаление по несуществующему ID\nУдаление по невалидному ID\nУдаление и повторное добавление такой же сущности (если есть уникальные поля)\nПроверка статусов ответов\nПроверка всех возможных ошибок\nОстальные специфичные проверки в случае сложной логики","date":"2022-06-24T00:00:00.000Z","path":"/model-osi-vs-stek-protokolov-tcp-ip/","icon":"fas fa-bug","image":"null","order":1,"category":{"title":"nets","path":"/category/nets/"},"tags":[{"title":"qa","path":"/tag/qa/"}],"headings":[{"value":"Модель OSI","anchor":"#модель-osi"},{"value":"Модель TCP/IP","anchor":"#модель-tcpip"}]}},{"node":{"id":"c1e39273d25f748e47b87dc280b07ce4","title":"CREATE, DROP, DELETE, UPDATE, INSERT, ALTER","content":"\n## Состав таблицы\n\n1. Дать таблице имя, пусть она будет называться book, вот некоторые правила для выбора имен таблиц:\n- может включать английские буквы, цифры и знак подчеркивания, должно начинаться с буквы;\n- имя должно быть уникальным в пределах базы данных.\n\nТакже рекомендуется:\n- чтобы имя было существительным в единственном числе;\n- имя должно быть понятным и соответствовать тому объекту, который оно описывает;\n- имя должно быть как можно короче, максимум до 10 символов.\n\n2. Определить структуру таблицы, из каких атрибутов(столбцов, полей) она будет состоять.\n\nПравила по выбору имени поля информационного объекта:\n- может включать английские буквы, цифры и знак подчеркивания, должно начинаться с буквы;\n- имя поля должно быть уникальным в пределах таблицы.\n\nРекомендации по выбору имени поля информационного объекта:\n- имя должно быть понятным и соответствовать тем данным, которые хранятся в поле;\n- имя может состоять из нескольких слов, тогда слова разделяются подчеркиванием, после подчеркивания слово пишется с маленькой буквы.\n\n3. Включить ключевое поле id, которое является ОБЯЗАТЕЛЬНЫМ ЭЛЕМЕНТОМ каждой реляционной таблицы. Ключевое поле является уникальным для каждой записи, однозначно определяет запись и в дальнейшем будет использоваться для связей с другими таблицами.\n\nРекомендации по именованию  ключевых полей:\n- имя должно состоять  из двух частей: начинаться с названия таблицы, которой поле принадлежит, затем через подчеркивание необходимо указать id.\n\n## Основные типы данных SQL\n\n- INT, INTEGER  \n_Описание:_ Целое число, могут принимать значения от -2 147 483 648 до 2 147 483 647  \t\n_Пример:_ -567 1205\n\n- DECIMAL, NUMERIC  \n_Описание:_ Вещественное число, в скобках указывается максимальная длина числа (включает символы слева и справа от десятичной запятой) и количество знаков после запятой.\nМожно использовать оба этих типа, они эквивалентны, принимают значения в диапазоне -10^38+1 до 10^38-1.\nDECIMAL(4,1) NUMERIC(6,3)  \n_Пример:_ 34.6 -3.294\n\n- DATE  \n_Описание:_ Дата в формате ГГГГ-ММ-ДД \n26 июля 2020 года\n3 января 2021 года  \n_Пример:_ 2020-07-26 2021-01-03\n\n- VARCHAR  \n_Описание:_ Строка длиной не более 255 символов, в скобках указывается максимальная длина строки, которая может храниться в поле VARCHAR(10)(рассматриваются однобайтовые кодировки, для которых число в скобках соответствует максимальному количеству символов в строке)  \n_Пример:_ пример описание\n\nРекомендации по выбору типов данных для полей таблицы.\n- Выбирайте минимальный тип данных исходя из максимального значения поля. Например, если максимальный текст, который может быть записан в поле, имеет длину 25 символов, значит нужно использовать тип VARCHAR(25).\n- Для описания ключевого поля используйте описание INT PRIMARY KEY AUTO_INCREMENT. Это значит, что в поле будут заноситься различные целые числа, при этом они будут автоматически генерироваться (каждая следующая строка будет иметь значение ключа на 1 больше предыдущего).\n\n## Создание таблицы\n\nДля создания таблицы используется SQL-запрос. \n\n```sql\nCREATE TABLE genre(\n    genre_id INT PRIMARY KEY AUTO_INCREMENT, \n    name_genre VARCHAR(30)\n);\n```\n\nРекомендации по записи SQL запроса\n- Ключевые слова: SQL не является регистрозависимым языком (CREATE и create - одно и тоже ключевое слово). \n- Ключевые слова SQL и типы данных рекомендуется  записывать прописными (большими) буквами.\n- Имена таблиц и полей - строчными (маленькими) буквами.\nSQL-запрос можно писать на нескольких строках.\n- В конце SQL-запроса ставится точка с запятой (хотя если Вы пишете один запрос, это необязательно).\n\n## Вставка записи в таблицу\n\nВ таблицу, состоящую из двух столбцов добавим новую строку, при этом в поле1 заносится значение1,  в поле2 - значение2.\n\n```sql\nINSERT INTO таблица(поле1, поле2) \nVALUES (значение1, значение2);\n```\n\nПри составлении списка полей и списка значений необходимо учитывать следующее:\n- количество полей и количество значений в списках должны совпадать;\n- должно существовать прямое соответствие между позицией одного и того же элемента в обоих списках, поэтому первый элемент списка значений должен относиться к первому столбцу в списке столбцов, второй – ко второму столбцу и т.д.;\n- типы данных элементов в списке значений должны быть совместимы с типами данных соответствующих столбцов таблицы ( целое число можно занести в поле типа DECIMAL, обратная операция - недопустима);\n- новые значения нельзя добавлять в поля, описанные как PRIMARY KEY AUTO_INCREMENT;\n- рекомендуется заполнять все поля записи, если же поле пропущено, значение этого поля зависит от установленных по умолчанию значений, если значения не установлены - на данной платформе вставляется пустое значение (NULL).","date":"2022-07-07T00:00:00.000Z","path":"/create-drop-delete-update-insert-alter/","icon":"fas fa-bug","image":"null","order":1,"category":{"title":"testops","path":"/category/testops/"},"tags":[{"title":"qa","path":"/tag/qa/"}],"headings":[{"value":"Состав таблицы","anchor":"#состав-таблицы"},{"value":"Основные типы данных SQL","anchor":"#основные-типы-данных-sql"},{"value":"Создание таблицы","anchor":"#создание-таблицы"},{"value":"Вставка записи в таблицу","anchor":"#вставка-записи-в-таблицу"}]}},{"node":{"id":"b10c9dd7b8dd4a38cdf2d00c801f1043","title":"Подготовка к собеседованию на QA Automation Engineer 2","content":"\nhttps://itvdn.com/ru/blog/article/250-questions-qa?utm_sourse=tg_post_/250_questions_qa\n\nhttps://www.youtube.com/channel/UC6hNNlCXv1ZgdGpziNf83RA/videos\n\nhttps://www.youtube.com/watch?v=za6VI5uplIk\n\nhttps://www.youtube.com/watch?v=PIxa53N_uIM\n\nhttps://www.youtube.com/watch?v=LR7aDc_G5Xo\n\nhttps://www.youtube.com/watch?v=KlE3BOltGdw\n\nhttps://www.youtube.com/watch?v=GI2D3MAZBe0\n\nhttps://www.youtube.com/watch?v=PBjYqFNfLhw\n\nhttps://www.youtube.com/watch?v=u5BU2CxgBIo\n\nhttps://www.youtube.com/watch?v=PMJYLi_ePiQ\n\nhttps://www.youtube.com/watch?v=l3vC73Hgl-w\n\nhttps://www.youtube.com/watch?v=Fj1DdwSiY34\n\nhttps://www.youtube.com/watch?v=QnUFyAiL0N0&t=673s\n\nhttps://www.youtube.com/watch?v=KFgYa6GkAjM\n\nhttps://www.youtube.com/watch?v=dMdHRYfjzx0&t=1s\n\nhttps://www.youtube.com/watch?v=6bq28qjTHQk\n\nhttps://www.youtube.com/watch?v=vmOK5r4bjRU\n\nhttps://www.youtube.com/watch?v=WOo3YZHIDYE&t=2s\n\nhttps://www.youtube.com/watch?v=q75avN98ibg\n\nhttps://www.youtube.com/watch?v=XhKDpflWKls&t=2101s\n\nhttps://www.youtube.com/watch?v=4D40jGV8Jb8\n\nhttps://www.youtube.com/watch?v=4ESHltu1YBI\n\n\n\n## QA\n\n## Теоретическая база по Computer Science \nпонимание работы целевой платформы, общие принципы построения приложений, версионность, SDLC и прочее\n\nhttps://www.youtube.com/playlist?list=PLtPJ9lKvJ4oiNMvYbOzCmWy6cRzYAh9B1\n\n## Теоретическая база по тестированию\nтест-дизайн, практики и подходы тестирования, артефакты тестирования и принципы и подходы к построению и проведению тестирования.\n\n## Теоретическая база по автоматизации\nкакие инструменты есть, как автоматизируются те или иные сценарии, что стоит автоматизировать, а что нет и с какой стороны ко всему этому подходить. Пресловутый page object и html\\page elements.\n\n## Теоретическая база по программированию\nООП, структуры данных, способность решать минимальные типовые задачи, знание Java\\Python.\n\n\n\n\n### Основы тест-дизайна\n\n- как бы вы составили тест-кейсы для какого-то функционала или целой программы\n\n### Понимание работы клиент-серверных приложений\n\n- как работает Web\n- протокол HTTP\n- связка HTML / CSS / JavaScript\n- смысл кросс-браузерного тестирования\n\nкак настроить Selenium или Selenoid, как подбирать CSS или XPath-локаторы для элементов, какие браузеры выбрать для тестов.\nДля автоматизации API необходимо знать про методы HTTP-запросов (GET, POST, PUT, DELETE и т.д.) и их отличия, коды ответа сервера и их основные форматы (JSON, XML).\n\nНа практической части могут дать проверить работу какого-нибудь приложения, попросить составить список тест-кейсов и рассказать про особенности тестирования подобных продуктов.\n\n\n## Java\n\n- вопросы по ООП - что такое класс и экземпляр класса, что такое инкапсуляция, полиморфизм и наследование, какие бывают модификаторы доступа (в Java) и прочее.\n\nЕще на собеседовании могут поспрашивать немного про паттерны программирования. Тут хорошо знать про Singleton, Factory, PageObject, PageFactory, Builder и так далее. Можно еще почитать про принципы разработки SOLID, KISS, DRY, SRP.\n\n## TestOps\n\nс какой CI-системой вы чаще всего работали. На мой взгляд, самыми популярными являются Jenkins, Gitlab CI, TeamCity и Bamboo.\n\nПомимо этого спросят про опыт работы с bash: команды cd, ls, ps, mv, cp и так далее. Просто, чтобы убедиться, что вы не растеряетесь, зайдя на какой-нибудь сервер на основе linux по ssh.\n\nЕще могут быть вопросы по Docker - что такое образ, как запустить контейнер, как сделать маунт директории хост-машины, как собрать docker compose файл, как распространять образы между коллегами (docker registry)... Примерно так.\n\nСкорее всего попросят решить какую-нибудь задачку на SQL-запрос. Он тоже довольно популярен и с ним приходится работать, например, при тестировании серверной части: баз данных, сервисов или API.\n\nНапоследок могут спросить про системы контроля версий. Сейчас, на мой взгляд, самая популярная - это Git. Кандидата могут спросить про то, что такое ветки и коммиты, попросить решить какую-нибудь простую задачу. Например, рассказать о способе решения конфликтов мержа.","date":"2022-05-26T00:00:00.000Z","path":"/podgotovka-k-sobesedovaniyu-na-qa-automation-engineer-2/","icon":"fas fa-bug","image":"null","order":2,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"собеседование","path":"/tag/%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"},{"title":"interview","path":"/tag/interview/"}],"headings":[{"value":"QA","anchor":"#qa"},{"value":"Теоретическая база по Computer Science","anchor":"#теоретическая-база-по-computer-science"},{"value":"Теоретическая база по тестированию","anchor":"#теоретическая-база-по-тестированию"},{"value":"Теоретическая база по автоматизации","anchor":"#теоретическая-база-по-автоматизации"},{"value":"Теоретическая база по программированию","anchor":"#теоретическая-база-по-программированию"},{"value":"Java","anchor":"#java"},{"value":"TestOps","anchor":"#testops"}]}},{"node":{"id":"8411675ac667afb9e4f5fb5ff1339541","title":"Базовые запросы с использованием LIKE, BETWEEN, ORDER BY, ALIASES, IN, TOP-LIMIT, DISTINCT","content":"\n## Выборка всех данных из таблицы\n\nДля того чтобы отобрать все данные из таблицы используется SQL запрос следующей структуры:\n\nключевое слово SELECT; \nсимвол « *» ; \nключевое слово FROM; \nимя таблицы.\n\n```sql\nSELECT * FROM book;\n```\n\n## Выборка отдельных столбцов\n\nДля того чтобы отобрать данные из определенных столбцов таблицы используется SQL запрос следующей структуры: \n\nключевое слово SELECT ; \nсписок столбцов таблицы через запятую; \nключевое слово FROM ; \nимя таблицы.\n\n```sql\nSELECT title, amount FROM book;\n```\n\n## AS - Выборка новых столбцов и присвоение им новых имен\n\nДля того чтобы отобрать данные из определенных столбцов таблицы и одновременно задать столбцам новые имена используется SQL запрос следующей структуры: \n\nключевое слово SELECT ; \nимя столбца;\nключевое слово AS ; \nновое название столбца (можно русскими буквами), но это должно быть одно слово, если название состоит из двух слов – соединяйте их подчеркиванием, например, Количество_книг ; \nзапятая; \nимя столбца; \n.... \nключевое слово FROM ; \nимя таблицы.\n\nРезультатом является таблица, в которую включены все данные из указанных после SELECT столбцов исходной таблицы. Каждому столбцу присваивается новое имя, заданное после AS, или столбец получает имя столбца исходной таблицы, если AS отсутствует.\n\n```sql\nSELECT title AS Название, amount \nFROM book;\n```\n\n## Выборка данных, вычисляемые столбцы, математические функции\n\nС помощью SQL запросов можно осуществлять вычисления по каждой строке таблицы с помощью вычисляемого столбца. Для него в списке полей после оператора SELECT указывается выражение и задается имя.\n\nВыражение может включать имена столбцов, константы, знаки операций, встроенные функции.\n\nРезультатом является таблица, в которую включены все данные из указанных после SELECT столбцов, а также новый столбец, в каждой строке которого вычисляется заданное выражение.\n\n```sql\nSELECT title, author, price, amount, \n     price * amount AS total \nFROM book;\n```\n\nВ SQL реализовано множество  математических функций для работы с числовыми данными. В таблице приведены некоторые из них.\n\n|Функция|\tОписание|\tПример|\n|---|---|---|\n|CEILING(x)|\tвозвращает наименьшее целое число, большее или равное x (округляет до целого числа в большую сторону)|CEILING(4.2)=5 CEILING(-5.8)=-5|\n|ROUND(x, k)|округляет значение x до k знаков после запятой, если k не указано – x округляется до целого|ROUND(4.361)=4 ROUND(5.86592,1)=5.9|\n|FLOOR(x)|возвращает наибольшее целое число, меньшее или равное x (округляет до  целого числа в меньшую сторону)|FLOOR(4.2)=4 FLOOR(-5.8)=-6|\n|POWER(x, y)|возведение x в степень y|POWER(3,4)=81.0|\n|SQRT(x)|квадратный корень из x|SQRT(4)=2.0 SQRT(2)=1.41...|\n|DEGREES(x)|конвертирует значение x из радиан в градусы\t|DEGREES(3) = 171.8...|\n|RADIANS(x)|конвертирует значение x из градусов в радианы|\tRADIANS(180)=3.14...|\n|ABS(x)\t|модуль числа x\t|ABS(-1) = 1 ABS(1) = 1|\n|PI()\t|pi = 3.1415926...\t ||\n\nСуществуют разные способы округления чисел. В SQL реализовано математическое округление. Для округления вещественного числа нужно в записи числа выбрать разряд в дробной части, до которого производится округление. Цифра, записанная в выбранном разряде: не меняется, если следующая за ней справа цифра - 0, 1, 2, 3 или 4; увеличивается на единицу, если следующая за ней справа цифра - 5,6,7,8 или 9.\n\n```sql\nSELECT title, \n    price, \n    ROUND((price*18/100)/(1+18/100),2) AS tax, \n    ROUND(price/(1+18/100),2) AS price_tax \nFROM book;\n```\n\n## Выборка данных, вычисляемые столбцы, логические функции\n\nВ SQL реализована возможность заносить в поле значение в зависимости от условия. Для этого используется функция IF:\n\n```IF(логическое_выражение, выражение_1, выражение_2)```\nФункция вычисляет `логическое_выражение`, если оно истина – в поле заносится значение `выражения_1`, в противном случае –  значение `выражения_2`. Все три параметра `IF()` являются обязательными.\n\nДопускается использование вложенных функций, вместо `выражения_1` или `выражения_2` может стоять новая функция `IF`.\n\n```sql\nSELECT title, amount, price, \n    ROUND(IF(amount<4, price*0.5, price*0.7),2) AS sale\nFROM book;\n```\n\n```sql\nSELECT title, amount, price,\n    ROUND(IF(amount < 4, price * 0.5, IF(amount < 11, price * 0.7, price * 0.9)), 2) AS sale,\n    IF(amount < 4, 'скидка 50%', IF(amount < 11, 'скидка 30%', 'скидка 10%')) AS Ваша_скидка\nFROM book;\n```\n\n## Выборка данных по условию\n\nС помощью запросов можно включать в итоговую выборку не все строки исходной таблицы, а только те, которые отвечают некоторому условию. Для этого после указания таблицы, откуда выбираются данные, задается ключевое слово WHERE и логическое выражение, от результата которого зависит будет ли включена строка в выборку или нет. Если условие – истина, то строка(запись)  включается в выборку, если ложь – нет.\n\nЛогическое выражение может включать операторы сравнения (равно «=», не равно «<>», больше «>», меньше «<», больше или равно«>=», меньше или равно «<=») и выражения, допустимые в SQL.\n\n```sql\nSELECT title, price \nFROM book\nWHERE price < 600;\n```\n\n## Выборка данных, логические операции\n\nЛогическое выражение после ключевого слова WHERE кроме операторов сравнения  и выражений может включать  логические операции (И «and», ИЛИ «or», НЕ «not») и круглые скобки, изменяющие приоритеты выполнения операций.\n\nПриоритеты операций:\n1. круглые скобки\n2. умножение  (*),  деление (/)\n3. сложение  (+), вычитание (-)\n4. операторы сравнения (=, >, <, >=, <=, <>)\n5. NOT\n6. AND\n7. OR\n\n```sql\nSELECT title, author, price \nFROM book\nWHERE (author = 'Булгаков М.А.' OR author = 'Есенин С.А.') AND price > 600;\n```\n\nВ данном запросе обязательно нужно поставить скобки, так как без них сначала вычисляется  author = 'Есенин С.А.' and price > 600, а потом уже выражение через or. Без скобок были бы отобраны все книги Булгакова и те книги Есенина, цена которых больше 600.\n\n## Операторы BETWEEN, IN - выборка данных\n\nЛогическое выражение после ключевого слова WHERE может включать операторы  BETWEEN и IN. Приоритет  у этих операторов такой же как у операторов сравнения, то есть они выполняются раньше, чем NOT, AND, OR.\n\n### Оператор BETWEEN\nОператор BETWEEN позволяет отобрать данные, относящиеся к некоторому интервалу, включая его границы.\n\n```sql\nSELECT title, amount \nFROM book\nWHERE amount BETWEEN 5 AND 14;\n```\n\n### Оператор  IN\nОператор  IN  позволяет выбрать данные, соответствующие значениям из списка.\n\n```sql\nSELECT title, price \nFROM book\nWHERE author IN ('Булгаков М.А.', 'Достоевский Ф.М.');\n```\n\n## Оператор ORDER BY - выборка данных с сортировкой\n\nПри выборке можно указывать столбец или несколько столбцов, по которым необходимо отсортировать отобранные строки. Для этого используются ключевые слова ORDER BY, после которых задаются имена столбцов. При этом строки сортируются по первому столбцу, если указан второй столбец, сортировка осуществляется только для тех строк, у которых значения первого столбца одинаковы. По умолчанию ORDER BY выполняет сортировку по возрастанию. Чтобы управлять направлением сортировки вручную, после имени столбца указывается ключевое слово ASC (по возрастанию) или DESC (по убыванию). \n\nСтолбцы после ключевого слова ORDER BY можно задавать:\n- названием столбца;\n- номером столбца;\n- именем столбца (указанным после AS).\n\n```sql\nSELECT title, author, price\nFROM book\nORDER BY title;\n```\n\n## Оператор LIKE - выборка данных\nОператор LIKE используется для сравнения строк. В отличие от операторов отношения равно (=) и не равно (<>), LIKE позволяет сравнивать строки не на полное совпадение (не совпадение), а в соответствии с шаблоном. Шаблон может включать обычные символы и символы-шаблоны. При сравнении с шаблоном, его обычные символы должны в точности совпадать с символами, указанными в строке. Символы-шаблоны могут совпадать с произвольными элементами символьной строки.\n\n|Символ-шаблон|\tОписание|\tПример|\n|---|----|---|\n|%\t|Любая строка, содержащая ноль или более символов|\tSELECT * FROM book WHERE author LIKE '%М.%' - выполняет поиск и выдает все книги, инициалы авторов которых содержат «М.»|\n|_ (подчеркивание)|\tЛюбой одиночный символ|\tSELECT * FROM book WHERE title LIKE 'Поэм_' - выполняет поиск и выдает все книги, названия которых либо «Поэма», либо «Поэмы» и пр.|\n\n\n| Шаблон | Описание |\n| --- | --- |\n| 'Б%' | значение, начинающееся с буквы «Б». |\n| \"_ _ _ _ _\" | значение, состоящее ровно из 5 букв |\n| \"_ _ _ _ _ _%\" | значение  длиннее 5 символов |\n| title LIKE \"\\_% и \\_%\" _(отбирает слово И внутри названия)_ <br><br> OR title LIKE \"и \\_%\" _(отбирает слово И в начале названия)_ <br><br> OR title LIKE \"\\_% и\" _(отбирает слово И в конце названия)_ <br><br> OR title LIKE \"и\" | Значение которое содержит букву \"и\" как отдельное слово, если считать, что слова отделяются друг от друга пробелами и не содержат знаков препинания. |\n|\"% %\" | значение состоит ровно из одного слова|\n|\"_% %\" | значение состоит из двух и более слов |\n\n## Оператор DISTINCT - Выбор уникальных элементов столбца\n\nЧтобы отобрать уникальные элементы некоторого столбца используется ключевое слово DISTINCT, которое размещается сразу после SELECT.\n\n```sql\nSELECT DISTINCT author\nFROM book;\n```\n\n## Оператор GROUP BY - Выбор уникальных элементов столбца\n\nОператор GROUP BY группирует данные при выборке, имеющие одинаковые значения в некотором столбце. Столбец, по которому осуществляется группировка, указывается после GROUP BY .\n\nС помощью GROUP BY можно выбрать уникальные элементы столбца, по которому осуществляется группировка. Результат будет точно такой же как при использовании DISTINCT.\n\n```sql\nSELECT  author\nFROM book\nGROUP BY author;\n```\n\n## Групповые функции SUM и COUNT - Выборка данных\n\nПри группировке над элементами столбца, входящими в группу можно выполнить различные действия, например, просуммировать их или найти количество элементов в группе.\n\n```sql\nSELECT author, sum(amount), count(amount)\nFROM book\nGROUP BY author;\n```\n\n1. В таблице book определяются строки, в которых в столбце author одинаковые значения\n2. Вместо каждой группы в результирующий запрос включается  одна запись. Запись как минимум включает значение столбца, по которому осуществляется группировка (в нашем случае это author)\n3. Дальше можно выполнить вычисления над элементами КАЖДОЙ группы в отдельности, например, посчитать общее количество экземпляров книг каждого автора. Для этого используется групповая функция SUM(), а в скобках указывается столбец, по которому нужно выполнить суммирование ( в нашем случае amount)\n4. Также можно посчитать, сколько записей относится к группе. Для этого используется функция COUNT(), в скобках можно указать ЛЮБОЙ столбец из группы, если группа не содержит пустых значений (ниже приведен пример, в котором показано, как работает COUNT(), если в группе есть пустые значения)\n\nФункцию COUNT() можно применять к любому столбцу, в том числе можно использовать и *, если таблица не содержит пустых значений. Если же в столбцах есть значения Null, то\n- COUNT(*) —  подсчитывает  все записи, относящиеся к группе, в том числе и со значением NULL;\n- COUNT(имя_столбца) — возвращает количество записей конкретного столбца (только NOT NULL), относящихся к группе.\n\n## Групповые функции MIN, MAX и AVG\n\nК групповым функциям SQL относятся: MIN(), MAX() и AVG(), которые вычисляют минимальное, максимальное и среднее значение элементов столбца, относящихся к группе.\n\n```sql\nSELECT author, MIN(price) AS min_price\nFROM book\nGROUP BY author;\n```\n\n## Выборка данных c вычислением, групповые функции\n\nВ качестве аргумента групповых функций  SQL может использоваться не только столбец, но и любое допустимое в SQL арифметическое выражение.\n\n```sql\nSELECT author, SUM(price * amount) AS Стоимость\nFROM book\nGROUP BY author;\n```\n\n```\n+------------------+-----------+\n| author           | Стоимость |\n+------------------+-----------+\n| Булгаков М.А.    | 4715.47   |\n| Достоевский Ф.М. | 11802.03  |\n| Есенин С.А.      | 9750.00   |\n+------------------+-----------+\n```\n\n```sql\nSELECT author, ROUND(AVG(price),2) AS Средняя_цена\nFROM book\nGROUP BY author;\n```\n\n## Вычисления по таблице целиком\n\nГрупповые функции позволяют вычислять итоговые значения по всей таблице. Например, можно посчитать общее количество книг на складе, вычислить суммарную стоимость и пр. Для этого после ключевого слова SELECT указывается групповая функция для выражения или имени столбца, а ключевые слова GROUP BY опускаются.\n\n```sql\nSELECT SUM(amount) AS Количество\nFROM book;\n```\n\n## Выборка данных по условию, групповые функции\nВ запросы с групповыми функциями можно включать условие отбора строк, которое в обычных запросах записывается после WHERE. В запросах с групповыми функциями вместо WHERE используется ключевое слово HAVING , которое размещается после оператора GROUP BY.\n\n```sql\nSELECT author,\n    MIN(price) AS Минимальная_цена, \n    MAX(price) AS Максимальная_цена\nFROM book\nGROUP BY author\nHAVING SUM(price * amount) > 5000; \n```\n\nТакже в запросах с группировкой можно сортировать данные.\n\n```sql\nSELECT author,\n    MIN(price) AS Минимальная_цена, \n    MAX(price) AS Максимальная_цена\nFROM book\nGROUP BY author\nHAVING SUM(price * amount) > 5000 \nORDER BY Минимальная_цена DESC;\n```\n\nWHERE и HAVING могут использоваться в одном запросе. При этом необходимо учитывать порядок выполнения  SQL запроса на выборку на СЕРВЕРЕ:\n\nFROM\nWHERE\nGROUP BY\nHAVING\nSELECT\nORDER BY\n","date":"2022-07-07T00:00:00.000Z","path":"/bazovye-zaprosy-s-ispolzovaniem-like-between-order-by-aliases-in-top-limit-distinct/","icon":"fas fa-bug","image":"null","order":2,"category":{"title":"testops","path":"/category/testops/"},"tags":[{"title":"qa","path":"/tag/qa/"}],"headings":[{"value":"Выборка всех данных из таблицы","anchor":"#выборка-всех-данных-из-таблицы"},{"value":"Выборка отдельных столбцов","anchor":"#выборка-отдельных-столбцов"},{"value":"AS - Выборка новых столбцов и присвоение им новых имен","anchor":"#as---выборка-новых-столбцов-и-присвоение-им-новых-имен"},{"value":"Выборка данных, вычисляемые столбцы, математические функции","anchor":"#выборка-данных-вычисляемые-столбцы-математические-функции"},{"value":"Выборка данных, вычисляемые столбцы, логические функции","anchor":"#выборка-данных-вычисляемые-столбцы-логические-функции"},{"value":"Выборка данных по условию","anchor":"#выборка-данных-по-условию"},{"value":"Выборка данных, логические операции","anchor":"#выборка-данных-логические-операции"},{"value":"Операторы BETWEEN, IN - выборка данных","anchor":"#операторы-between-in---выборка-данных"},{"value":"Оператор ORDER BY - выборка данных с сортировкой","anchor":"#оператор-order-by---выборка-данных-с-сортировкой"},{"value":"Оператор LIKE - выборка данных","anchor":"#оператор-like---выборка-данных"},{"value":"Оператор DISTINCT - Выбор уникальных элементов столбца","anchor":"#оператор-distinct---выбор-уникальных-элементов-столбца"},{"value":"Оператор GROUP BY - Выбор уникальных элементов столбца","anchor":"#оператор-group-by---выбор-уникальных-элементов-столбца"},{"value":"Групповые функции SUM и COUNT - Выборка данных","anchor":"#групповые-функции-sum-и-count---выборка-данных"},{"value":"Групповые функции MIN, MAX и AVG","anchor":"#групповые-функции-min-max-и-avg"},{"value":"Выборка данных c вычислением, групповые функции","anchor":"#выборка-данных-c-вычислением-групповые-функции"},{"value":"Вычисления по таблице целиком","anchor":"#вычисления-по-таблице-целиком"},{"value":"Выборка данных по условию, групповые функции","anchor":"#выборка-данных-по-условию-групповые-функции"}]}},{"node":{"id":"5ba3e2265e1b5bfd3ea7cdfeae9d571f","title":"Объединение таблиц(вложенные запросы, джойны","content":"\nВложенный запрос используется для выборки данных, которые будут использоваться в условии отбора записей основного запроса. Его применяют для:\n\nсравнения выражения с результатом вложенного запроса;\nопределения того, включено ли выражение в результаты вложенного запроса;\nпроверки того, выбирает ли запрос определенные строки.\nВложенный запрос имеет следующие компоненты:\n\nключевое слово SELECT  после которого указываются имена столбцов или выражения (чаще всего список содержит один элемент) ;\nключевое слово FROM и имя таблицы, из которой выбираются данные;\nнеобязательное предложение WHERE;\nнеобязательное предложение GROUP BY:\nнеобязательное предложение HAVING.\n Вложенные запросы  могут включаться в WHERE или HAVING так (в квадратных скобках указаны необязательные элементы, через | – один из элементов):\n\nWHERE | HAVING выражение оператор_сравнения (вложенный запрос);\nWHERE | HAVING выражение, включающее вложенный запрос;\nWHERE | HAVING выражение [NOT] IN (вложенный запрос);\nWHERE | HAVING выражение  оператор_сравнения  ANY | ALL (вложенный запрос).\nТакже вложенные запросы могут вставляться в основной запрос после ключевого слова SELECT\n\nВложенный запрос, возвращающий одно значение, может использоваться в условии отбора записей WHERE как обычное значение совместно с операциями =, <>, >=, <=, >, <.\n\n```sql\nSELECT title, author, price, amount\nFROM book\nWHERE price = (\n         SELECT MIN(price) \n         FROM book\n      );\n```\nВложенный запрос, возвращающий одно значение, может использоваться в выражениях как обычный операнд, например, к нему можно что-то прибавить, вычесть и пр.\n\n```sql\nSELECT title, author, amount \nFROM book\nWHERE ABS(amount - (SELECT AVG(amount) FROM book)) >3;\n```\n\nВложенный запрос может возвращать несколько значений одного столбца.  Тогда его можно использовать в разделе WHERE совместно с оператором IN.\n\n```WHERE имя_столбца IN (вложенный запрос, возвращающий один столбец)```\n\nОператор IN определяет, совпадает ли значение столбца с одним из значений, содержащихся во вложенном запросе. При этом логическое выражение после WHERE получает значение истина. Оператор NOT IN выполняет обратное действие – выражение истинно, если значение столбца не содержится во вложенном запросе.\n\n```sql\nSELECT title, author, amount, price\nFROM book\nWHERE author IN (\n        SELECT author \n        FROM book \n        GROUP BY author \n        HAVING SUM(amount) >= 12\n      );\n```\n```sql\nSELECT author, title, amount\nFROM book\nWHERE author IN (\n        SELECT amount \n        FROM book \n        GROUP BY amount \n        HAVING COUNT(amount) = 1\n);\n```\n\n## Вложенный запрос, операторы ANY и ALL\nВложенный запрос, возвращающий несколько значений одного столбца, можно использовать для отбора записей с помощью операторов ANY и ALL совместно с операциями отношения (=, <>, <=, >=, <, >).\n\nОператоры ANY и ALL используются  в SQL для сравнения некоторого значения с результирующим набором вложенного запроса, состоящим из одного столбца. При этом тип данных столбца, возвращаемого вложенным запросом, должен совпадать с типом данных столбца (или выражения), с которым происходит сравнение.\n\nПри использовании оператора ANY в результирующую таблицу будут включены все записи, для которых  выражение со знаком отношения верно хотя бы для одного элемента результирующего запроса. Как работает оператор ANY:\n\namount > ANY (10, 12) эквивалентно amount > 10\n\namount < ANY (10, 12) эквивалентно amount < 12\n\namount = ANY (10, 12) эквивалентно (amount = 10) OR (amount = 12), а также amount IN  (10,12)\n\namount <> ANY (10, 12) вернет все записи с любым значением amount, включая 10 и 12\n\nПри использовании оператора ALL в результирующую таблицу будут включены все записи, для которых  выражение со знаком отношения верно для всех элементов результирующего запроса. Как работает оператор ALL:\n\namount > ALL (10, 12) эквивалентно amount > 12\n\namount < ALL (10, 12) эквивалентно amount < 10\n\namount = ALL (10, 12) не вернет ни одной записи, так как эквивалентно (amount = 10) AND (amount = 12)\namount <> ALL (10, 12) вернет все записи кроме тех,  в которыхamount равно 10 или 12\n\nВажно! Операторы ALL и ANY можно использовать только с вложенными запросами. В примерах выше (10, 12) приводится как результат вложенного запроса просто для того, чтобы показать как эти операторы работают. В запросах так записывать нельзя.\n\nВывести информацию о тех книгах, количество которых меньше самого маленького среднего количества книг каждого автора.\n\n```sql\nSELECT title, author, amount, price\nFROM book\nWHERE amount < ALL (\n        SELECT AVG(amount) \n        FROM book \n        GROUP BY author \n      );\n```\n\nВывести информацию о тех книгах, количество которых меньше самого большого среднего количества книг каждого автора.\n\n```sql\nSELECT title, author, amount, price\nFROM book\nWHERE amount < ANY (\n        SELECT AVG(amount) \n        FROM book \n        GROUP BY author \n      );\n```\n\n## Вложенный запрос после SELECT\nВложенный запрос может располагаться после ключевого слова SELECT. В этом случае результат выполнения запроса выводится в отдельном столбце результирующей таблицы. При этом результатом запроса может быть только одно значение, тогда оно будет повторяться во всех строках. Также вложенный запрос может использоваться в выражениях.\n\nПример\n\nВывести информацию о книгах, количество экземпляров которых отличается от среднего количества экземпляров книг на складе более чем на 3,  а также указать среднее значение количества экземпляров книг.\n\nЗапрос:\n```sql\nSELECT title, author, amount, \n    (\n     SELECT AVG(amount) \n     FROM book\n    ) AS Среднее_количество \nFROM book\nWHERE abs(amount - (SELECT AVG(amount) FROM book)) >3;\n```\n\n```\n+-----------------------+------------------+--------+--------------------+\n| title                 | author           | amount | Среднее_количество |\n+-----------------------+------------------+--------+--------------------+\n| Мастер и Маргарита    | Булгаков М.А.    | 3      | 7.6667             |\n| Братья Карамазовы     | Достоевский Ф.М. | 3      | 7.6667             |\n| Стихотворения и поэмы | Есенин С.А.      | 15     | 7.6667             |\n+-----------------------+------------------+--------+--------------------+\n```\n\n","date":"2022-07-07T00:00:00.000Z","path":"/obedinenie-tablicz-vlozhennye-zaprosy-dzhojny/","icon":"fas fa-bug","image":"null","order":2,"category":{"title":"testops","path":"/category/testops/"},"tags":[{"title":"qa","path":"/tag/qa/"}],"headings":[{"value":"Вложенный запрос, операторы ANY и ALL","anchor":"#вложенный-запрос-операторы-any-и-all"},{"value":"Вложенный запрос после SELECT","anchor":"#вложенный-запрос-после-select"}]}},{"node":{"id":"f68ca0b6fce182086906272bf7a885a6","title":"Теоретическая база по тестированию. Список вопросов","content":"\n## Тестирование, Quality control, Quality assurance\n\n### 1. Что такое тестирование программного обеспечения?\nВ соответствии со стандартом ANSI/IEEE 1059 — процесс анализа элемента программного обеспечения для обнаружения различий между существующими и необходимыми условиями (т. Е. Дефектов) и оценки функций элемента программного обеспечения. Щелкните здесь для получения более подробной информации.\n\n### 2. В чем разница между SDET, инженером-тестировщиком и разработчиком\n**SDET против инженера-тестировщика против разработчика**\n\n| Инженер-испытатель |\tSDET |\tРазработчик |\n| ------------------ | ----- | ------------ |\n| Инженер по тестированию думает только о том, прошел или не прошел тестовый пример, и о том, как сломать программное обеспечение |SDET знает функциональные цели системы, а также цели качества|Разработчик думает, как разработать систему и заставить функциональность работать|\n| Инженер-тестировщик работает только для жизненного цикла теста, такого как проектирование тестовых примеров и выполнение|SDET участвует в проектировании, разработке и тестировании|Разработчик ограничен частью кодирования и выпуском для группы тестирования |\n| Знания в области программирования не требуются |\tДинамические наборы навыков, такие как знание качества и тестирования, а также хорошее знание кода|\tТребуются только знания кодирования|\n|Инженеры-испытатели знают, где присутствует повторяющаяся работа или простой ввод данных, но не ожидают, что они минимизируют повторяющиеся задачи\t|SDET понимает потребности автоматизации, они могут кодировать и предоставлять решение для команды, где повторяющаяся работа убивает время. Они могут разработать структуру, которая может помочь команде тестирования сократить повторяющийся цикл тестирования или простую задачу ввода данных.\t|Разработчики не занимаются такими задачами|\n| Ожидается, что инженеры-испытатели не дойдут до уровня кода и настроят производительность\t| Хорошо осведомленные о настройке производительности и угрозах безопасности, они могут предлагать и обращаться к коду и предлагать, где приложение работает с низкой производительностью, плюс они могут оптимизировать код|\tОжидается, что разработчики будут кодировать только те функции, которые ожидаются от клиента|\n\n### 3. Что такое гарантия качества и контроль качества?\n_Обеспечение качества:_ Обеспечение качества включает в себя деятельность, ориентированную на процесс. Это обеспечивает предотвращение дефектов в процессе создания Программных приложений. Таким образом, дефекты не возникают при разработке программного приложения.\n\n_Контроль качества:_ Контроль качества включает в себя деятельность, ориентированную на продукт. Он запускает программу или код для выявления дефектов в программном приложении.\n\n## Понятие качества, международные стандарты качества ???\n\n## Жизненный цикл дефекта\n\n### 1. Как определяешь, что это баг? Вообще, когда считается, что это баг? Правда ли, что некоторые баги на порядок важнее остальных? Как репортишь баги?\n\n###  2. Что такое проверка при тестировании программного обеспечения?\nВерификация — это процесс, чтобы убедиться, правильно ли мы создаем продукт, то есть проверить требования, которые у нас есть, и проверить, разрабатываем ли мы продукт соответствующим образом или нет. Здесь задействованы следующие виды деятельности: инспекции, обзоры, обходы. Щелкните здесь, чтобы узнать подробнее.\n\n###  3. Что такое валидация при тестировании программного обеспечения?\nВалидация — это процесс, независимо от того, создаем ли мы правильный продукт, т.е. для проверки правильности разработанного нами продукта. Мероприятия, связанные с этим, — это тестирование программного приложения. Нажмите здесь, чтобы узнать больше.\n\n### 4. Что такое проверка?\nИнспекция — это формальная встреча, проводимая обученным модератором, но никак не автором. Проверяемый документ готовится и тщательно проверяется рецензентами перед встречей. На контрольном совещании обнаруженные дефекты регистрируются и передаются автору для принятия соответствующих мер. После проверки используется официальный процесс последующих действий для обеспечения своевременных и корректирующих действий.\n\n### 5. Кто все участвует в инспекционной встрече?\nАвтор, Модератор, Рецензент (и), Писец/Регистратор и Менеджер.\n\n### 6. Что такое дефект?\nРазница между фактическими и ожидаемыми результатами называется дефектом. Если разработчик обнаруживает проблему и исправляет ее самостоятельно на этапе разработки, это называется дефектом. Щелкните здесь, чтобы узнать подробнее.\n\n### 7. Что такое ошибка?\nЕсли тестировщики обнаруживают несоответствие в приложении/системе на этапе тестирования, они называют это ошибкой. \nМы не можем скомпилировать или запустить программу из-за ошибки кода в программе. Если разработчик не может успешно скомпилировать или запустить программу, он называет это ошибкой. Щелкните здесь для получения более подробной информации.\n\n### 8. Что такое неудача?\nПосле того, как продукт развернут и клиенты обнаруживают какие-либо проблемы, они называют продукт неисправным. После выпуска, если конечный пользователь обнаруживает проблему, эта конкретная проблема называется ошибкой. Щелкните здесь, чтобы узнать подробнее.\n\n### 9. Что такое серьезность ошибки?\nСерьезность ошибки/дефекта можно определить как влияние ошибки на бизнес клиента. Это может быть критическое, серьезное или незначительное. Проще говоря, насколько сильно повлияет на систему тот или иной дефект. Щелкните здесь, чтобы узнать подробнее.\n\n### 10. Что такое приоритет ошибок?\nПриоритет дефекта можно определить по тому, как скоро дефект должен быть исправлен. Он дает порядок, в котором дефект должен быть устранен. Разработчики решают, какой дефект им следует устранить дальше, в зависимости от приоритета. Он может быть высоким, средним или низким. В большинстве случаев статус приоритета устанавливается в зависимости от требований клиента. Щелкните здесь, чтобы узнать подробнее.\n\n### 11. Приведите несколько примеров серьезности ошибки и приоритета ошибки?\nВысокий приоритет &amp; Высокая степень серьезности: Кнопка «Отправить» не работает на странице входа, и клиенты не могут войти в приложение\n\nНизкий приоритет &amp; Высокая степень серьезности: сбой в работе некоторых функций, которые будут реализованы после нескольких выпусков\n\nHigh Priority &amp; Низкая степень серьезности: орфографическая ошибка в названии компании на главной странице\n\nНизкий приоритет &amp; Низкая серьезность: страница часто задаваемых вопросов загружается\n\n### 12. Что такое критическая ошибка?\nКритическая ошибка — это ошибка, которая означает, что большая часть функциональности или основной компонент системы полностью нарушена, и нет никакого обходного пути для дальнейшего продвижения.\n\nНапример, из-за ошибки в одном модуле мы не можем протестировать другие модули, потому что ошибка блокировщика заблокировала другие модули. Ошибки, влияющие на бизнес клиентов, считаются критическими.\n\nПример:\n1. Кнопка «Войти» не работает в приложении Gmail, и пользователям Gmail заблокирован вход в свои учетные записи.\n2. Сообщение об ошибке появляется, когда клиент нажимает кнопку перевода денег на веб-сайте банка.\n\n### 13. Что такое жизненный цикл ошибки?\nЖизненный цикл ошибки также известен как жизненный цикл дефекта . В процессе разработки программного обеспечения ошибка имеет жизненный цикл. Ошибка должна пройти жизненный цикл, чтобы быть закрытой. Жизненный цикл ошибки варьируется в зависимости от используемых инструментов (QC, JIRA и т. Д.) И процесса, выполняемого в организации. Щелкните здесь, чтобы узнать подробнее.\n\n### 14. Каковы различные стадии жизненного цикла дефекта?\n\nРазличные этапы жизненного цикла ошибки:\n- Новая\n- Назначенная\n- Открытая\n- Тестовая\n- Перемещено в QA/Готово к тестированию\n\n- Подтверждено\n- Исправлено\n- Закрыто\n- Повторно протестировано\n- Открыть повторно\n- Дубликат\n- Отложено\n- Отклонено\n- Не может быть исправлено\n- Невоспроизводимо\n- Требуется дополнительная информация\n\n### 15. Что такое утечка ошибок?\nОшибка, которая фактически упущена командой тестирования во время тестирования, и сборка была выпущена в производство. Если теперь эта ошибка (которая была пропущена группой тестирования) была обнаружена конечным пользователем или заказчиком, мы называем это утечкой ошибки.\n\n### 16. Что такое выпуск ошибок?\nВыпуск программного обеспечения в производственную среду с известными ошибками, мы называем это выпуском ошибок. Эти известные ошибки следует включить в примечание к выпуску.\n\n### 17. Что такое возраст дефекта?\nВозраст дефекта можно определить как временной интервал между датой обнаружения дефекта и датой закрытия дефекта.\n\nВозраст дефекта = Дата закрытия дефекта — Дата обнаружения дефекта\n\nПредположим, тестировщик обнаружил ошибку и сообщил о ней 1 января 2016 г., а 5 января 2016 г. она была успешно исправлена. Таким образом, возраст дефекта составляет 5 дней.\n\n### 18. Что такое ошибка при заполнении?\nЗаполнение ошибок — это процесс добавления известных ошибок в программу, предназначенного для определения скорости обнаружения ошибок. Это помогает в процессе оценки навыков тестировщика в поиске ошибок, а также в оценке возможностей приложения (насколько хорошо приложение работает при наличии ошибок).\n\n### 19. Что такое угадывание ошибок?\nУгадывание ошибок также является методом разработки тестовых примеров, аналогичным поиску ошибок. При угадывании ошибок тестировщики проектируют тестовые примеры, угадывая возможные ошибки, которые могут возникнуть в программном приложении. Намерение состоит в том, чтобы немедленно обнаруживать ошибки.\n\n### 20. Что такое дефект Showstopper?\nДефект showstopper — это дефект, который не позволяет пользователю двигаться дальше в приложении. Это почти похоже на сбой.\n\nПредположим, что кнопка входа не работает. Несмотря на то, что у вас есть действующее имя пользователя и действующий пароль, вы не можете двигаться дальше, потому что кнопка входа в систему не работает.\n\n## Жизненный цикл разработки ПО, SDLC (Software Development LifeCycle)\n\n### 1. Что такое SDLC?\nЖизненный цикл разработки программного обеспечения (SDLC) направлен на создание высококачественной системы, которая соответствует ожиданиям клиентов или превосходит их, эффективно и действенно работает в текущей и планируемой инфраструктуре информационных технологий, недорого в обслуживании и рентабельна для улучшения.\n\n### 2. Какие существуют различные доступные модели SDLC?\n- Waterfall\n- Spiral\n- V Model\n- Прототип\n- Agile\n\n### 3. Можете ли вы провести тестирование системы на любом этапе SDLC?\nМы можем проводить тестирование системы только тогда, когда все блоки находятся на своих местах и ​​работают должным образом. Это можно сделать только до пользовательского приемочного тестирования (UAT).\n\n## Модели разработки ПО\n\n### 1. По каким общепринятым сейчас процессам работала твоя бывшая команда? Мог ли бы ты описать своими словами, как можно было улучшить эти процессы?\n\n## Методологии разработки ПО: Scrum, Kanban, RUP, DSDM, RAD, XP\n\n## Жизненный цикл тестирования приложений, STLC (Software Testing LifeCycle)\n\n### 1. Перечислить результаты тестирования?\nСтратегия тестирования\nПлан тестирования\nОтчет об оценке усилий\nСценарии тестирования\nТестовые наборы/скрипты\nТестовые данные\nМатрица отслеживания требований (RTM)\nОтчет о дефектах/отчет об ошибке\nОтчет о выполнении теста\nГрафики и показатели\nСводный отчет теста\nОтчет об инциденте тестирования\n< li> Отчет о завершении тестирования\n\nПримечание к выпуску\nРуководство по установке/настройке\nРуководство пользователя\nОтчет о состоянии теста\nЕженедельный отчет о состоянии (от менеджера проекта к клиенту)\n\n### 2. Каковы задачи действий по завершению тестирования в тестировании программного обеспечения?\nДействия по завершению тестирования делятся на четыре основные группы.\n\nПроверка завершения теста: чтобы убедиться, что все тесты должны быть либо запущены, либо намеренно пропущены, а все известные дефекты должны быть либо исправлены, отложены для будущих выпусков, либо приняты как постоянное ограничение.\n\nПередача тестовых артефактов: тесты и тестирование среды должны быть переданы лицам, ответственным за техническое обслуживание. Известные дефекты, принятые или отложенные, должны быть задокументированы и доведены до сведения тех, кто будет использовать и поддерживать использование системы.\n\nИзвлеченные уроки: анализ извлеченных уроков для определения изменений, необходимых для будущих выпусков и проектов. На ретроспективных встречах устанавливаются планы, обеспечивающие хорошее\nметоды могут повторяться, а плохие практики не повторяться\n\nАрхивирование результатов, журналов, отчетов и других документов и рабочих продуктов в CMS (системе управления конфигурациями).\n\n### 3. Что такое закрытие теста?\nЗавершение тестирования — это примечание, подготовленное до того, как группа тестирования официально завершит процесс тестирования. Эта записка содержит общее количество тестовых случаев, всего кол-во выполненных тестовых случаев, всего кол-во обнаруженных дефектов, всего исправленных дефектов, всего ошибок не исправлено, всего нет отклоненных ошибок и т. д.\n\n### 4. Какова процедура ручного тестирования?\nРучное тестирование имеет решающее значение для более тщательного тестирования программных приложений. Процедура ручного тестирования состоит из следующего.\n1. Планирование и контроль\n2. Анализ и дизайн\n3. Реализация и исполнение\n4. Оценка и отчетность\n5. Действия по закрытию теста\n\n### 5. Что такое STLC (жизненный цикл тестирования программного обеспечения)?\nSTLC (жизненный цикл тестирования программного обеспечения) определяет, какие действия по тестированию следует выполнять и когда выполнять эти действия по тестированию. Несмотря на то, что тестирование в разных организациях различается, существует жизненный цикл тестирования. Щелкните здесь, чтобы узнать подробнее.\n\n### 6. Каковы этапы жизненного цикла тестирования программного обеспечения?\nНиже приведены этапы STLC.\n\n- Анализ требований\n- Планирование тестирования\n- Дизайн теста\n- Настройка тестовой среды\n- Выполнение теста\n- Завершение теста\n\n### 7. Когда прекратить тестирование? (Или) Как вы решаете, достаточно ли вы прошли тестирование?\nВ проектах реального времени существует множество факторов, которые определяют, когда следует прекратить тестирование.\n\n- Покрытие требований достигает определенной точки\n- Сроки тестирования или крайние сроки выпуска\n- Когда весь бюджет тестирования исчерпан.\n\n- Достигнув определенного процента успешных тестовых случаев.\n- Риск в проекте ниже допустимого предела.\n- Все исправлены ошибки с высоким приоритетом, блокировщики\n- При соблюдении критериев приемлемости\n- По окончании периода альфа- и бета-тестирования\n- Зависит от решения руководства\n\n### 8. Когда ты понимаешь, что настало время прекратить тестирование?\n\n### 9. Как анализируешь риски? Как это отображается на твоих тестах?\n\n### 10. Как ты оцениваешь, эффективен ли твой личный подход к тестированию? Как его меняешь, если видишь, что не очень эффективен?\n\n## Принципы тестирования, Agile принципы тестирования\n\n### 1. Каковы принципы тестирования программного обеспечения?\nТестирование показывает наличие дефектов.\nИсчерпывающее тестирование невозможно.\nРаннее тестирование\nКластеризация дефектов\nПарадокс пестицидов\nТестирование зависит от контекста\nОтсутствие ошибки в ошибке\nНажмите здесь подробнее.\n\n### 2. Что такое исчерпывающее тестирование?\nТестирование всех функций с использованием всех допустимых и недопустимых входных данных и предварительных условий известно как исчерпывающее тестирование.\n\n### 3. Что такое раннее тестирование?\nИсправление дефектов, обнаруженных на ранних этапах SDLC, обходится дешевле. Таким образом, проведение раннего тестирования снижает затраты на исправление дефектов.\n\n### 4. Что такое кластеризация дефектов?\nКластеризация дефектов при тестировании программного обеспечения означает, что небольшой модуль или функциональность содержит большинство ошибок или имеет наибольшее количество сбоев в работе.\n\n### 5. Что такое «парадокс пестицидов»?\nПарадокс пестицидов в тестировании программного обеспечения — это процесс повторения одних и тех же тестовых примеров снова и снова, в конце концов, одни и те же тестовые примеры больше не будут обнаруживать новые ошибки. Итак, чтобы преодолеть этот парадокс пестицидов, необходимо регулярно просматривать тестовые примеры и добавлять или обновлять их, чтобы найти больше дефектов.\n\n### 6. Что такое каскадирование дефектов при тестировании программного обеспечения?\nКаскадирование дефектов при тестировании программного обеспечения означает запуск других дефектов в приложении. Когда дефект не идентифицируется или остается незамеченным во время тестирования, он вызывает другие дефекты. Это приводит к множественным дефектам на более поздних этапах и приводит к увеличению количества дефектов в приложении.\n\nНапример, если есть дефект в системе бухгалтерского учета, связанный с отрицательным налогообложением, то отрицательный налоговый дефект влияет на бухгалтерскую книгу, которая, в свою очередь, влияет на другие отчеты, такие как баланс, прибыль и убытки; Убыток и т. Д.\n\n## Практики и подходы тестирования ???\n\n### 1. Что такое подход Big Bang?\nОбъединение всех модулей один раз и проверка функциональности после завершения тестирования отдельных модулей.\n\nСверху вниз и снизу вверх используются фиктивные модули, известные как заглушки и драйверы. Эти заглушки и драйверы используются для замены отсутствующих компонентов для имитации обмена данными между модулями.\n\n### 2. Что такое подход сверху вниз?\nТестирование происходит сверху вниз. Сначала тестируются модули высокого уровня, затем модули низкого уровня и, наконец, интеграция модулей низкого уровня на высокий уровень, чтобы гарантировать, что система работает должным образом. Заглушки используются как временный модуль, если модуль не готов к интеграционному тестированию.\n\n### 3. Что такое восходящий подход?\nЭто аналог подхода «сверху вниз». Тестирование происходит снизу вверх. Сначала тестируются модули самого низкого уровня, затем модули высокого уровня и, наконец, интеграция модулей высокого уровня на низкий уровень, чтобы гарантировать, что система работает должным образом. Драйверы используются как временный модуль для интеграционного тестирования.\n\n## Виды тестирования\n\n### 1. Что такое статическое тестирование?\n\nСтатическое тестирование включает в себя проверку документов для выявления дефектов на ранних этапах SDLC. При статическом тестировании мы проводим обзоры кода, пошаговые руководства, экспертные обзоры и статический анализ исходного кода с помощью таких инструментов, как StyleCop, ESLint и т. Д.\n\n### 2. Что такое функциональное тестирование?\nПроще говоря, на самом деле система выполняет функциональное тестирование. Чтобы убедиться, что каждая функция программного приложения ведет себя, как указано в документе с требованиями. Тестирование всех функций путем предоставления соответствующих входных данных, чтобы проверить, соответствует ли фактический выход ожидаемому или нет. Он подпадает под действие «черного ящика», и тестировщикам не нужно беспокоиться об исходном коде приложения.\n\n### 3. Что такое нефункциональное тестирование?\nПроще говоря, насколько хорошо работает система, — это нефункциональное тестирование. Нефункциональное тестирование относится к различным аспектам программного обеспечения, таким как производительность, нагрузка, стресс, масштабируемость, безопасность, совместимость и т. Д. Основное внимание уделяется улучшению взаимодействия с пользователем в зависимости от того, насколько быстро система реагирует на запрос.\n\n### 4. В чем разница между функциональным и нефункциональным тестированием?\n\n|Функциональное тестирование |\tНефункциональное тестирование |\n|----------------------------|--------------------------------|\n|На самом деле система выполняет функциональное тестирование|\tНасколько хорошо работает система, — это нефункциональное тестирование|\n|- Чтобы убедиться, что ваш продукт соответствует потребностям клиентов и бизнеса требований и не содержит серьезных ошибок\t<br>- Чтобы продукт соответствовал ожиданиям клиентов<br> - Чтобы проверить точность программного обеспечения в соответствии с ожидаемым результатом|\tЧтобы проверить поведение программного обеспечения при различных условиях загрузки|\n|Выполняется перед нефункциональным тестированием\t|Выполняется после функционального тестирования|\n\nПример функционального тестового примера — проверка функциональности входа\t\nПример нефункционального тестового примера — проверить, загружается ли домашняя страница менее чем за 2 секунды\n\nТипы тестирования:\n• Модульное тестирование\n• Дым тестирование\n• Принятие пользователями\n• Интеграционное тестирование\n• Регрессионное тестирование\n• Локализация\n• Глобализация\n• Совместимость\t\n\nТипы тестирования:\n• Тестирование производительности\n• Объемное тестирование\n• Масштабируемость\n• Тестирование удобства использования\n• Нагрузочное тестирование\n• Стресс-тестирование\n• Соответствие Тестирование\n• Тестирование переносимости\n• Тестирование аварийного восстановления\n\n### 5. Что такое приемочное тестирование?\nЭто также известно как предварительное тестирование. Это делается конечными пользователями вместе с тестировщиками для проверки функциональности приложения. После успешного приемочного тестирования. Официальное тестирование, проводимое для определения того, разработано ли приложение в соответствии с требованиями. Это позволяет клиенту принять или отклонить заявку. Типы приемочного тестирования: Alpha, Beta и amp; Гамма.\n\n### 6. На каком основании составляется приемочный план?\nПлан приемочных испытаний готовится с использованием следующих входных данных.\n\nДокумент с требованиями: В документе с требованиями указывается, что именно необходимо, а что не нужно в существующем проекте с точки зрения заказчика. .\nИнформация от клиента: Информация от клиента будет в формате официальных электронных писем, неформальных переговоров, обсуждений и т. д.\nПлан проекта: документ с планом проекта, подготовленный менеджером проекта.\nВсе три вышеупомянутых ввода служат хорошими исходными данными для подготовки плана приемочных испытаний.\n\n### 7. Что такое альфа-тестирование?\nАльфа-тестирование проводится штатными разработчиками (которые разработали программное обеспечение) и тестировщиками, прежде чем мы отправим программное обеспечение клиентам. Иногда альфа-тестирование выполняется заказчиком или аутсорсинговой командой в присутствии разработчиков или тестировщиков. Это часть пользовательского приемочного тестирования. Это делается для поиска ошибок до того, как клиенты начнут использовать программное обеспечение.\n\n### 8. Что такое бета-тестирование?\nБета-тестирование проводится ограниченным числом конечных пользователей перед доставкой. Это делается после альфа-тестирования. Обычно это делается на месте клиента. Узнайте больше о бета-тестировании здесь.\n\n### 9. Что такое гамма-тестирование?\nГамма-тестирование выполняется, когда программное обеспечение готово к выпуску с указанными требованиями. Делается на месте у клиента. Это делается напрямую, пропуская все действия по внутреннему тестированию.\n\n### 10. Что такое Smoke Testing?\nSmoke Testing проводится для того, чтобы убедиться, что сборка, полученная нами от команды разработчиков, тестируется или нет. Это также называется проверкой «День 0». Это делается на «уровне сборки». Это помогает не тратить время тестирования на простое тестирование всего приложения, когда ключевые функции не работают или ключевые ошибки еще не исправлены.\n\n### 11. Что такое проверка на вменяемость?\nТестирование работоспособности выполняется на этапе выпуска, чтобы проверить основные функции приложения, не углубляясь в него. Его также называют подмножеством регрессионного тестирования. Это делается на «уровне выпуска». Иногда из-за ограничений по времени выпуска невозможно провести тщательное регрессионное тестирование сборки, тестирование работоспособности выполняет эту часть, проверяя основные функции.\n\n### 12. В чем разница между проверкой на вменяемость и проверкой на дым? Sanity test vs Smoke test\nSmoke Testing проверяет все приложение от начала до конца\n\n|Smoke Test|\tSanity Testing |\n|---|---|\n|Smoke Test проводится, чтобы убедиться, что сборка, которую мы получили от команды разработчиков, тестируется или нет\t|Sanity Test выполняется на этапе выпуска для проверки основных функций приложение без углубления|\n|Дымовое тестирование выполняется как разработчиками, так и тестировщиками|\tТестирование на работоспособность выполняется только тестировщиками\nSanity Testing проверяет только определенный компонент всего приложения|\n|Дымовое тестирование, сборка может быть стабильной или нестабильной|\tПроверка работоспособности, сборка относительно стабильна|\n|Это выполняется на начальных сборках.|\tЭто делается в стабильных сборках.|\n|Это часть базового тестирования .\t|Это часть регрессионного тестирования.|\n|Обычно это делается каждый раз при выпуске новой сборки.\t|Это планируется, когда нет времени на углубленное тестирование.|\n\n### 13. Что такое повторное тестирование?\nЧтобы гарантировать, что дефекты, которые были обнаружены и опубликованы в предыдущей сборке, были исправлены или нет в текущей сборке. Скажем, вышла сборка 1.0. Команда тестирования обнаружила некоторые дефекты (идентификатор дефекта 1.0.1, 1.0.2) и разместила их. Была выпущена сборка 1.1, в настоящее время проводится повторное тестирование дефектов 1.0.1 и 1.0.2 в этой сборке.\n\n### 14. Что такое регрессионное тестирование?\nПовторное тестирование уже протестированной программы после модификации для обнаружения любых дефектов, появившихся или обнаруженных в результате изменений в тестируемом программном обеспечении или в другом связанном или несвязанные программные компоненты.\n\nОбычно мы проводим регрессионное тестирование в следующих случаях:\n\n- В приложение добавляются новые функции.\n- Изменение требований (в организациях мы называем это CR)\n- Исправление дефектов\n- Исправление проблем с производительностью\n- Изменение среды (например, обновление БД из MySQL в Oracle)\n\n### 15. Что вы подразумеваете под регрессионным и подтверждающим тестированием?\nРегрессионное тестирование: Команда тестирования повторно выполняет тесты для измененного приложения, чтобы убедиться, что измененный код нарушает что-либо, что работало ранее.\n\nПодтверждающее тестирование: обычно тестеры сообщают об ошибке при тестировании терпит неудачу. Команда разработчиков выпускает новую версию программного обеспечения после исправления дефекта. Теперь группа тестирования проведет повторное тестирование, чтобы убедиться, что обнаруженная ошибка действительно исправлена.\n\n### 16. Что такое тестирование графического интерфейса пользователя?\nТестирование графического интерфейса пользователя предназначено для тестирования интерфейса между приложением и конечным пользователем.\n\n### 17. Что такое тестирование восстановления?\nТестирование восстановления выполняется для того, чтобы определить, насколько быстро система может восстановиться после сбоя системы или отказа оборудования. Это относится к типу нефункционального тестирования.\n\n### 18. Что такое тестирование глобализации?\nГлобализация — это процесс разработки программного приложения, которое может быть адаптировано к различным языкам и регионам без каких-либо изменений.\n\n### 19. Что такое интернационализационное тестирование (тестирование I18N)?\nОбратитесь к тестированию глобализации.\n\n### 20. Что такое тестирование локализации (тестирование L10N)?\nЛокализация — это процесс адаптации программного обеспечения глобализации для определенного региона или языка путем добавления локальных компонентов.\n\n### 21. Что такое тестирование установки?\nОно предназначено для проверки того, успешно ли установлено приложение и работает ли оно должным образом после установки.\n\n### 22. Что такое формальное тестирование?\nЭто процесс, при котором тестировщики тестируют приложение, имея заранее спланированные процедуры и надлежащую документацию.\n\n### 23. Что такое тестирование на основе рисков?\nОпределите модули или функции, которые с наибольшей вероятностью вызывают сбои, и затем протестируйте эти функции.\n\n### 24. Что такое тестирование совместимости?\nОно предназначено для развертывания и проверки того, работает ли приложение должным образом в другой комбинации компонентов среды.\n\n### 25. Что такое исследовательское тестирование?\nОбычно этот процесс выполняется экспертами в предметной области. Они проводят тестирование, просто исследуя функциональные возможности приложения, не зная требований. Ознакомьтесь с нашим подробным руководством по исследовательскому тестированию, а также не пропустите эти популярные инструменты исследовательского тестирования.\n\n### 26. Что такое тестирование на обезьянах?\nУмышленно выполнить ненормальное действие с приложением, чтобы проверить его стабильность. Ознакомьтесь с нашим подробным руководством по тестированию на обезьянах.\n\n### 27. Что такое юзабилити-тестирование?\nЧтобы проверить, является ли приложение удобным для пользователя или нет и удобно ли им пользовался конечный пользователь. Основное внимание в этом тестировании уделяется проверке того, может ли конечный пользователь легко понять приложение и работать с ним. Приложение должно быть самоисследовательным и не должно требовать обучения для работы с ним. Изучите это руководство, чтобы узнать, как проводить тестирование удобства использования.\n\n### 28. Что такое тестирование безопасности?\nТестирование безопасности — это процесс, позволяющий определить, защищает ли система данные и поддерживает ли она функциональность, как задумано.\n\n### 29. Что такое испытание на впитывание?\nЗапуск системы при высокой нагрузке в течение длительного периода времени для выявления проблем с производительностью называется испытанием на выдержку.\n\n### 30. Что такое испытания на выносливость?\nТестирование на выносливость — это нефункциональный вид тестирования. Он также известен как испытание на впитывание. Обратитесь к тестированию на замачивание.\n\n### 31. Что такое тестирование производительности?\nЭтот тип тестирования определяет или проверяет характеристики скорости, масштабируемости и/или стабильности тестируемой системы или приложения. Производительность связана с достижением времени отклика, пропускной способности и уровней использования ресурсов, которые соответствуют целям производительности для проекта или продукта.\n\n### 32. Что такое нагрузочное тестирование?\nОно предназначено для проверки того, что система/приложение может обрабатывать ожидаемое количество транзакций, и для проверки поведения системы/приложения как при нормальной, так и при пиковой нагрузке.\n\n### 33. Что такое объемное тестирование?\nОно предназначено для проверки того, что система/приложение может обрабатывать большой объем данных\n\n### 34. Что такое стресс-тестирование?\nОн предназначен для проверки поведения системы, когда нагрузка превышает расчетную.\n\n### 35. Что такое тестирование масштабируемости?\nТестирование масштабируемости — это тип нефункционального тестирования. Он должен определить, как тестируемое приложение масштабируется с увеличением рабочей нагрузки.\n\n### 36. Что такое тестирование параллелизма?\nТестирование параллелизма означает одновременный доступ к приложению нескольких пользователей для обеспечения стабильности системы. В основном это используется для выявления проблем с взаимоблокировкой.\n\n### 37. Что такое Fuzz-тестирование?\nFuzz-тестирование используется для выявления ошибок кодирования и лазеек безопасности в приложении. Путем ввода огромного количества случайных данных в систему в попытке вызвать сбой, чтобы определить, не работает ли что-нибудь в приложении.\n\n### 38. Что такое специальное тестирование?\nСпециальное тестирование совершенно противоположно формальному тестированию. Это неформальный вид тестирования. При специальном тестировании тестировщики тестируют приложение случайным образом, не следуя каким-либо документам и методам разработки тестов. Это тестирование в первую очередь выполняется, если уровень знаний тестировщиков в тестируемом приложении очень высок. Тестировщики произвольно тестируют приложение без каких-либо тестовых примеров или каких-либо документов бизнес-требований.\n\n### 39. Что такое тестирование интерфейса?\nТестирование интерфейса проводится для оценки того, передают ли данные два предполагаемых модуля и правильно ли взаимодействуют друг с другом.\n\n### 40. Что такое тестирование надежности?\nВыполнять тестирование приложения непрерывно в течение длительного периода времени, чтобы проверить его стабильность\n\n### 41. Что такое периодическое тестирование?\nБакет-тестирование — это метод сравнения двух версий приложения друг с другом, чтобы определить, какая из них работает лучше.\n\n### 42. Что такое A/B-тестирование?\nОбратитесь к Bucket Testing.\n\n### 43. Что такое сплит-тестирование?\nРекомендуемое сегментное тестирование.\n\n### 44. Что такое тестирование API?\nТестирование API — это тип тестирования программного обеспечения, который включает в себя тестирование API напрямую, а также как часть интеграционного тестирования, чтобы проверить, соответствует ли API ожиданиям с точки зрения функциональности, надежности, производительности и безопасности приложения. В тестировании API основное внимание будет уделяться уровню бизнес-логики в архитектуре программного обеспечения. Тестирование API может выполняться в любой программной системе, содержащей несколько API. Тестирование API не будет концентрироваться на внешнем виде приложения. Тестирование API полностью отличается от тестирования GUI.\n\n### 45. Что такое случайное тестирование?\nСлучайное тестирование — это разновидность метода тестирования программного обеспечения с использованием черного ящика, при котором приложение тестирует, генерируя случайные данные.\n\n## Уровни тестирования\n\n### 1. Каковы уровни тестирования?\nВ тестировании программного обеспечения существует четыре уровня тестирования.\n\n- Модульное тестирование или тестирование на уровне компонентов\n- Интеграционное тестирование\n- Тестирование системы\n- Приемочные испытания\n\n### 2. Что такое модульное тестирование?\nМодульное тестирование также называется модульным тестированием или тестированием компонентов. Это делается для проверки правильности работы отдельного модуля или модуля исходного кода. Это делают разработчики в среде разработчика. Подробнее о модульном тестировании.\n\n### 3. Что такое интеграционное тестирование?\nИнтеграционное тестирование — это процесс тестирования интерфейса между двумя программными модулями. Интеграционное тестирование проводится тремя способами. Подход Большого Взрыва, подход сверху вниз, подход снизу вверх. Подробнее об интеграционном тестировании.\n\n### 4. Что такое системное тестирование?\nТестирование полностью интегрированного приложения для оценки соответствия системы указанным требованиям называется тестированием системы или сквозным тестированием. Проверка завершенной системы, чтобы убедиться, что приложение работает должным образом или нет.\n\n### 5. В чем разница между тестированием интеграции и тестированием системы?\nТестирование интеграции и тестирование системы\n\nТЕСТИРОВАНИЕ ИНТЕГРАЦИИ\tТЕСТИРОВАНИЕ СИСТЕМЫ\nЭто тестирование низкого уровня\tЭто тестирование высокого уровня\nЗа ним следует тестирование системы\tЗа ним следует приемочное тестирование\nВыполняется после модульного тестирования\tВыполняется после интеграции тестирование\nРазличные типы интеграционного тестирования:\n• Интеграционное тестирование сверху-снизу\n• Тестирование интеграции снизу вверх\n• Тестирование интеграции большого взрыва\n• Тестирование интеграции сэндвич\tРазличные типы тестирования системы:\n• Регрессионное тестирование\n• Тестирование работоспособности\n• Тестирование удобства использования\n• Повторное тестирование\n• Нагрузочное тестирование\n• Тестирование производительности\n• Техническое тестирование\n\nТестировщики выполняют функциональное тестирование для проверки взаимодействия двух модулей\tТестеры выполняют как функциональные, так и не- функциональное тестирование для оценки функциональности, удобства использования, тестирования производительности и т. д.\nВыполняется для проверки того, взаимодействуют ли два разных модуля эффективно друг с другом или нет\tВыполняется для проверки того, работает ли продукт в соответствии с ожиданиями пользователя и требуемыми спецификациями\nЭто может быть выполнено как тестировщиками, так и разработчиками\tВыполняется тестировщики\nТестирование происходит на интерфейсе двух отдельных модулей\tТестирование проводится для всего программного приложения\n\n### 6. Что такое сквозное тестирование?\nПроще говоря, сквозное тестирование — это процесс тестирования программного обеспечения от начала до конца. Ознакомьтесь с этим руководством по сквозному тестированию для получения дополнительной информации. Также см. Руководство по тестированию системы.\n\n## Техники тест-дизайна\n\n### 1. Что такое анализ граничных значений?\nАнализ граничных значений (BVA) основан на проверке граничных значений допустимых и недопустимых разделов. Поведение на краю каждого эквивалентного раздела с большей вероятностью будет неправильным, чем поведение внутри раздела, поэтому границы — это область, в которой тестирование может привести к дефектам. Каждый раздел имеет свои максимальные и минимальные значения, и эти максимальные и минимальные значения являются граничными значениями раздела. Граничное значение для допустимого раздела является допустимым граничным значением. Точно так же граничное значение для недопустимого раздела является недопустимым граничным значением. Щелкните здесь, чтобы узнать подробнее.\n\n### 2. Что такое разделение классов эквивалентности?\nРазделение эквивалентности также известно как разделение классов эквивалентности. При эквивалентном разбиении входные данные для программного обеспечения или системы делятся на группы, которые, как ожидается, будут демонстрировать аналогичное поведение, поэтому они, вероятно, будут предлагаться одинаково. Следовательно, выбор одного входа из каждой группы для разработки тестовых случаев. Щелкните здесь, чтобы узнать подробнее.\n\n### 3. Что такое тестирование таблицы решений?\nТаблица решений — это таблица причинно-следственных связей. Этот метод тестирования подходит для функций, которые имеют логические отношения между входами (логика if-else). В технике таблицы решений мы имеем дело с комбинациями входных данных. Чтобы идентифицировать тестовые случаи с таблицей решений, мы рассматриваем условия и действия. Мы принимаем условия как входы, а действия как выходы. Щелкните здесь, чтобы узнать подробнее.\n\n### 4. Что такое переход состояния?\nИспользуя тестирование перехода между состояниями, мы выбираем тестовые примеры из приложения, в котором нам нужно протестировать различные переходы системы. Мы можем применить это, когда приложение дает разные выходные данные для одного и того же входа, в зависимости от того, что произошло в более раннем состоянии. Щелкните здесь, чтобы узнать подробнее.\n\n121. Что такое критерии входа?\nПредварительные условия, которые должны быть выполнены перед началом процесса тестирования. Щелкните здесь, чтобы узнать подробнее.\n\n### 5. Что такое критерии выхода?\nУсловия, которые должны быть выполнены перед тестированием, должны быть завершены. Щелкните здесь, чтобы узнать подробнее.\n\n### 6. Что такое RTM?\nМатрица прослеживаемости требований (RTM) используется для отслеживания требований к тестам, которые необходимы для проверки выполнения требований. Мы должны убедиться, что для каждого требования есть хотя бы 1 тестовый пример. Матрица прослеживаемости требований AKA Матрица прослеживаемости или матрица перекрестных ссылок. Щелкните здесь, чтобы узнать подробнее.\n\n## Тестовая документация\n\n### 1. Каковы лучшие практики написания тестовых примеров?\nНапишите тестовые примеры с точки зрения конечных пользователей.\nНапишите шаги теста в простой форме, чтобы каждый мог следовать их легко\nСделать тестовые примеры многоразовыми\nУстановить приоритет\nПредоставить описание тестового примера, тестовые данные, ожидаемый результат, предварительное условие, постусловие.\nНапишите недопустимые тестовые примеры вместе с допустимыми тестами.\nСоблюдайте правила именования.\nРегулярно просматривайте тестовые примеры и при необходимости обновляйте их.\n\n### 2. Что такое тестовые данные?\nТестовые данные — это данные, которые используются тестировщиками для запуска тестовых случаев. Во время выполнения тестовых случаев тестировщикам необходимо ввести некоторые входные данные. Для этого тестировщики подготавливают тестовые данные. Его можно подготовить вручную, а также с помощью инструментов.\n\nНапример, чтобы протестировать базовую функциональность входа в систему с полями идентификатора пользователя и пароля. Нам нужно ввести некоторые данные в поля идентификатора пользователя и пароля. Итак, нам нужно собрать некоторые тестовые данные.\n\n### 3. Что такое тестовое покрытие?\nТестовое покрытие помогает измерить объем тестирования, выполняемого набором тестов.\nТестовое покрытие может выполняться как для функциональных, так и для нефункциональных действий. Он помогает тестировщикам создавать тесты, охватывающие отсутствующие области.\n\n### 4. Что такое покрытие кода?\nПокрытие кода отличается от покрытия тестом. Покрытие кода — это практика модульного тестирования, которая должна затрагивать все области кода хотя бы один раз. Обычно это делают разработчики или юнит-тестеры.\n\n### 5. Каковы наиболее распространенные компоненты отчета о дефектах?\nНаиболее распространенные компоненты формата отчета о дефектах включают следующее\n\n- Имя проекта\n- Имя модуля\n- Идентификатор дефекта\n- Дефект обнаружен\n- Дефект обнаружен\n- Приоритетом\n- Серьезность\n- Дефект устранен\n- Дефект устранен\n\n### 6. Какие тестовые примеры записываются первыми — белые ящики или черный ящик?\nПростой ответ — сначала записываются тестовые примеры черного ящика.\n\nДавайте посмотрим, почему тест черного ящика кейсы пишутся первыми по сравнению с тестовыми случаями белого ящика.\nНеобходимыми условиями для начала написания тестовых случаев для «черного ящика» являются документы с требованиями или проектные документы. Эти документы будут доступны до начала проекта.\nНеобходимыми условиями для начала написания тестовых примеров белого ящика является внутренняя архитектура приложения. Внутренняя архитектура приложения будет доступна в более поздней части проекта, т. Е. При проектировании.\n\n### 7. Какова концепция инструментальных средств в тестировании программного обеспечения?\nWorkbench — это практика документирования того, как должно выполняться конкретное действие. Это часто называют фазами, шагами и задачами.\n\nВ каждой рабочей среде будет пять задач, таких как ввод, выполнение, проверка, вывод и доработка.\n\n### 8. Что такое тестовые метрики?\nМетрики тестирования программного обеспечения предназначены для мониторинга и управления процессом и продуктом. Это помогает без отклонений продвигать проект к намеченным целям. Метрики отвечают на разные вопросы. Важно решить, на какие вопросы вы хотите получить ответы. Щелкните здесь, чтобы узнать подробнее.\n\n### 9. Когда выполняешь тесты, из каких этапов они состоят?\n\n### 10. Приходилось ли писать план тестирования? Опиши этапы в нем. \n\n### 11. Какие инструменты применял для выполнения? Какие для анализа результатов? \n\n### 12. Как приоретизируешь тесты? Что влияет на твои решения?\n\n## Практические вопросы\n\n1. [Как бы вы составили тест-кейсы для какого-то определенного функционала, как раз на таком вопросе и оцениваются ваши знания об техниках тест-дизайна и тестирования.](/testovaya-dokumentacziya/)\n\n2. Проанализировать особенности тестирования определенного программного обеспечения\n\n3. Тестирование калькулятора\n\nИ, собственно, дефекты, которые должны были найти соискатели.\n\n  1. Лишняя буква \"l\" в слове \"Wellcome\".\n  2. Недостающая буква \"r\" в слове \"corect\" внутри окна подтверждения.\n  Здесь мы смотрим на знание английского языка и умение кандидата работать с очепятками визуально. Первый дефект, к слову, находили, буквально, единицы.\n\n  3. Отсутствие кнопок \"0\", \"С\", \"+/-\" и других управляющих элементов функционала.\n  4. Неправильное расположение цифровых кнопок(Расположены инвертированно, относительно стандартной раскладке для калькулятора). \n  5. Отсутствие символа \".\"\n\n  Эти дефекты должны были дать понимание того, откуда кандидат черпает требования к качеству продукта в случае, если прямых требований нету. Есть официальные стандарты, есть индустриальные стандарты, есть продукты конкурентов, и глядя на это, можно было дать кучу правок и замечаний или, хотя бы, задать определенное кол-во вопросов по целесообразности данного инженерного решения. \n  С дефектом под номером 5 связан отдельный вопрос: \"Каким образом возможно видеть подобную цепочку действий, если точка в функционале отсутствует?\". Задавался он для того, чтобы понять, на каком уровне люди взаимодействуют с продуктом и исследуют ли они его достаточно, чтобы делать выводы. А ответ был очень простым - точку очень легко можно ввести с клавиатуры. \n\n  6. Неподходящее обозначение кнопки для умножения(mul). \n  По правде говоря, здесь этот дефект был своеобразной пасхалкой, так как утилита для мок-апов не умела по-человечески отрисовывать звёздочку, по этому было принято решение заменить ее на сокращение от multiplication и заодно проверить умение ребят мыслить аналитически. \n\n  7. Проблемы с расположением элементов. \n\n  Это очень обширная область, где каждый из соискателей мог дать волю своему внутреннему Джонни Айву и указать элементы, расположение которых не совсем удовлетворяет чувству прекрасного, обязательно присущему и нужному для тестировщика.\n\n  8. Неочевидные решения по функционалу элементов.\n\n  Опять-таки, в отсутствие прямых требований, включаем здравый смысл и принимаем решение, нужно ли нам окно подтверждения, нужен ли нам функционал выбора калькулятора в таком виде, в котором он представлен здесь, и так далее. \n\n  9. Инвертированное положение кнопок Yes и No в окне подтверждения. \n\n  Дефект этот задавался для того, чтобы понять, знаком ли человек с гайдлайнами для устоявшихся структурных единиц. Практика показала, что большинство замечавших просто привыкли к другому расположению, но не задавались вопросом, чем это продиктовано. \n\n  Наиболее запомнившиеся мне кандидаты были готовы завести от 10 до 18(рекорд) баг-репортов. \n  Некоторые обращали внимание на картинку, подозрительно напоминающую непрогрузившееся изображение и пустой URL(побочный эффект стандартного окна браузера в утилите для создания мок-апов). \n\n## Другие вопросы\n\n### 1. Что такое управление конфигурацией?\nУправление конфигурацией (CM) — это процесс системного проектирования для поддержания системных ресурсов, компьютерных систем, серверов, программного обеспечения и производительности продукта в согласованном состоянии. Это помогает записывать все изменения, внесенные в систему, и гарантирует, что система работает должным образом, даже если изменения вносятся с течением времени.\n\n### 2. Назовите несколько популярных инструментов управления конфигурацией?\nНекоторые из популярных инструментов управления конфигурацией — это Ansible, Chef, Puppet, Terraform, Saltstack и т. Д.\n\n### 3. Что такое запрос на изменение?\nЗапрос на изменение (MR) при разработке программного обеспечения используется клиентами для изменения существующей функциональности программного обеспечения.\n\n### 4. Что такое отчет об улучшении?\nОтчет об улучшении (ER) при разработке программного обеспечения используется клиентами для добавления новой функции в программное обеспечение.\n\n### 5. Что, если в программном обеспечении так много ошибок, что его вообще невозможно протестировать?\nЕсли в программном обеспечении так много ошибок, первое, что нам нужно сделать, это сообщить об ошибках и классифицировать их в зависимости от степени серьезности. Если ошибки являются критическими, это серьезно влияет на графики и указывает на более глубокие проблемы в процессе разработки программного обеспечения. Поэтому вам необходимо сообщить менеджеру об ошибках с соответствующей документацией в качестве доказательства.\n\n### 6. Что такое Test Harness?\nTest Harness — это набор программного обеспечения и тестовых данных, сконфигурированных для тестирования программного модуля путем его запуска в различных условиях, что включает мониторинг выходных данных с ожидаемыми выходными данными. .\n\nОн содержит механизм выполнения тестов &amp; Репозиторий тестовых скриптов\n\n### 7. Что такое Walk Through?\nПошаговое руководство — это неформальная встреча, которую проводят для изучения, понимания и поиска дефектов. Автор ведет встречу и разъясняет вопросы, поднятые коллегами на встрече.\n\n### 8. В чем разница между автономным приложением, клиент-серверным приложением и веб-приложением?\n\n**Автономное приложение:**  \nАвтономные приложения следуют одному — ярусная архитектура. Уровень представления, бизнеса и базы данных находятся в одной системе для одного пользователя.\n\n**Клиент-серверное приложение:**  \nКлиент-серверные приложения имеют двухуровневую архитектуру. Уровень представления и бизнеса находится в клиентской системе, а уровень базы данных — на другом сервере. Он работает в основном в интрасети.\n\n**Веб-приложение:**  \nВеб-серверные приложения следуют трехуровневой или многоуровневой архитектуре. Уровень представления находится в клиентской системе, уровень бизнеса — на сервере приложений, а уровень базы данных — на сервере базы данных. Работает как в интранете, так и в Интернете.\n\n### 9. Что такое HotFix?\nИсправление — это сборка, направленная на решение серьезной проблемы, обнаруженной в производственной среде.\n\nИногда сборка, выполняемая в производственной среде, имела критические ошибки, и ее производил откат. Теперь команда разработчиков отложила всю свою работу и сосредоточилась на немедленном исправлении этих ошибок и выпустила новую сборку, чтобы исправить это в производственной среде. Эта сборка называется исправлением.\n\nИсправления и исправления — это два разных типа обновлений программного обеспечения. Исправления доступны для всех, а исправления — нет.\n\nИсправления также известны как технические обновления с быстрым исправлением (обновления QFE)\n\n### 10. Что за исправление?\nИсправление — это сборка, направленная на устранение ошибки, обнаруженной тестировщиками в цикле тестирования.\n\n### 11. Что такое вознаграждение за обнаружение ошибок?\nПрограмма вознаграждения за обнаружение ошибок позволяет организации предлагать вознаграждение человеку, который обнаруживает ошибки в их программном обеспечении и сообщает о них.\n\nBug Bounty — это концепция, которая существует с момента создания Интернета. Компании начали понимать, насколько дорого для них нанимать экспертов по тестированию на проникновение каждый раз, когда они хотят найти уязвимости на своем веб-сайте или в приложении. Так недавно программы по поощрению ошибок стали широко распространенными.\n\nПервой компанией, которая подхватила эту концепцию, была Google. Он запустил свою «Программу вознаграждения за уязвимости» в 2010 году и с тех пор выплатил более 4 миллионов долларов.\n\n### 12. Каковы различные стратегии развертывания для конечных пользователей?\nПри развертывании любого проекта тестирования программного обеспечения необходимо следовать четырем стратегиям:\n\n- Пилотный\n- Постепенное внедрение\n- Поэтапное внедрение\n- Параллельная реализация\n\n### 13. Расскажи о своих недавних задачах. Расскажи, какие видел интересные баги.\n\n**Интересные баги:**\n\n- В самом начале работы Amazon покупатель мог заказать отрицательное количество книг. При этом на его банковскую карту зачислялась соответствующая сумма.\n- На заре становления интернет-магазинов в одном из них можно было вписать в графе «Количество товара» значение 0,1, что давало покупателю скидку в 90% (стоимость товара умножалась на те самые 0,1). \n- В другом для хранения аутентификационных данных использовался файл cookie, в котором можно было сменить ID и совершать покупки от чужого лица.\n- В 1991 году программист столкнулся с вирусом Sunday, который модифицирует исполняемый файл и в последний день недели запускается, чтобы уничтожить данные на диске. По какой-то причине этого не произошло, и программист решил разобраться — написал тестовый EXE-файл, скормил его вирусу и посмотрел, что будет. Оказалось, что авторы вируса при его разработке сделали так, что он должен запускаться в день номер 7, а нумерация дней идёт от 0 до 6, так что переменная никогда не принимала нужного значения.\n- «Проблема 2000 года». Разработчики ПО в XX веке часто использовали для обозначения года в датах две последние цифры вместо привычных четырёх. Например, 7 апреля 1994 года представлялось как «07.04.94».\n1 января 2000 по всему миру начали происходить локальные конфликты и сбои в системах. В некоторых городах даже начало пропадать электричество, отопление, часть вычислительных центров просто зависала. Всё это произошло из-за сокращения формата года. После 1999 года наступил 2000, но для машин этот год воспринимался как 1900 (у некоторых даже как 19100). Такая ошибка послужила причиной зависаний во многих системах.\n\n\n### 14. Приходилось ли автоматизировать тесты? Как это было? Расскажи об инструментах автоматизации.\n\n### 15. Какой любимый инструмент автоматизации? Объясни почему. Если его применять не получится, что другое выберешь, и почему?\n\n### 16. Как определяешь, какие тесты достойны автоматизации? Какие тесты не будешь автоматизировать? Почему?\n\n### 17. Вот тебе простой тестовый сценарий. Расскажи, как (и чем) будешь его выполнять.\n\n\n## Дополнительные материалы\n\n### Самоучитель\n\n- https://www.guru99.com/software-testing.html\n- https://github.com/VladislavEremeev/QA_bible\n- [Курс по тестированию ULearn](https://ulearn.me/Course/testing/Testirovanie_UI_e68eca26-6a60-45d8-bc8f-92943aff03a7)\n- [Курс по тестированию Stepik](https://stepik.org/course/16478/syllabus)\n- [Библиотека тестировщика](https://www.software-testing.ru/library/testing)\n\nhttps://www.youtube.com/playlist?list=PLrCZzMib1e9pDKLsabJYuODdVJrHYc4Jd\n\n### Вопросы на логику\n\nhttps://qa-academy.by/qaacademy/news/logicheskie-zadachi-na-sobesedovanii-testirovshhika/\n\n### Вопросы с собеседований\n\n[100 самых популярных вопросов и ответов на собеседовании по тестированию программного обеспечения - atesting.ru](https://atesting.ru/100-samyh-popyliarnyh-voprosov-i-otvetov-na-sobesedovanii-po-testirovaniu-programmnogo-obespecheniia/)\n\n[Вопросы и ответы для собеседования(тестирование ПО) Часть 1](https://medium.com/%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B-%D0%B8-%D0%BE%D1%82%D0%B2%D0%B5%D1%82%D1%8B-%D0%B4%D0%BB%D1%8F-%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BF%D0%BE/%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B-%D0%B8-%D0%BE%D1%82%D0%B2%D0%B5%D1%82%D1%8B-%D1%87%D0%B0%D1%81%D1%82%D1%8C-1-4fc596806d55)\n\n[Вопросы и ответы для собеседования(тестирование ПО) Часть 2](https://medium.com/%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B-%D0%B8-%D0%BE%D1%82%D0%B2%D0%B5%D1%82%D1%8B-%D0%B4%D0%BB%D1%8F-%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BF%D0%BE/%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B-%D0%B8-%D0%BE%D1%82%D0%B2%D0%B5%D1%82%D1%8B-%D1%87%D0%B0%D1%81%D1%82%D1%8C-2-ec8e224e3f98)\n\n[Вопросы и ответы для собеседования(тестирование ПО) Часть 3](https://medium.com/%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B-%D0%B8-%D0%BE%D1%82%D0%B2%D0%B5%D1%82%D1%8B-%D0%B4%D0%BB%D1%8F-%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BF%D0%BE/%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B-%D0%B8-%D0%BE%D1%82%D0%B2%D0%B5%D1%82%D1%8B-%D1%87%D0%B0%D1%81%D1%82%D1%8C-3-6194de0a8bd2)\n\n[Top 40 QA (Quality Assurance) Interview Questions & Answers (2022)](https://www.guru99.com/qa-interview-questions-answers.html)\n\n[101+ вопросов по автоматизации и тестированию вручную](http://getbug.ru/101-voprosov-po-avtomatizatsii-i-testirovaniyu-vruchnuyu/)\n\n[Собеседование тестировщиков: вопросы на собеседовании qa](https://automated-testing.info/t/sobesedovanie-testirovshhikov-voprosy-na-sobesedovanii-qa/10078)\n\n[Каких ответов я жду на собеседовании по тестированию](https://habr.com/ru/post/254209/)\n\n[Собеседование Junior Test Engineer](https://fulcrum.software/ua/interview-jun-test-engineer/)\n\n\n### Про систему управления тестированием Qase\n\n[Официальный сайт](https://qase.io/pricing)\n\n[Туда, не зная куда: каким мы увидели Qase](https://habr.com/ru/company/indriver/blog/666192/)\n\n### Testing Challenge\n\nhttps://qakrotov.com/\n\n[Разбор с примерами и ответами](https://qatalks.ru/testing-challenge-answers)\n\nhttps://www.youtube.com/watch?v=vpj5YDuH7ls\n\n### Разное\n\n[Тренажер по ISTQB](https://istqb-training.ru/Training)\n\n[Тесты по разным областям связанным с тестированием](https://www.guru99.com/tests.html)\n\n[Чек-лист тестирования требований](https://habr.com/ru/post/543340/)\n\n[Web Application Testing Checklist: Example Test Cases for Website](https://www.guru99.com/complete-web-application-testing-checklist.html#2)\n\n[Список книг по тестированию](https://radar4site.ru/blog/16-knigi-po-testirovaniyu.html)\n\nhttps://rocket-science.pro/#program\n\nhttps://www.softwaretestinghelp.com/basic-skills-that-every-tester-fresher-should-have/\n\n### YouTube уроки\n\nhttps://www.youtube.com/watch?v=l5cAeQ3BhjI\n\nhttps://www.youtube.com/watch?v=y6vZu6HKrDg\n\nhttps://www.youtube.com/watch?v=s9fH9yS9K8c\n\nhttps://www.youtube.com/watch?v=MmbVEwYnWTs&list=PLZqgWWF4O-zg03RGSZ2GpHLE3BmO8bjKo\n\n## Нагрузочное тестирование\n\n- Load testing vs Perfomance testing vs Volume vs Atress\n- Метрики нагрузочного тестирования\n- Инструменты нагрузочного тестирования\n- Администрирование с настройкой мониторинга\n- Работа со скриптами, прасерами и заглушками\n- Основные методики и отчеты\n- Понятие настройки генератора нагрузки\n\n\n**todo:**\n\n- Lee Copland!\n- Основы ISTQB","date":"2022-05-26T00:00:00.000Z","path":"/teoreticheskaya-baza-po-testirovaniyu-spisok-voprosov/","icon":"fas fa-bug","image":"null","order":3,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"}],"headings":[{"value":"Тестирование, Quality control, Quality assurance","anchor":"#тестирование-quality-control-quality-assurance"},{"value":"Понятие качества, международные стандарты качества ???","anchor":"#понятие-качества-международные-стандарты-качества-"},{"value":"Жизненный цикл дефекта","anchor":"#жизненный-цикл-дефекта"},{"value":"Жизненный цикл разработки ПО, SDLC (Software Development LifeCycle)","anchor":"#жизненный-цикл-разработки-по-sdlc-software-development-lifecycle"},{"value":"Модели разработки ПО","anchor":"#модели-разработки-по"},{"value":"Методологии разработки ПО: Scrum, Kanban, RUP, DSDM, RAD, XP","anchor":"#методологии-разработки-по-scrum-kanban-rup-dsdm-rad-xp"},{"value":"Жизненный цикл тестирования приложений, STLC (Software Testing LifeCycle)","anchor":"#жизненный-цикл-тестирования-приложений-stlc-software-testing-lifecycle"},{"value":"Принципы тестирования, Agile принципы тестирования","anchor":"#принципы-тестирования-agile-принципы-тестирования"},{"value":"Практики и подходы тестирования ???","anchor":"#практики-и-подходы-тестирования-"},{"value":"Виды тестирования","anchor":"#виды-тестирования"},{"value":"Уровни тестирования","anchor":"#уровни-тестирования"},{"value":"Техники тест-дизайна","anchor":"#техники-тест-дизайна"},{"value":"Тестовая документация","anchor":"#тестовая-документация"},{"value":"Практические вопросы","anchor":"#практические-вопросы"},{"value":"Другие вопросы","anchor":"#другие-вопросы"},{"value":"Дополнительные материалы","anchor":"#дополнительные-материалы"},{"value":"Нагрузочное тестирование","anchor":"#нагрузочное-тестирование"}]}},{"node":{"id":"223b955029c664acea8a15873cc80f7f","title":"Теоретическая база по автоматизации","content":"\nhttps://devsday.ru/blog/details/763\n\ntodo \nизучить https://drill4j.github.io/\n\nhttps://ru.education-wiki.com/8998094-automation-testing-interview-questions\n\nhttps://www.toolsqa.com/\nhttps://coderlessons.com/tutorials/kachestvo-programmnogo-obespecheniia/uchebnik-selenium/uchebnik-selenium\n\nhttps://jsehelper.blogspot.com/2016/01/junit.html\n\nhttps://coderlessons.com/tutorials/kachestvo-programmnogo-obespecheniia/ruchnoe-testirovanie/interviu-po-avtomatizatsii-testirovaniia-q-a\n\nhttps://aqa-topics.herokuapp.com/\n\nhttps://sites.google.com/view/aqa-interview\n\nhttps://www.youtube.com/watch?v=fBTQ3v0i9ic\n\nhttps://www.youtube.com/watch?v=d7aq0aXYEss\n\nhttps://www.youtube.com/watch?v=lWhvKId7IYY\n\nhttps://www.youtube.com/watch?v=gm3lcdcNvMs\n\nhttps://www.youtube.com/watch?v=9kaHs4wCKFc\n\nhttps://www.youtube.com/watch?v=uSVI6Hzu2JM\n\nhttps://atesting.ru/kak-obiasnit-intervuery-stryktyry-avtomatizacii-testirovaniia/\n\nhttp://getbug.ru/101-voprosov-po-avtomatizatsii-i-testirovaniyu-vruchnuyu/\n\n## Test NG\n\nhttps://ru.lambdageeks.com/testng-interview-questions-and-answers/\nhttps://xwizard-test.blogspot.com/2017/02/qa-interview-qa-automation-python-linux.html\n\nhttps://habr.com/ru/company/sbermarket/blog/665260/\n\nhttps://www.conventionalcommits.org/ru/v1.0.0/\n\nhttps://telegra.ph/Ne-avtomatizirujte-test-cases-02-21\n\nЯ больше по java.\nНаписать прогу FizzBuzz.\nФункцию для нахождения факториала.\nРеализация любого алгоритма сортировки.\nSelenium: Explicit/Implicit wait, что лучше, когда какой лучше применять, что это вообще такое.\nВиды селекторов , какие быстрее. и т.д.\nJava: В основном вопросы как по учебнику. Бывает иногда что то необычное - как изменяется размер hashmap, как ведет себя ArrayList при добавлении или удалении элементов.\nStream, lambda, default method, опять же довольно стандартно.\nSQL: Joins, Unions, Delete/Truncate, Having, ну может попросят какой то простенький запрос набросать\n\n\nРаспарсить строку - вытащить все инты, раскидать их по двум массивам - в одном четные по возрастанию, в другом нечетные по убыванию\n\nВиды тестирования, разница между Load и Perfomance testing.\nУровни тестирования.\nКак будешь тестировать апп, когда требований нет , аппликейшен готов, и есть неделя до релиза.\nКак поведешь себя в ситуации нескольких проектов одновременно.\nКак будешь разрабатывать automation framework, который можно применять более чем в одном проекте.\nТехники тестирования и их применение.\n\n\nCI tools - Jenkins - тут зависит от вашего опыта. Я больше по созданию джоб и навинчиванию плагинов на уже существующий каркас.\nМетодологии разработки.\nSoftware development life cycle, аналогично для тестирования.\nSeverity/Priority\n\nУмеешь ли писать framework с нуля.\nxpath: contains, text, or/and.\nКак написать общий xtype для элементов разного типа, но с одним class.\nАналогичный вопрос для CSS selectors.\n\nКак смержить два массива - алгоритм и реализация.\nКак из 4-х чисел получить максимальное время в 24-ом формате.\nАлгоритм, как такое тестировать будешь.\nJunit и TestNg - различия, что лучше и почему.\nData providers.\n\n\nava:\n\nТеория:\n\n1)Принципы ООП\n2)Объяснить своими словами каждый принцип.\n3)Модификаторы доступа. Какие знаете? Зачем используются?\n4)Переопределение, перегрузка - что это ? Цели применения?\n5)Наследование и композиция - что это ? Цели применения?\n6)Зачем нужен интерфейс, абстрактный класс, enum?\n7)Паттерны программирования: Singleton (Одиночка), Abstract factory (Абстрактная фабрика), Decorator(Декоратор).\n\nАвтоматизация:\n\n1)Что такое Selenium?\nЗачем нужен webdriver?\nЗачем нужен selenium-server?\n\n2)Что такое Junit? TestNG? Как запускаете тесты?\n3)Maven. Зачем используется?\n4)Jenkins, TeamCity что это? Какой и как использовали?\n5)Использовали ли Selenide, Allure. Что это за библиотеки и зачем используются?\n6)Паттерн PageObject. Объяснить в теории его смысл.\n\n\nОтносительно недавно, вновь прошел через данную полосу препятствий.\nСобеседовался на QA Automation Lead/Senior и SDET.\nПрактически, никто не задавал вопросов по теории тестирования. В основном, фокус на стратегии, и как внедрять процесс автоматизации. Разве, что классический вопрос про, как тестировать, когда время поджимает.\n\nПро классику, типо, что такое селениум, пейджобджект, кукумбер не буду писать.\n\nСобственно вопросы( идут как попало):\n1. Java - все по классике. Но теперь добавились вопросы по stream/optional, анонимные классы, функциональные интерфейсы, лямбда, предикаты.\n2. Задачки : сортировку никто не отменял. Пузырек, quick sort, merge, selection. И их математическая сложность.\nКак написать простенький rest request с какому то урлу и как расспарсить ответ.\nКак реализовать интерфейс итератор. Развернуть строку, как проверить на палиндром, факториал, фиббоначи. Как найти цикл в связном списке.\nКак удалить дубликаты из списка, как проверить что дубликаты удалены.\nРасспросить строку в зависимости от условий.\n\nКак схлопывать массивы.. Например:\nInput: [2,5],[7,8],[4,5]\nOutput: [2,5],[7,8]\n\nМогут попросить реализовать класс с какой то логикой.\n\nЯ заметил, что лично меня стали спрашивать с уклоном в программирование. На последнем собеседовании было много алгоритмов и вопросов по ним.\n\nПару раз попадал на system design interview.\nОдин раз просили задизайнить твиттер, а потом нетфликс. Это дико круто и интересно.. Но без практики это вообще труба.\nТут просто гугл в помощь и миллион вопросов к тем, кто ставит перед вами эту задачу. Вы должны спрашивать, и использовать ответы на ваши вопросы в построении ответов.\n\n3. Jenkins/teamcity - что это, с чем едят, зачем нужно, как использовать.\nЧто есть CI/CD зачем надо, в чем плюсы.\n4. Docker - что это. Зачем?\nВ чем отличие от VM Docker file vs container vs image. Что такое Docker layer.\nКак двум контейнерам увидеть друг друга.\nЧто такое service. Что такое commit.\n5. SOLID -что это, как расшифровывается.\n6. Уделите внимания структурам данных : hash table, list, set, tree, queue.\n7. Git: cherry pick, merge, rebase.\n\nhttp://infobase.athn.ru/program/2017/11/junior-automation-qa-voprosyi-na-sobesedovanii/\n\nhttps://ru.bitdegree.org/rukovodstvo/selenium/\n\nhttps://habr.com/ru/company/otus/blog/350368/\n\nhttps://www.youtube.com/watch?v=C8Z-N0y6Sqo&list=PLMrFx1ncacK7qZFZB9oePwIi_oFPqHHKM&index=6\n\nhttps://www.youtube.com/watch?v=C8Z-N0y6Sqo&list=PLMrFx1ncacK7qZFZB9oePwIi_oFPqHHKM&index=6\n\nhttps://www.youtube.com/watch?v=ZWI7Khx6UpE&t=367s\n\n\nПо Selenium я бы также советовал подготовиться. Примеры вопросов есть тут и тут.\n\nТакже могут спросить про CSS/XPath-локаторы. Я разобрался в них достаточно глубоко, так как понимал, что на такой должности буду пользоваться этой информацией и навыками довольно часто.\n\nнастройка Selenium/Selenoid, какие браузеры использовать, как правильно подбирать CSS локаторы","date":"2022-05-26T00:00:00.000Z","path":"/teoreticheskaya-baza-po-avtomatizaczii/","icon":"fas fa-robot","image":"null","order":4,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"собеседование","path":"/tag/%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"},{"title":"interview","path":"/tag/interview/"}],"headings":[{"value":"Test NG","anchor":"#test-ng"}]}},{"node":{"id":"09744d88b447518239c928939357dd85","title":"Теоретическая база по программированию","content":"\n\nТут уже посерьезнее и нужно будет готовить вопросы о типах данных, переменных, циклах, массивах, ООП, исключениях, коллекциях, строках, паттернах проектирования (Singleton/PageObject/PageFactory/Builder и прочее). Ознакомиться с примерными вопросами, в данном случае — Java, можно тут.\n\nС практической точки зрения на самом собеседовании могут попросить написать алгоритм сортировки либо что-то связанное с объектами.\n\nНе всем кандидатам подобного собеседования нравиться, когда их просят написать тестовый код, аргументируя это тем, что в действительности это вовсе не нужно для работы.\n\nКонечно, в этом есть доля правды, но делается это все для того, чтобы узнать с какими фреймворками кандидат может работать, а с какими, банально, не знаком.\n\nЧаще всего, если человек действительно умеет и любит писать код, он запросто справится с тестовым заданием. Особенно если у него имеется опыт работы на специфических задачах (использование циклов, ветвей, работа с массивами и хеш-картами).\n\nОбязательно будет пару вопросов касательно ООП — понятие класса и экземпляра класса, термин инкапсуляции, разновидности модификаторов доступа и другое.\n\nДополнительно могут начать интересоваться вашими познаниями в паттернах программирования. Здесь нужно ориентироваться в PageFactory, Factory, Builder и PageObject. Можно заранее подучить принципы разработки SRP, KISS, SOLID и DRY.\n\n## Java\n\nключевые изменения в java начиная с 9ой версии\n\nСамоучитель\nhttps://metanit.com/java/tutorial/\nhttp://proglang.su/java\nhttps://howtodoinjava.com/java/\n\n## паттерны проектирования\n\n- https://refactoring.guru/ru/design-patterns/catalog\n\nhttps://atesting.ru/top-40-voprosov-i-otvetov-na-sobesedovanii-po-java-v-2021-gody/\n\n\n## GIT\nhttps://atesting.ru/60-voprosov-dlia-sobesedovanii-po-git-kotorye-vam-nyjno-podgotovit-v-2021-gody/\n\nhttps://www.hackerrank.com/\n\nhttps://www.codewars.com/\n\n\nhttps://leetcode.com/  \nhttps://www.codewars.com/","date":"2022-05-26T00:00:00.000Z","path":"/teoreticheskaya-baza-po-programmirovaniyu/","icon":"fas fa-bug","image":"null","order":5,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"собеседование","path":"/tag/%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"},{"title":"interview","path":"/tag/interview/"}],"headings":[{"value":"Java","anchor":"#java"},{"value":"паттерны проектирования","anchor":"#паттерны-проектирования"},{"value":"GIT","anchor":"#git"}]}}]}},"relatedTag":{"id":"4b276a3a6b99e78392dc449c5d9ba01b","title":"qa","path":"/tag/qa/","related":[{"id":"java","path":"/tag/java/","title":"java"}]}},"context":{}}