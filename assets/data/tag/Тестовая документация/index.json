{"hash":"7ce6058f470c3851afaa44882541a7f3d1089ffc","data":{"tag":{"title":"Тестовая документация","path":"/tag/%D0%A2%D0%B5%D1%81%D1%82%D0%BE%D0%B2%D0%B0%D1%8F%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F/","belongsTo":{"totalCount":16,"pageInfo":{"totalPages":2,"currentPage":1},"edges":[{"node":{"id":"86ac49748bffbf2ce2298c232043cc02","title":"Тестовая документация","content":"\n- [Тестовая политика и стратегия](/testovaya-politika-i-strategiya/)\n- [Международные стандарты тестовой документации](/mezhdunarodnye-standarty-testovoj-dokumentaczii/)\n- [Master Test Plan и тестовые планы для каждого уровня](/master-test-plan-i-testovye-plany-dlya-kazhdogo-urovnya/)\n- [Понятие Test Case и Test Suite](/ponyatie-test-case-i-test-suite/)\n- [Понятие Test Basis, Test Condition и Test Procedure](/ponyatie-test-basis-test-condition-i-test-procedure/)\n- [Check-list, как представитель Experience-Based](/check-list-kak-predstavitel-experience-based/)\n- [Bug Report](/bug-report/)\n- [Summary Report](/summary-report/)\n- [Requirements Tracebility Matrix](/requirements-tracebility-matrix/)\n- [Test Data Tables](/test-data-tables/)\n- [Test Scenario](/test-scenario/)\n- [External Test Reports](/external-test-reports/)\n- [Критерии приемки](/kriterii-priemki/)\n- [Метрики тестирования](/metriki-testirovaniya/)\n- [Требования](/trebovaniya/)\n- [Тестовый оракул](/testovyj-orakul/)\n\n\n## Виды тестовой документации\n\n### Тестовая поставка (test deliverable)\nЛюбой тестовый (рабочий) продукт, который должен быть доставлен кому-то другому, кроме автора тестового (рабочего) продукта. (ISTQB)\n\n### Тестовое обеспечение (testware)\nАртефакты, создаваемые во время процесса тестирования и требующиеся для планирования, разработки и выполнения тестов. Например: документация, сценарии, входы, ожидаемые результаты, процедуры установки и удаления, файлы, базы данных, окружение и любое другое дополнительное программное обеспечение или инструменты, используемые в тестировании. (Fewster and Graham)\n\n### Артефакт (artifact)\nЭто один из многих видов материальных побочных продуктов, возникающих в процессе STLC. Это не только документация, а в принципе всё, что создаётся для того, чтобы быть задействованным в тестировании.\n\n### Результаты тестирования (Test Deliverables)\nЭто артефакты, которые передаются заинтересованным сторонам проекта программного обеспечения в течение жизненного цикла разработки программного обеспечения. На каждом этапе жизненного цикла разработки программного обеспечения существуют разные результаты тестирования. Некоторые результаты тестирования предоставляются до этапа тестирования, некоторые - на этапе тестирования, а некоторые - после завершения циклов тестирования.\n\nНаличие или отсутствие документации, ее актуальность, как и используемые виды варьируются от компании к компании и даже от проекта к проекту. Создание и ведение документации требует весомого количества времени (и компетенций), а потому важно знать основные документы и их роль в процессах, учитывать требования всех заинтересованных лиц, нормативную и законодательную базу, политику и стандарты компании и особенности проекта чтобы понимать, какие из них необходимы (и обоснованны для бизнеса) в каждом случае. Существует огромное количество вариантов документов, часть из которых вы можете никогда и не встретить в реальной работе.\n\nПо Куликову документацию можно разделить на два больших вида в зависимости от времени и места ее использования:\n\n* Продуктная документация (product documentation, development documentation) используется проектной командой во время разработки и поддержки продукта. Она включает:\n  * План проекта (project management plan) и в том числе тестовый план (test plan);\n  * Требования к программному продукту (product requirements document, PRD) и функциональные спецификации (functional specifications document, FSD; software requirements specification, SRS);\n  * Архитектуру и дизайн (architecture and design);\n  * Тест-кейсы и наборы тест-кейсов (test cases, test suites);\n  * Технические спецификации (technical specifications), такие как схемы баз данных, описания алгоритмов, интерфейсов и т.д.;\n* Проектная документация (project documentation) включает в себя как продуктную документацию, так и некоторые дополнительные виды документации и используется не только на стадии разработки, но и на более ранних и поздних стадиях (например, на стадии внедрения и эксплуатации). Она включает:\n  * Пользовательскую и сопроводительную документацию (user and accompanying documentation), такую как встроенная помощь, руководство по установке и использованию, лицензионные соглашения и т.д.;\n  * Маркетинговую документацию (market requirements document, MRD), которую представители разработчика или заказчика используют как на начальных этапах (для уточнения сути и концепции проекта), так и на финальных этапах развития проекта (для продвижения продукта на рынке).\n\nМожно встретить и другие классификации.\n\n* Внутренняя документация подробно описывает процесс разработки продукта, например стандарты, проектную документацию, заметки о деловой переписке и т. д. Внешняя документация относится к документам, которые подробно описывают сам продукт, например, Системная документация и Пользовательская документация.\n* К внешней документации можно отнести Test policy, Test strategy, различные отчеты, Defect Report, Замечание, Запрос на изменение (улучшение), к внутренней всё от чеклиста до плана тестирования, тестовые данные и т.п. Пользовательская документация (User documentation) - это вся документация, которая будет передана конечному пользователю в комплекте с ПО.\n\n\n### Политика качества (Quality policy)\nОтражает видение компании в отношении производства и поставки качественного продукта;\n### Политика тестирования (Test policy)\nДокумент высокого уровня, в котором описаны принципы, методы и все важные цели тестирования в организации;\n### Стратегия тестирования (Test strategy)\nСтатический документ документ высокого уровня (high-level), обычно разрабатываемый менеджером проекта (project manager). Это документ, который отражает подход к тестированию продукта и достижению целей. Обычно он выводится из Спецификации бизнес-требований (BRS - Business Requirement Specification). На основе стратегии тестирования готовится План тестирования;\n### План тестирования (Test plan)\nДокумент, который содержит план всех действий по тестированию, которые необходимо выполнить для получения качественного продукта. План тестирования является производным от описания продукта (Product Description), SRS (Software requirements specification) или сценариев использования (Use Case) для всех будущих действий проекта. Обычно его готовит руководитель тестирования или менеджер по тестированию (Test Lead or Test Manager);\n### Отчет об оценке усилий (Effort Estimation Report)\nВ этом отчете группы тестирования оценивают усилия для завершения процесса тестирования;\n### Сценарий тестирования (Test Scenario)\nЭлемент или событие программной системы, которое может быть проверено одним или несколькими тестовыми случаями;\n### Тестовый набор/комплект** (Test Suite)\n“Комплект тестовых наборов для исследуемого компонента или системы, в котором обычно постусловие одного теста используется в качестве предусловия для последующего.” (ISTQB)_. Некоторый набор формализованных Test case, объединенных между собой по общему логическому признаку;\n### Тестовый случай/пример (Test case)\nНабор положительных и отрицательных исполняемых шагов тестового сценария, который имеет набор предварительных условий, тестовых данных, ожидаемого результата, пост-условий и фактических результатов;\n### Тест сурвей (Test Survey)\nВ рунете только [один источник](https://www.a1qa.ru/blog/obespechivaem-kachestvo-mobilnyh-prilozhenij-shag-2-planirovanie-testovyh-aktivnostej/) о нем, но есть упоминания в истории чатов коммьюнити. Test Survey по детализации занимает место посередине между чек-листом и тест-кейсом, а именно содержит в себе только summary и expected result. Т.е. подробнее чек-листов, где только заголовки, но с ожидаемым результатом и без шагов и прочего как в тест-кейсах;\n### Чек-лист (Check List)\nПеречень формализованных Test case в упрощенном виде удобном для проведения проверок, часто только список из заголовков кейсов;\n### Матрица прослеживаемости требований (Requirements Traceability Matrix)\nДокумент, который соотносит требования с тестовыми примерами;\n### Тестовые данные (Test Data)\nДанные, которые существуют (например, в базе данных) на начало выполнения теста и влияют на работу, или же испытывают влияние со стороны тестируемой системы или компонента.” (ISTQB). “Созданные или отобранные данные, удовлетворяющие входным требованиям для выполнения одного или более контрольных примеров, которые могут быть определены в плане тестирования, контрольном примере или процедуре тестирования. (ГОСТ 56920)\n### Отчет о дефектах (Defect Report)\nЦель документа заключается в том, чтобы зафиксировать факт ошибки и передать разработчикам подробную информацию о ней;\n### Отчет о выполнении теста (Test Execution Report)\nСодержит результаты тестирования и сводку действий по выполнению тестов;\n### Сводный отчет о тестировании (Test summary report)\nПредставляет собой документ высокого уровня, в котором резюмируются проведенные действия по тестированию, а также результаты тестирования;\n### Графики и метрики (Graphs and Metrics)\nПредназначены для мониторинга и управления процессом и продуктом. Это помогает без отклонений вести проект к намеченным целям. Метрики отвечают на разные вопросы. Важно решить, на какие вопросы вы хотите получить ответы;\n### Отчет о тестовых инцидентах (Test incident report)\nСодержит все инциденты, разрешенные или неразрешенные, обнаруженные во время тестирования;\n### Отчет о завершении тестирования (Test closure report)\nСодержит подробный анализ обнаруженных ошибок, удаленных ошибок и несоответствий, обнаруженных в программном обеспечении;\n### Отчет о статусе тестирования (Test status report)\nПредназначен для отслеживания статуса тестирования. Его готовят периодически или еженедельно. В нем указаны работы, выполненные до настоящего времени, и работы, которые еще не завершены;\n### Еженедельный отчет о статусе (менеджер проекта для клиента)\nWeekly status report похож на отчет о статусе тестирования, но генерируется еженедельно;\n### Отчет об улучшении (?Enhancement report)\nОписание неявных/некритичных косвенных требований, которые не были учтены при планировании/реализации продукта, но несоблюдение, которых может вызвать неприятие у конечного потребителя;\n### Запрос на модификацию (Modification Request)\nЗапрос клиента на изменение существующей функциональности;\n### Примечания к выпуску (Release Note)\nПримечания к выпуску будут отправлены клиенту, заказчику или заинтересованным сторонам вместе со сборкой. Он содержит список новых выпусков, исправления ошибок;\n### Руководство по установке / настройке (Installation/configuration guide)\nЭто руководство помогает установить или настроить компоненты, из которых состоит система, и ее аппаратные и программные требования;\n### Руководство пользователя (User guide)\nэто руководство помогает конечному пользователю понять как пользоваться продуктом;\n### Документы требований**.\n\n![https://api.docs.cntd.ru/img/12/00/13/49/98/1a71a934-c9ab-4de5-af4b-f4fa89eeb93d/P0020.png](https://lh6.googleusercontent.com/IJjhp1x7295N97WqgjsR90wavx8yHHm2iitMKK5LCcXu98Y6Jva60iyylSJt\\_hpnhJbD43DTXTXxg5d7gtJbb7pMFxue-tP-TtucTH8d1aXapLgjwXZUUtdfwLmuyGq\\_1rI\\_3OdQ)\n\nИсточник:\n\n* [Test Deliverables in Software Testing - Detailed Explanation](https://www.softwaretestingmaterial.com/test-deliverables/)\n\nДоп. материал:\n\n* [ГОСТ Р 56922-2016/ISO/IEC/IEEE 29119-3:2013 Часть 3: “Документация тестирования”](https://docs.cntd.ru/document/1200134998)\n* [ГОСТ Р ИСО/МЭК 15910-2002: “Процесс создания документации пользователя программного средства”](https://docs.cntd.ru/document/1200030141)\n* [ГОСТ Р 57100-2016/ISO/IEC/IEEE 42010:2011 “Описание архитектуры”](https://docs.cntd.ru/document/1200139542)\n* [Podlodka#223 - Техническая документация](https://www.youtube.com/watch?v=S8kiPiG0jW8)\n* [Пользовательская документация](https://habr.com/ru/post/542288/#:\\~:text=2.%C2%A0-,%D0%9F%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8C%D1%81%D0%BA%D0%B0%D1%8F,-%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F)\n* [What Is Test Data? Test Data Preparation Techniques With Example](https://www.softwaretestinghelp.com/tips-to-design-test-data-before-executing-your-test-cases/)\n* [Что такое тестовая документация и зачем она нужна?](https://testengineer.ru/chto-takoe-testovaya-dokumentaciya-i-zachem-ona-nuzhna/)\n* [Шаблон улучшения](http://okiseleva.blogspot.com/2015/10/blog-post\\_16.html)\n\n\n\n\n## виды тестовой документации\nhttps://www.freecodecamp.org/news/how-to-write-qa-documentation-that-will-work/\n\n\n","date":"2022-05-13T00:00:00.000Z","path":"/testovaya-dokumentacziya/","icon":"fas fa-bug","image":"null","order":13,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Тестовая документация","path":"/tag/%D0%A2%D0%B5%D1%81%D1%82%D0%BE%D0%B2%D0%B0%D1%8F%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F/"}],"headings":[{"value":"Виды тестовой документации","anchor":"#виды-тестовой-документации"},{"value":"виды тестовой документации","anchor":"#виды-тестовой-документации-1"}]}},{"node":{"id":"32737abd923693143bf93bb8156bb5f6","title":"Тестовая политика и стратегия","content":"\n## Политика качества и политика тестирования (Quality policy and Test policy)\n\n### Политика качества\n\nЭто заявления, сделанные организациями для передачи своих долгосрочных стратегических целей, задач, видения в отношении производства и поставки качественного продукта. \n\nВ этих политиках излагаются основные принципы организации, которые помогают им следовать установленным процедурам при разработке и тестировании продукта и постоянно стремиться к улучшению как продукта, так и процесса. \n\nПолитика в области качества отражает основные ценности организации, что помогает понять их представления об атрибуте качества, о том, что для них означает качество, подходах, ключевых областях внимания и приоритетах при обеспечении качества для своих клиентов.\n\nНаличие четко определенной политики в области качества в соответствии со стандартами ISO 9001 является обязательным требованием для организации. Quality policy составляют CEO и Quality Manager.\n\nПри написании политики подчеркиваются следующие ключевые области:\n\n* **Внимание клиентов**  \nПотребности и ожидания клиентов являются важнейшим ключевым критерием, который помогает в достижении перспектив качества продукта. Таким образом, основное внимание следует уделять информированию о текущих и будущих потребностях клиента, а также их выполнению;\n* **Лидерство**  \nДолжна быть в состоянии моделировать и создавать мотивационную и восторженную среду, чтобы извлекать максимум из каждого человека для достижения качества;\n* **Постоянное улучшение**  \nДолжна стремиться к постоянному совершенствованию процедуры и подхода, чтобы улучшить качество;\n* **Процесс**  \nДолжна отражать соблюдение и следование всем стандартным методам и процессам, что способствует повышению качества;\n* **Отношения**  \nДолжна быть направлена на укрепление отношений с клиентом / покупателем;\n* **Создание и распространение осведомленности**  \nИнформирование людей как внутри (персонал), так и за пределами (целевые клиенты) организации о стандартах, принципах и практиках, которым следует организация.\n\nКроме того, она должна обеспечивать прочную основу для достижения целей в области качества и периодически пересматриваться и обновляться, чтобы постоянно соответствовать существующим требованиям и ожиданиям. Вкратце можно сказать, что политика в области качества, определяемая организациями, действует как зеркало и отражает их виртуальный образ в реальном мире, на основе которого внешние организации могут воспринимать и понимать свои основные принципы и обязательства по отношению к вкладу в качество.\n\n### Политика тестирования\n\n_Политика тестирования (test policy): Документ высокого уровня, описывающий принципы, подход и основные цели организации в отношении тестирования. (ISTQB)_\n\n**Политика тестирования** объясняет философию тестирования компании в целом и указывает направление, которого отдел тестирования должен придерживаться и которому следует следовать. Это должно относиться как к новым проектам, так и к проектам на поддержке. \n\nУстановление старшими менеджерами соответствующей политики тестирования обеспечивает прочную основу, в которой могут работать специалисты-практики. Это поможет обеспечить максимальную стратегическую ценность каждого проекта.\n\nПолитика тестирования является частью политики качества, если она есть, в таких случаях политика качества разъяснит общую цель менеджмента в отношении качества. В ином случае этот документ верхний в иерархии тестовой документации. Политика тестирования содержит следующее:\n\n* Обозначение преимуществ тестирования и коммерческой ценности, которые оправдывают [затраты на качество](https://tryqa.com/what-is-cost-of-quality-in-software-testing/);\n* Определяет [цели тестирования](https://tryqa.com/what-is-the-software-testing-objectives-and-purpose/), такие как укрепление доверия, обнаружение дефектов и снижение рисков для качества;\n* Описывает методы измерения эффективности тестирования и результативности выполнения задач тестирования;\n* Обобщает [процессы](https://tryqa.com/what-is-fundamental-test-process-in-software-testing/), используемые при тестировании;\n* Описывает для организации способы [улучшения процессов](https://tryqa.com/software-testing-process-improvements-for-test-qa-managers/) тестирования.\n\nПолитика тестирования также должна включать действия по тестированию, необходимые для поддержки текущего проекта, а также разработки новых проектов.\n\nИсточники:\n\n* [Quality Policy](https://www.professionalqa.com/quality-policy)\n* [What is Test Policy? What does it contain?](https://tryqa.com/what-is-test-policy-what-does-it-contain/)\n\nДоп. материал:\n\n* [ISO 9001 Quality Policy - How to Write & Communicate your Policy Statement](https://www.iso-9001-checklist.co.uk/5.2-quality-policy.htm)\n\n## Стратегия тестирования (Test strategy)\n\n_Стратегия тестирования (test strategy): Высокоуровневое описание уровней тестирования, которые должны быть выполнены, и тестирования, входящего в эти уровни, для организации или программы из одного или более проектов. (ISTQB)_\n\nСтратегия тестирования - это статический документ высокого уровня, обычно разрабатываемый менеджером проекта. \n\nЭто документ, который отражает подход к тестированию продукта и достижению целей, и дает четкое представление о том, что команда тестирования будет делать для всего проекта. Обычно он выводится из Спецификации бизнес-требований (BRS).\n\nКак только стратегия тестирования готова, группа тестирования начинает писать подробный план тестирования и продолжает дальнейшие этапы тестирования. \n\nВ мире Agile некоторые компании не тратят время на подготовку плана тестирования из-за минимального времени для каждого выпуска, но они поддерживают документ стратегии тестирования. Это один из важных документов в test deliverables, которым команда тестирования делится с заинтересованными сторонами для лучшего понимания объема проекта, рисков, подходов к тестированию и других важных аспектов.\n\nСодержание стратегии будет разным в зависимости от проекта, поэтому нет единого для всех шаблона. Можно найти эвристики в помощь, множество зарубежных статей на тему составления стратегии и некоторые общие пункты, которые чаще используются:\n\n* **Обзор и объем** (Scope and overview): объем работ по тестированию (что тестировать и зачем тестировать) и обзор тестируемого продукта;\n* **Подход к тестированию** (Test Approach):\n  * Уровни тестирования (Test levels);\n  * Виды тестирования (Test Types);\n  * Роли и обязанности (Roles and responsibilities);\n  * Требования к окружениям (Environment requirements);\n* **Инструменты тестирования** (Testing tools): инструменты, необходимые для проведения тестов (TMS, багтрекинговая система, стек автоматизации);\n* **Отраслевые стандарты**, которым необходимо следовать (Industry standards to follow): В этом разделе описывается отраслевой стандарт для производства высококачественной системы, которая соответствует ожиданиям клиентов или превосходит их. Обычно менеджер проекта определяет модели и процедуры тестирования, которым необходимо следовать для достижения целей проекта;\n* **Результаты тестирования** (Test deliverables): документация, которую необходимо создать до, во время и по окончании тестирования;\n* **Метрики тестирования** (Testing metrics): метрики, которые следует использовать в проекте для анализа статуса проекта;\n* **Матрица отслеживания требований** (RTM);\n* **Риски и способы их снижения** (Risk and mitigation): все риски тестирования и план по их снижению;\n* **Инструмент отчетности** (Reporting tool): как будут отслеживаться дефекты и проблемы;\n* **Результаты тестов** (Test Summary): виды сводных отчетов о тестах, которые будут создаваться, с указанием периодичности. Сводные отчеты о тестах будут генерироваться ежедневно, еженедельно или ежемесячно, в зависимости от критичности проекта.\n\nИсточники:\n\n* [The Complete Guide To Writing Test Strategy](https://www.softwaretestingmaterial.com/test-strategy/)\n\nДоп. материал:\n\n* [Большая качественная подборка материалов по теме](https://www.huibschoots.nl/wordpress/?page\\_id=441#strategy)\n* [Practical test strategy using heuristics](https://huddle.eurostarsoftwaretesting.com/resources/test-management/practical-test-strategy-using-heuristics/)\n* [Creating a Quality Strategy](https://thinkingtester.com/creating-a-quality-strategy/)\n* [Стратегия обеспечения качества и вопросы в процессе ее составления](https://testengineer.ru/strategiya-obespecheniya-kachestva/)\n* [6 Ways to Come Up with a Solid Test Strategy](https://blog.gurock.com/solid-test-strategy/)\n* [Creating a quality strategy](https://theqalead.com/topics/creating-a-quality-strategy/)\n* Примеры: [раз](https://www.experimentus.com/itm/15\\_Project\\_Test\\_Strategy\\_Agile.pdf), [два](https://strongqa.com/qa-portal/testing-docs-templates/test-strategy), [три](https://www.template.net/business/strategy-templates/sample-test-strategy-template/)\n\n\n\n","date":"2022-06-21T00:00:00.000Z","path":"/testovaya-politika-i-strategiya/","icon":"fas fa-bug","image":"null","order":14,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Тестовая документация","path":"/tag/%D0%A2%D0%B5%D1%81%D1%82%D0%BE%D0%B2%D0%B0%D1%8F%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F/"}],"headings":[{"value":"Политика качества и политика тестирования (Quality policy and Test policy)","anchor":"#политика-качества-и-политика-тестирования-quality-policy-and-test-policy"},{"value":"Стратегия тестирования (Test strategy)","anchor":"#стратегия-тестирования-test-strategy"}]}},{"node":{"id":"74bde7d7d8905cd227ffa06b0ac409ec","title":"Международные стандарты тестовой документации","content":"\nСтандарт ANSI/IEEE 829-1983 на Документацию по тестированию программного обеспечения (STD — Software Test Documentation), заново подтвержденный в 1991 году, состоит из следующих разделов:\n\n1. **Введение**\n\nВ разделе Введение объясняется содержание тестов и их общие принципы. \n\n_Например_, если программа управляет оборудованием помещения скорой помощи, именно в этом разделе мы должны объяснить наш общий подход к тестированию моделей, сводящийся к тестированию в условиях данных помещений.\n\n2. **План тестирования**\n\nТестируемые элементы, границы, подход, ресурсы, расписание, персонал.\n\nПлан тестирования объясняет, как следует организовать персонал, программы и оборудование, чтобы выполнить тестирование. \n\n_Например_: «Временной модуль будет тестировать Джо на протяжении недель 30-33; модуль мониторинга сердца будет тестировать Сьюзан на протяжении недель 26-30; интеграцию этих двух модулей будет тестировать Эд на протяжении недель 31-33;... ».\n\n3. **Проект тестирования**\n\nТестируемые элементы, подход, план в подробностях.\n\nПроект тестирования отражает следующий уровень детализации после плана тестирования. Он раскрывает значение соответствующих программных элементов, описывает порядок, в котором их следует тестировать, называет тестовые варианты, которые следует применить. \n\n_Например_: «Джо будет тестировать временной модуль отдельно на протяжении недель 30-33, используя тестовую процедуру 892 и драйвер 8910; Сьюзан будет тестировать модуль мониторинга сердца отдельно на протяжении недель 26-30, используя тестовую процедуру 555 и драйвер 3024; Эд будет тестировать сборку, интегрирующую эти два модуля (сборка 7), используя...».\n\n4. **Тестовые варианты**\n\nНаборы входных данных и событий.\n\n5. **Тестовые процедуры**\n\nШаги настройки и выполнения тестовых вариантов.\n\n6. **Отчет о проведении тестирования элементов**\n\nТестируемый элемент, физическое местоположение результатов, ответст-венный за проведение тестов.\n\n7. **Журнал испытаний**\n\nХронологическая запись, физическое местоположение теста, название теста.\n\n8. **Отчет о происшествиях во время тестирования** \n\nДокументирование любого события, имевшего место во время тестирования, требующего дальнейших расследований.\n\n9. **Итоговый отчет о тестировании**\n\nИтог всего вышеперечисленного.","date":"2022-05-13T00:00:00.000Z","path":"/mezhdunarodnye-standarty-testovoj-dokumentaczii/","icon":"fas fa-bug","image":"null","order":15,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Тестовая документация","path":"/tag/%D0%A2%D0%B5%D1%81%D1%82%D0%BE%D0%B2%D0%B0%D1%8F%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F/"}],"headings":[]}},{"node":{"id":"bcbed88dace3edaa8cadf8a5e91154c2","title":"Понятие Test Case и Test Suite","content":"\n## Тестовый сценарий (Test scenario)\n\n_Сценарий выполнения (test scenario): См. спецификация процедуры тестирования. (ISTQB)_\n\n_Спецификация процедуры тестирования (test procedure specification): Документ, описывающий последовательность действий при выполнении теста. Также известен как ручной сценарий тестирования. (IEEE 829) См. также спецификация теста_\n\n_Спецификация теста (test specification): Документ, состоящий из спецификации проектирования теста, спецификации тестовых сценариев и/или спецификации процедуры тестирования (ISTQB)_\n\n**Тестовый сценарий** (Test scenario) - последовательность действий над продуктом, которые связаны единым ограниченным бизнес-процессом использования, и сообразных им проверок корректности поведения продукта в ходе этих действий. Иными словами, это последовательность шагов, которые пользователь может предпринять, чтобы использовать ваше программное обеспечение. Сценарии тестирования должны учитывать все возможные способы выполнения задачи (функции) и охватывать как положительные, так и отрицательные тестовые примеры, потому что конечные пользователи могут не обязательно предпринимать шаги, которые вы от них ожидаете. Используя тестовые сценарии, мы оцениваем работу приложения с точки зрения конечного пользователя. Фактически при успешном прохождении всего тестового сценария мы можем сделать заключение о том, что продукт может выполнять ту или иную возложенную на него функцию.\n\n**Как писать сценарии**:\n\n* Тщательно ознакомьтесь с требованиями (Спецификация бизнес-требований (BRS), Спецификация требований к программному обеспечению (SRS), Спецификация функциональных требований (FRS)) тестируемой системы (SUT), use cases, книгами, руководствами и т. д.;\n* Для каждого требования выясните, как пользователь может использовать программное обеспечение всеми возможными способами;\n* Составьте список сценариев тестирования для каждой функции тестируемого приложения (AUT);\n* Создайте матрицу прослеживаемости и свяжите все сценарии с требованиями. Это позволит вам определить, сопоставлены ли все требования с тестовыми сценариями или нет;\n* Отправьте сценарии тестирования руководителю, чтобы он рассмотрел и оценил их. Даже сценарии тестирования дополнительно проверяются всеми заинтересованными сторонами.\n\nНе стоит путать Test scenario с **Test Suite** (набор тестов, тест-свит).\n\n_Набор тестов (test suite): Комплект тестовых наборов для исследуемого компонента или системы, в котором обычно постусловие одного теста используется в качестве предусловия для последующего. (ISTQB)_\n\nTest Suite - это некоторый набор формализованных Test case, объединенных между собой по общему логическому признаку, которые позволяют проверить одну из частей или вариантов сценария. Test Scenario представляет собой некий пользовательский сценарий по тестированию некой функциональности. Что-то, что пользователь может захотеть сделать с вашей системой, и вы хотите это проверить. Сценарий может иметь один или несколько Test Suite.\n\nИсточники:\n\n* [How To Create Test Scenarios With Examples](https://www.softwaretestingmaterial.com/test-scenarios/)\n* [Каких ответов я жду на собеседовании по тестированию](https://habr.com/ru/post/254209/)\n\nДоп. материал:\n\n* [Test Scenarios Registration Form](https://www.softwaretestingmaterial.com/test-scenarios-registration-form/)\n* [Test Scenarios of GMail](https://www.softwaretestingmaterial.com/test-scenarios-of-gmail/)\n* [Шаблон сценария](https://www.softwaretestingmaterial.com/wp-content/uploads/2021/11/Sample-Test-Scenario-Template.xlsx)\n\n## Тест-кейс (Test case)\n\n_Тестовый сценарий (test case): Набор входных значений, предусловий выполнения, ожидаемых результатов и постусловий выполнения, разработанный для определенной цели или тестового условия, таких как выполнения определенного пути программы или же для проверки соответствия определенному требованию. (IEEE 610)_\n\n**Test case** (тест-кейс, тестовый пример/случай) - это артефакт, описывающий совокупность шагов, конкретных условий и параметров, необходимых для проверки реализации тестируемой функции или ее части. Более строго - формализованное описание одной показательной проверки на соответствие требованиям прямым или косвенным.\n\n**Содержание тест-кейса**:\n\n* Идентификатор набора тестов (**Test Suite ID**): Идентификатор набора тестов, в которых входит этот кейс;\n* Идентификатор тестового кейса (**Test Case ID**): Идентификатор самого кейса;\n* Заголовок кейса (**Test Case Summary**): Краткое и емкое название проводимой проверки;\n* Связанное требование (**Related Requirement**): Идентификатор требования, к которому относится / отслеживается данный тестовый пример;\n* Предварительные условия (**Prerequisites**): Любые предпосылки или предварительные условия, которые должны быть выполнены перед выполнением теста;\n* Шаги выполнения (**Test Script / Procedure**): Шаги выполнения теста;\n* Тестовые данные (**Test Data**): Тестовые данные или ссылки на тестовые данные, которые должны использоваться при проведении теста;\n* Ожидаемый результат (**Expected Result**): результат, который мы ожидаем получить после выполнения шагов теста;\n* Статус пройден или не пройден (**Status**): Другие статусы могут быть «Не выполнено», если тестирование не проводится, и «Заблокировано», если тестирование заблокировано;\n* Заметки (**Remarks**): Любые комментарии к тесту или выполнению теста;\n* Создано (**Created By**): Имя автора тестового примера;\n* Дата создания (**Date of Creation**): Дата создания тестового примера (опционально модификации);\n* Выполнено (**Executed By**): Имя человека, выполнившего тест;\n* Дата выполнения (**Date of Execution**): Дата выполнения теста;\n* Тестовое окружение (**Test Environment**): оборудование / программное обеспечение / сеть, в которых выполнялся тест, т.е. все необходимые сведения об окружении, чтобы можно было воспроизвести полученный результат.\n\nВ иностранной литературе часто делят кейсы на две категории:\n\n* **Высокоуровневый тест-кейс** (high level test case или logical test case) - тест-кейс без конкретных входных данных и ожидаемых результатов. Как правило, ограничивается общими идеями и операциями, схож по своей сути с подробно описанным пунктом чек-листа. Достаточно часто встречается в интеграционном тестировании и системном тестировании, а также на уровне smoke. Может служить отправной точкой для проведения исследовательского тестирования или для создания низкоуровневых тест-кейсов.\n* **Низкоуровневый тест-кейс** (low level test case) - тест-кейс с конкретными входными данными и ожидаемыми результатами. Представляет собой «полностью готовый к выполнению» тест-кейс и вообще является наиболее классическим видом тест-кейсов. Начинающих тестировщиков чаще всего учат писать именно такие тесты, т.к. прописать все данные подробно - намного проще, чем понять, какой информацией можно пренебречь, при этом не снизив ценность тест-кейса.\n\n**Нужно ли вообще писать кейсы?** Ответ тот же, что и для любого документа - если написание кейсов решает определенную задачу и это обоснованно, то писать. Если вы один, не путаетесь в небольшом проекте, пользуетесь чек листами/mind map/.., можете и без TMS/test runs reports наглядно предоставлять актуальные сведения о протестированности/качестве заинтересованным лицам, то не писать.\n\n**Может ли быть несколько ожидаемых результатов?** Может, если это необходимо, но сразу после каждого шага.\n\n**Можно ли объединять позитивные и негативные тест-кейсы?** Позитивные можно, негативные нельзя, поскольку сложно будет понять, что именно влияет на результат.\n\nИсточники:\n\n* [Test Case](https://softwaretestingfundamentals.com/test-case/)\n\nДоп. материал:\n\n* [Тест-кейсы: полная лекция из ШНАТ](https://www.youtube.com/watch?v=0xuOOlhb5SQ)\n* [Составление тест-кейсов](https://www.youtube.com/watch?v=VG8hAQjxAkI)\n* [12 характеристик высокоэффективных тестов](https://software-testing.ru/library/testing/test-analysis/3495-12-traits-of-highly-effective-tests)\n* [Blog: Evaluating Test Cases, Checks, and Tools](https://www.developsense.com/blog/2021/04/evaluating-test-cases-checks-and-tools/)\n* [How to write Test Cases for a Login Page](https://www.softwaretestingmaterial.com/test-scenarios-login-page/)\n* [Как писать тест-кейсы: полное руководство](https://testengineer.ru/kak-pisat-test-kejsy-polnoe-rukovodstvo/)\n* [Основные методики создания тест-кейсов](https://testengineer.ru/osnovnye-metodiki-sozdaniya-test-kejsov/)\n* [Вложил в тест-кейс аттач? Поясни его!](https://okiseleva.blogspot.com/2018/11/blog-post\\_23.html)\n* [Результат в тест-кейсе - один или много?](https://okiseleva.blogspot.com/2020/05/blog-post\\_14.html)\n* [Правила написания предварительных шагов в тест-кейсах](https://okiseleva.blogspot.com/2019/12/blog-post\\_24.html)\n* [Название тест-кейса - как оформлять](https://okiseleva.blogspot.com/2020/12/blog-post\\_17.html)\n* [5 атрибутов хорошего тест-кейса. Правила написания тест-кейсов. Тест-кейсы в TestRail.](https://www.youtube.com/watch?v=S4UyfH\\_QNec)\n* Примеры: [раз](https://drive.google.com/uc?export=download\\&id=0ByI5-ZLwpo25eXFlcU5ZMTJsT28), [два](https://www.softwaretestingmaterial.com/wp-content/uploads/2016/02/Sample-Test-Case-Template-1.png)","date":"2022-05-13T00:00:00.000Z","path":"/ponyatie-test-case-i-test-suite/","icon":"fas fa-bug","image":"null","order":17,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Тестовая документация","path":"/tag/%D0%A2%D0%B5%D1%81%D1%82%D0%BE%D0%B2%D0%B0%D1%8F%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F/"}],"headings":[{"value":"Тестовый сценарий (Test scenario)","anchor":"#тестовый-сценарий-test-scenario"},{"value":"Тест-кейс (Test case)","anchor":"#тест-кейс-test-case"}]}},{"node":{"id":"525bc13378096b220c0514d29eceafe8","title":"Понятие Test Basis, Test Condition и Test Procedure","content":"\n## Базис тестирования (Test basis)\n\n_Базис тестирования (test basis): Документ, на основании которого определяются требования к компоненту или системе. Документация, на которой базируются тестовые сценарии. Если правка данного документа может быть осуществлена только в процессе формальной процедуры внесения изменения, то такой базис тестирования называется замороженным базисом тестирования. (ISTQB)_\n\n_Базис тестирования (test basis): Свод знаний, используемых в качестве базы проекта тестирования и контрольных примеров. Примечание - Базис тестирования может иметь форму документов, таких как спецификация требований, спецификация проекта или спецификация модуля, но может также представлять собой недокументированное понимание требуемого поведения. (ГОСТ 56920)_\n\n_Тестовое условие (test condition): Тестируемый аспект компонента или системы, такой как функция, транзакция, возможность, атрибут качества или структурный элемент, идентифицированные как базис тестирования. (ГОСТ 56920)_\n\nБазис тестирования определяется как источник информации или документ, необходимый для написания кейсов, а также как данные для начала анализа тестов. Им может выступать:\n\n* System Requirement Document (SRS);\n* Functional Design Specification;\n* Technical Design Specification;\n* User Manual;\n* Use Cases;\n* Source Code;\n* Business Requirement Document (BRD);\n* ?User story;\n* ?Vision;\n* ?Mockup;\n* ?Prototype.\n\nПо [ГОСТ Р 56920-2016/ISO/IEC/IEEE 29119-1:2013](https://docs.cntd.ru/document/1200134996) примерами базиса тестирования являются:\n\n* ожидания по формату и содержанию документации, обычно в форме стандартов и/или контрольных списков;\n* ожидания потребителя/пользователя по программной системе, новой или уже существующей, обычно спецификаций требований в письменной форме. Они могут быть представлены как функциональные/нефункциональные описания с употреблением глагола \"должен\", содержащие варианты использования, истории пользователя или другие формы неформально или формально записанные требования. Сюда могут быть включены нормативные требования, которые должны соблюдаться для определенных типов продуктов, например, для критичного к безопасности программного обеспечения для фармацевтической промышленности или для транспортных систем, таких как поезд или самолет;\n* опыт тестера или экспертов в другой предметной области по работе с функциями, необходимыми пользователям, или с историей продукта;\n* ожидания по прямым и/или косвенным интерфейсам между компонентами программной системы и/или по сосуществованию компонентов программной системы, обычно в форме проекта архитектуры в виде схем и/или формального письменного определения протокола;\n* ожидания по реализации компонентов программной системы в коде, обычно в форме детального проекта.\n\nБазис тестирования должен быть четко определен и должным образом структурирован, чтобы можно было легко определить условия тестирования, из которых можно получить тестовые примеры.\n\n_Тестовое условие (test condition): Объект или событие в компоненте или системе, которое должно быть проверено одним или несколькими тестовыми наборами. Например: функция, транзакция, параметр, атрибут качества или структурный элемент. (ISTQB)_\n\nТестовое условие - тестируемый аспект в test basis.\n\nИсточники:\n\n* [Test Basis in Software Testing](https://www.professionalqa.com/test-basis)\n","date":"2022-05-13T00:00:00.000Z","path":"/ponyatie-test-basis-test-condition-i-test-procedure/","icon":"fas fa-bug","image":"null","order":18,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Тестовая документация","path":"/tag/%D0%A2%D0%B5%D1%81%D1%82%D0%BE%D0%B2%D0%B0%D1%8F%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F/"}],"headings":[{"value":"Базис тестирования (Test basis)","anchor":"#базис-тестирования-test-basis"}]}},{"node":{"id":"08d46281fcdc109f9abd5020e824aa27","title":"Check-list, как представитель Experience-Based","content":"\n## Чек-лист (Check List)\n\nКонтрольный список/лист проверок - это список проверок, которые помогают тестировщику протестировать приложение или отдельные функции. Основная цель чеклиста состоит в том, чтобы вы не забыли проверить всё, что планировали. Классический чеклист состоит из:\n\n* 1-й столбец: заголовки тест-кейсов, структурированные по разделам/функционалу, или любые определенные составителем пункты;\n* 2-й столбец для отметки: пусто (еще не проверялось)/успех/ошибка;\n* 3-й столбец опционально под заметки.\n\nПримеры чек-листов из жизни:\n\n* Список проверок при покупке б/у ноутбука;\n* Список вещей/дел во время сборов в путешествие;\n* Список покупок в магазине.\n\nЧек-лист не обязательно является некоторой заменой тест-кейсов, это более глобальная сущность, в виде которой можно записывать множество планов и предстоящих действий: критерии начала и окончания тестирования, проверки перед началом каждой фазы, действия по их завершении, подспорье при исследовательском тестировании, накидать проверок с mind map функционала продукта, шеринг опыта с коллегами и т.п.\n\n**Разница между тест-кейсом и чек-листом**\n\nСила тест-кейса в том, что в нем все расписано очень детально, и с помощью тест-кейсов тестировать сможет даже человек, который ни разу не видел тестируемое им приложение. Но создание и поддержка кейсов требует времени, сил и является рутиной. Помимо прочего, очевидно, тест-кейс часто подразумевает только один конкретный тест, когда в чек-листе подразумевается целый перечень разных проверок.\n\nСила чек-листа в том, что он простой. Там нет глубокой детализации, это просто памятка. К тому же, он довольно наглядный с точки зрения отчетности. Минус в том, что другому человеку может быть сложно вникнуть в суть проверок без деталей и шагов. Чек-листы стали популярнее с приходом гибких моделей разработки, когда писать детальные кейсы может не быть времени и смысла, т.к. всё меняется слишком быстро, к тому же команда может быть небольшой и расписывать кейсы просто не для кого.\n\n**Traceability matrix** — Матрица соответствия требований — это двумерная таблица, содержащая соответсвие функциональных требований (functional requirements) продукта и подготовленных тестовых сценариев (test cases). В заголовках колонок таблицы расположены требования, а в заголовках строк — тестовые сценарии. На пересечении — отметка, означающая, что требование текущей колонки покрыто тестовым сценарием текущей строки.\nМатрица соответсвия требований используется QA-инженерами для валидации покрытия продукта тестами. МСТ является неотъемлемой частью тест-плана.\n\n\n\n**Чек-лист (check list)** — это документ, описывающий что должно быть протестировано. При этом чек-лист может быть абсолютно разного уровня детализации. На сколько детальным будет чек-лист зависит от требований к отчетности, уровня знания продукта сотрудниками и сложности продукта.\nКак правило, чек-лист содержит только действия (шаги), без ожидаемого результата. Чек-лист менее формализован чем тестовый сценарий. Его уместно использовать тогда, когда тестовые сценарии будут избыточны. Также чек-лист ассоциируются с гибкими подходами в тестировании.\n\n\n**Traceability matrix** — Матрица соответствия требований — это двумерная таблица, содержащая соответсвие функциональных требований (functional requirements) продукта и подготовленных тестовых сценариев (test cases). В заголовках колонок таблицы расположены требования, а в заголовках строк — тестовые сценарии. На пересечении — отметка, означающая, что требование текущей колонки покрыто тестовым сценарием текущей строки.\nМатрица соответсвия требований используется QA-инженерами для валидации покрытия продукта тестами. МСТ является неотъемлемой частью тест-плана.\n\nДоп. материал:\n\n* [Чек-листы: полная лекция](https://www.youtube.com/watch?v=UOhg7moss9U)\n* [Составление чек-листов](https://www.youtube.com/watch?v=b3E5SbU1rEM)\n* [Cheat-sheet](https://tmguru.ru/baza-znanij/upravlenie-testami/cheat-sheet/)\n* Примеры: [раз](https://strongqa.com/qa-portal/testing-docs-templates/checklist)\n","date":"2022-05-13T00:00:00.000Z","path":"/check-list-kak-predstavitel-experience-based/","icon":"fas fa-bug","image":"null","order":19,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Тестовая документация","path":"/tag/%D0%A2%D0%B5%D1%81%D1%82%D0%BE%D0%B2%D0%B0%D1%8F%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F/"}],"headings":[{"value":"Чек-лист (Check List)","anchor":"#чек-лист-check-list"}]}},{"node":{"id":"79251c07595cbe1ae401a08a7b1ac10f","title":"Bug Report","content":"\n## Баг-репорт (Defect/bug report)\n\n_Отчет о дефекте (defect report): Документ, содержащий отчет о любом недостатке в компоненте или системе, который может привести компонент или систему к невозможности выполнить требуемую функцию. (IEEE 829)_\n\n«Смысл написания отчета о проблеме (отчета об ошибке) состоит в том, чтобы исправить ошибки» - Джем Канер. Если тестировщик неправильно сообщает об ошибке, то программист, скорее всего, отклонит эту ошибку, заявив, что она невоспроизводима. Или потратит кучу лишнего времени на то, чтобы сделать вашу работу за вас. Едва ли такой тестировщик будет выгоден бизнесу, приятен коллегам и долго задержится на своем месте.\n\nГлавное при написании отчета - он должен быть сразу и однозначно понят читающим, а дефект однозначно воспроизведен по указанным шагам в указанном окружении.\n\n**Основные поля баг-репорта**:\n\n* Уникальный идентификатор (**ID**);\n* Описание (**Summary**): краткое, емкое и понятное описание ошибки;\n* Окружение (**Environment**): ссылка на билд/коммит/версия ПО и всего окружения;\n* Шаги воспроизведения (**Steps to reproduce**): полный перечень шагов для воспроизведения;\n* Ожидаемый результат (**Expected result**): какой результат должен был быть без ошибки;\n* Фактический результат (**Actual result**): какой результат получился на самом деле;\n* Вложения (**Attachments**): логи, скриншоты, видео - всё что необходимо для понимания ошибки.\n\n**Дополнительные**:\n\n* Предварительные условия (Prerequisites);\n* Тестовые данные (Test Data);\n* Серьезность дефекта (Defect Severity);\n* Комментарии (Remarks);\n* Проект (Project);\n* Продукт (Product);\n* Версия релиза (Release Version);\n* Модуль (Module);\n* Обнаружено в версии (Detected Build Version);\n* Вероятность возникновения дефекта (Defect Probability);\n* Приоритет дефекта (Defect Priority);\n* Автор отчета (Reported By);\n* Назначено на (Assigned To);\n* Статус (Status);\n* Fixed Build Version.\n\nВ случаях использования TMS поля будут настроены лидом/менеджером и в зависимости от размеров проекта могут быть пункты вроде milestone, epic, feature и т.п.\n\nПомимо прочего, баг-репорты могут создаваться не только тестировщиками, но и любыми членами команды, приходить от пользователей или техподдержки. Во втором случае необходимо будет воспроизвести ошибку, составить баг-репорт по всем правилам или дополнить присланный, затем провести ретроспективу на тему того, как ошибка попала в прод и как этого избежать в будущем.\n\n**Несколько ключевых моментов, которые следует учитывать при написании отчета об ошибке:**&#x20;\n\n* В одном отчете один баг;\n* Воспроизведите его 2-3 раза;\n* Убедитесь, что используете актуальную версию ПО и окружения;\n* Проверьте по поиску багтрекинговой системы наличие отчета о таком же дефекте;\n* Локализуйте ошибку, чтобы выяснить ее первопричину;\n* Напишите подробные шаги и полное окружение для воспроизведения ошибки;\n* Напишите хорошее summary дефекта по формуле “Что? Где? При каких условиях?” (3 Ws, WWW - What? Where? When?);\n* Следите за словами в процессе написания сообщения об ошибке, они не должны обвинять, оскорблять людей, содержать какую-либо точку зрения по поводу произошедшего. В общем, только факты по делу;\n* Проиллюстрируйте проблему с помощью правильных скриншотов, видео и логов;\n* Перед отправкой перепроверьте ваш отчет об ошибке. А потом еще раз;\n\nИсточники:\n\n* [How To Write Good Bug Report](https://www.softwaretestingmaterial.com/write-good-bug-report/)\n\nДоп. материал:\n\n* [Defect Probability](https://softwaretestingfundamentals.com/defect-probability/)\n* [Как правильно писать отчеты о дефектах на английском языке](https://www.youtube.com/watch?v=UEY5hGNPSvA)\n* [Не пишите в баге «Ввести 6,9»!](https://okiseleva.blogspot.com/2016/06/69.html)\n* [Воспроизводится ли баг по твоим шагам? Проверь!](https://okiseleva.blogspot.com/2019/07/blog-post\\_28.html)\n* [Нужна авторизация? Дай данные](https://okiseleva.blogspot.com/2019/09/blog-post\\_2.html)\n* [Эмоций в баге быть не должно!](https://okiseleva.blogspot.com/2019/01/blog-post\\_13.html)\n* [4 типичные ошибки оформления бага новичком](https://okiseleva.blogspot.com/2018/09/4.html)\n* [Шаблон бага](http://okiseleva.blogspot.com/2015/05/blog-post\\_25.html)\n* [Как воспроизвести баг](https://www.youtube.com/watch?v=1NLd5cvaBAI)\n* [О записи багов, или Найди кота](https://habr.com/ru/company/developersoft/blog/456132/)\n\n\n## Отчет о дефекте\n\n### Отчет о дефекте / Баг Репорт (Bug Report)\n\nДокументирование возникновения, характера и состояния дефекта. [[Глоссарий ISTQB](https://glossary.istqb.org/ru/search/%D0%BE%D1%82%D1%87%D0%B5%D1%82%20%D0%BE%20%D0%B4%D0%B5%D1%84%D0%B5%D0%BA%D1%82%D0%B5)]  \nВключает описание ситуации или последовательность действий приведшую к некорректной работе объекта тестирования, с указанием причин и ожидаемого результата.\n\n### Состав баг репорта\n\n| Поле                             | Описание                                                                                                   |\n| -------------                    | --------------- | \n| Заголовок (Summary)              | Короткое описание проблемы, явно указывающее на причину и тип ошибочной ситуации.                          |\n| Проект (Project)                 | Название тестируемого проекта                                                                              |\n| Компонент приложения (Component) | Название части или функции тестируемого продукта                                                           |\n| Номер версии (Version)           | Версия на которой была найдена ошибка                                                                      |\n| Критичность (Severity)           | Наиболее распространена пятиуровневая система градации серьезности дефекта: <br>• S1 Блокирующий (Blocker) <br>• S2 Критический (Critical) <br>• S3 Значительный (Major) <br>• S4 Незначительный (Minor) <br>• S5 Тривиальный (Trivial)                    |\n| Приоритет (Priority)             | Приоритет дефекта: <br>• P1 Высокий (High) <br>• P2 Средний (Medium) <br>• P3 Низкий (Low)                 |\n| Статус (Status)                  | _Статус бага._ <br>Зависит от используемой процедуры и жизненного цикла бага. Например: <br>• Новый <br>• Открыт <br>• Закрыт                                                                                                                             |\n| Автор (Author)                   | Создатель баг репорта                                                                                      |\n| Назначен на (Assigned To)        | Имя сотрудника, назначенного на решение проблемы                                                           |\n| Описание (Description)           | _Окружение (Environment):_ <br>Информация об окружении, на котором был найден баг.<br>_Операционная Система, Service Pack;_<br>для WEB тестирования — _имя и версия браузера и т.д._<hr>_Шаги воспроизведения (Steps to Reproduce):_<br>Шаги, по которым можно легко воспроизвести ситуацию, приведшую к ошибке.<hr>_Фактический Результат (Actual Result):_<br>Результат, полученный после прохождения шагов к воспроизведению.<hr>_Ожидаемый результат (Expected Result):_<br>Ожидаемый правильный результат                                                  |\n| Дополнения                       | _Прикрепленный файл (Attachment):_<br>Файл с логами, скриншот или любой другой документ, который может помочь прояснить причину ошибки или указать на способ решения проблемы                                                                                 |\n\n## Дополнительные ссылки\n\n### Как написать хороший баг репорт\n\nhttps://www.softwaretestinghelp.com/how-to-write-good-bug-report/\n\nhttps://testlio.com/blog/the-ideal-bug-report/\n\n https://testit.software/blog/post/kak-pravilno-oformit-bag-report","date":"2022-05-13T00:00:00.000Z","path":"/bug-report/","icon":"fas fa-bug","image":"null","order":20,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Тестовая документация","path":"/tag/%D0%A2%D0%B5%D1%81%D1%82%D0%BE%D0%B2%D0%B0%D1%8F%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F/"}],"headings":[{"value":"Баг-репорт (Defect/bug report)","anchor":"#баг-репорт-defectbug-report"},{"value":"Отчет о дефекте","anchor":"#отчет-о-дефекте"},{"value":"Дополнительные ссылки","anchor":"#дополнительные-ссылки"}]}},{"node":{"id":"5c82f53f9fe1265bd31c281a4074f11f","title":"Summary Report","content":"\n**Итоговый отчет о тестировании (test summary report)**\n\n_Итоговый отчет о тестировании (test summary report): Документ, подводящий итог задачам и результатам тестирования, также содержащий оценку соответствующих объектов тестирования относительно критериев выхода. (IEEE 829)_\n\nСводный отчет о тестировании содержит подробную информацию о тестировании, проведенном на протяжении жизненного цикла разработки программного обеспечения. Элементы в итоговом отчете по тестированию различаются от организации к организации, а также различаются для разных проектов. Информация в отчете об испытаниях основывается на аудитории отчета об испытаниях. Аудитория может быть клиентом, менеджментом, бизнес-аналитиком, разработчиками, членами команды тестирования, членами организации и т. д.\n","date":"2022-05-13T00:00:00.000Z","path":"/summary-report/","icon":"fas fa-bug","image":"null","order":21,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Тестовая документация","path":"/tag/%D0%A2%D0%B5%D1%81%D1%82%D0%BE%D0%B2%D0%B0%D1%8F%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F/"}],"headings":[]}},{"node":{"id":"b89d4c153e3db40cc409c03b1d775318","title":"Requirements Tracebility Matrix","content":"\n## Матрица трассируемости (RTM - Requirement Traceability Matrix)\n\n_Трассируемость (traceability): Способность идентифицировать связанные объекты в документации и программном обеспечении, например, требования со связанными с ними тестами. (ISTQB)_\n\n_Матрица трассируемости (traceability matrix): Двумерная таблица, описывающая связь двух сущностей (например, требований и тестовых сценариев). Таблица позволяет производить прямую и обратную трассировку от одной сущности к другой, обеспечивая таким образом возможность определения покрытия и оценки влияния предполагаемых изменений. (ISTQB)_\n\n![https://hsto.org/r/w1560/webt/5n/tw/4h/5ntw4hujujk0cmsxs6hchfajtoo.jpeg](https://hsto.org/r/w1560/webt/5n/tw/4h/5ntw4hujujk0cmsxs6hchfajtoo.jpeg)\n\nВ тестировании многое можно представить в виде удобной и наглядной матрицы (таблицы): Requirement Traceability Matrix, Test matrix, Compliance Matrix, Risk Matrix, RACI Matrix и т.д.\n\n**Матрица трассируемости** (Requirement Traceability Matrix AKA Traceability Matrix or Cross Reference Matrix) используется для документирования связей между требованиями и тест-кейсами по этим требованиям и наглядного отображения трассируемости в виде простой таблицы.\n\nМатрица трассируемости может служить одновременно в качестве матрицы покрытия. Наличие такой матрицы позволяет объективно оценить, какая часть продукта покрыта тестами, а какая нет.\n\n**Виды трассируемости**:\n\n* _Вертикальная трассируемость (vertical traceability): Отслеживание требований через уровни разработки к компонентам. (ISTQB)_\n* _Горизонтальная трассируемость (horizontal traceability): Трассировка требований к уровню тестирования по отношению к уровням документации (например, план тестирования, спецификация проектирования теста, спецификация тестовых сценариев и спецификация процедуры тестирования или автоматизированный сценарий тестирования). (ISTQB)_\n\nДругой источник:\n\n* Прямая трассируемость (Forward Traceability): гарантирует, что проект продвигается в желаемом направлении и что каждое требование тщательно проверяется;\n* Обратная трассируемость (Backward Traceability): гарантирует, что текущий разрабатываемый продукт находится на правильном пути. Это также помогает определить, что дополнительные неуказанные функции не добавляются и, таким образом, это не влияет на объем проекта;\n* Двунаправленная трассируемость (Bi-Directional Traceability = Forward + Backward): содержит ссылки от тестовых примеров к требованиям и наоборот. Это гарантирует, что все тестовые примеры можно отследить до требований, и каждое указанное требование содержит точные и действительные тестовые примеры для них.\n\nRTM актуальна на всех этапах программного проекта. Давайте разберемся с этим через водопадную модель SDLC:\n\n* RTM начинается вместе с началом фазы сбора требований (Requirements Gathering phase);\n* продолжается через управление требованиями (Requirements Management);\n* проектирование (Design);\n* разработку (Development);\n* тестирование (Testing);\n* внедрение (Implementation);\n* и поддержку (Support).\n\nПри прохождении всех этих этапов трассируемость требований поддерживается с помощью этого документа. После того, как требования были внесены в таблицу, детали дизайна для этих требований будут сопоставлены с требованиями. На основе этих деталей проекта будет производиться разработка программного обеспечения / модуля. Детали репозитория кода из SVN, TFS, Bitbucket, Github будут сопоставлены. Теперь вы знаете, где находится дизайн и код каждого требования. Это трассируемость. Отслеживайте каждое требование от начала до его конечного результата по мере его использования пользователем приложения! На этапе поддержки RTM будет чрезвычайно полезен для понимания и решения проблем, пройдя через все соответствующие детали функции / требования. Улучшение функции стало бы возможным благодаря отслеживанию и пониманию логики, дизайна и кода. С точки зрения владения RTM, RTM принадлежит менеджерам проекта или бизнес-аналитикам. В организациях CMMi команда TQM также будет проверять это как стандартный результат в проектах программного обеспечения.\n\n\\*Когда на основе требований к продукту составляются тест-сценарии и выполняется тестирование, это называется Requirement based testing.\n\nИсточники:\n\n* [How To Create Requirements Traceability Matrix (RTM): Example And Sample Template](https://www.softwaretestinghelp.com/requirements-traceability-matrix/)\n* [What is the difference between Test matrix and Traceability matrix?](https://www.quora.com/What-is-difference-between-Test-matrix-and-Traceability-matrix)\n\nДоп. материал:\n\n* [Матрица трассабилити](https://habr.com/ru/company/simbirsoft/blog/412677/)\n* [Reinventing the QA process](https://blog.picnic.nl/reinventing-the-qa-process-25854fee51f3)\n* [Traceability Matrix как инфраструктура общения QA и AQA спец-ов через призму Test Pyramid и ROI 2.0](https://www.youtube.com/watch?v=Vurf7G1JgG8)\n","date":"2022-05-13T00:00:00.000Z","path":"/requirements-tracebility-matrix/","icon":"fas fa-bug","image":"null","order":22,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Тестовая документация","path":"/tag/%D0%A2%D0%B5%D1%81%D1%82%D0%BE%D0%B2%D0%B0%D1%8F%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F/"}],"headings":[{"value":"Матрица трассируемости (RTM - Requirement Traceability Matrix)","anchor":"#матрица-трассируемости-rtm---requirement-traceability-matrix"}]}},{"node":{"id":"5a9cd1839c1d0471b52a3b5b962acf74","title":"Test Data Tables","content":"","date":"2022-05-13T00:00:00.000Z","path":"/test-data-tables/","icon":"fas fa-bug","image":"null","order":23,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Тестовая документация","path":"/tag/%D0%A2%D0%B5%D1%81%D1%82%D0%BE%D0%B2%D0%B0%D1%8F%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F/"}],"headings":[]}}]}},"relatedTag":null},"context":{}}