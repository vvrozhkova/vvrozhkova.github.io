{"hash":"7ce6058f470c3851afaa44882541a7f3d1089ffc","data":{"post":{"title":"Глава 1. Введение в объекты","content":"\n## Развитие абстракции\n\nВсе языки программирования построены на <u>**абстракции**</u>.\n\nРазличают тип и качество абстракции. Под словом \"Тип\" имеется ввиду ответ на вопрос \"Что конкретно мы абстрагируем?\"\n\nЯзык ассемблера - есть небольшая абстракция от компьютера, на базе которого он работает.\n\n\"Командные\" языки, созданные вслед за ним, такие как Fortran, BASIC и C представляют собой абстракции следующего уровня, но по-прежнему заставляли мыслить в контектсте структуры компьютера, а не решаемой задачи.\n\n### Моделирование машины\nНужно устанавливать связь между моделью машины(в \"пространстве решения\" - место, где реализуется решение, н-р компьютер) и моделью задачи(н-р прикладная область). В результате затрачиваются дополнительные усилия и появляются программы, которые трудно писать и тяжело поддерживать.\n\n### Моделирование решаемой задачи\n\n#### Моделирование окружающего мира\nЯзыки, подобные LISP и APL, имели особый подход к моделированию окружающего мира (\"Все задачи решаются списками\" или \"Алгоритмы решают все\") \n\n#### Проблемы как цепочки решений \nPROLOG трактует все проблемы как цепочки решений. \n\n#### Cистемs ограничений и манипуляциb с графическими конструкциями\nСуществовали языки для программирования, основанного на системе ограничений и специальные языки, в которых программирование осуществлялось посредством манипуляций с графическими конструкциями(областьприменения оказалась слишком узкой).\n\nКадый из подходов хорош, но не позволяет выйти из области решаемых задач. Использование их вне их сферы становится затруднительно.\n\n#### Объектный подход\nОбъектный подход предоставляет средства для представления задачи в ее пространстве. Имеет общий характер и не накладывает ограничений на тип решаемой проблемы. \n\nЭлементы пространства задачи и их представления в пространстве решения называются \"объектами\".\n\nПрограмма может адаптироваться к специфике задачи посредством создания новых типов объектов. Т.о. ООП описывает задачу в контексте самой задачи. \n\nСвязь с компьютером однако сохранилась т.к. каждый объект похож на компьютер - у него есть состояние и операции, которые он позвояет проводить, что сочетается с реальным миром - <i>**\"реальность, данная нам в объектах\"**</i>, обладающих характеристиками и поведением.\n\n### Характеристики академического подхода к ООП\n\n- Всё является объектом;<br>\n<i>Объект - это усовершенствованная переменная, он хранит данные, но к нему можно \"обращаться с запросами\", приказывая выполнить операции над собой. Любой компонент решаемой задачи может быть представлен в виде объекта.</i>\n\n- Программа - это набор объектов, указывающих друг другу, что делать, посредством сообщений;<br>\n<i>Чтобы обратиться с запросом, вы \"посылаете сообщение\". Сообщение - это запрос на вызов метода, принадлежащего определенному объекту.</i>\n\n- Каждый объект имеет собственную \"память\", состоящую из других объектов;<br>\n<i>Новый объект создается  путем встраивания в него уже существующих объектов, скрывая общую сложность за простотой отдельных объектов.</i>\n\n- У каждого объекта есть тип;<br>\n<i>Каждый объект является экземпляром класса, \"класс\" - синоним слова \"тип\". Отличие классов друг от друга - ответ на вопрос \"Какие сообщения можно объекту посылать?\"</i> \n\n- Все объекты определенного типа могут получать одинаковые сообщения;<br>\n<i>Объект типа \"круг\" также является объектом типа \"фигура\" и справедливо что \"круг\" также  может принимать сообщения для типа \"фигура\".</i>\n\n\n#### Описание объекта (Буч)\n<i>**Объект обладает состоянием, поведением и индивидуальностью.**</i>\n Объект может иметь внутренние данные(состояние объекта), методы(определяют поведение) и каждый объект можно уникальным образом отличить от другого объекта(н-р уникальным адресом в памяти)\n\n## Объект обладает интерфейсом\n\nПонятие типа можно сравнить с понятием Аристотеля о \"классе рыб и классе птиц\".\n\nКонцепция, что все объекты будучи уникальными являются частью класса объектов со сходными характеристиками и поведением, использована в <u>первом</u> объектно-ориентированном языке <i>Simula-67</i>, с введением слова class, которое вводило новый тип в прорамму.\n\n\n\n\n\n\n","description":"Глава 1. Введение в объекты","image":"null","category":null,"date":"04/02/2024","path":"/glava-1-vvedenie-v-obekty/","links":[{"title":"","items":[{"title":"Глава 1. Введение в объекты","link":"/glava-1-vvedenie-v-obekty/"},{"title":"Глава 5. Инициализация и завершение","link":"/glava-5-iniczializacziya-i-zavershenie/"}]}],"headings":[{"value":"Развитие абстракции","anchor":"#развитие-абстракции"},{"value":"Объект обладает интерфейсом","anchor":"#объект-обладает-интерфейсом"}],"subtitles":[{"depth":2,"value":"Развитие абстракции","anchor":"#развитие-абстракции"},{"depth":3,"value":"Моделирование машины","anchor":"#моделирование-машины"},{"depth":3,"value":"Моделирование решаемой задачи","anchor":"#моделирование-решаемой-задачи"},{"depth":4,"value":"Моделирование окружающего мира","anchor":"#моделирование-окружающего-мира"},{"depth":4,"value":"Проблемы как цепочки решений","anchor":"#проблемы-как-цепочки-решений"},{"depth":4,"value":"Cистемs ограничений и манипуляциb с графическими конструкциями","anchor":"#cистемs-ограничений-и-манипуляциb-с-графическими-конструкциями"},{"depth":4,"value":"Объектный подход","anchor":"#объектный-подход"},{"depth":3,"value":"Характеристики академического подхода к ООП","anchor":"#характеристики-академического-подхода-к-ооп"},{"depth":4,"value":"Описание объекта (Буч)","anchor":"#описание-объекта-буч"},{"depth":2,"value":"Объект обладает интерфейсом","anchor":"#объект-обладает-интерфейсом"}],"tags":[{"id":"java","title":"java","path":"/tag/java/"},{"id":"ооп","title":"ооп","path":"/tag/%D0%BE%D0%BE%D0%BF/"}]},"comments":{"edges":[]}},"context":{}}