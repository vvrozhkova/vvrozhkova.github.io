{"hash":"aa5a7ff62b399012289acf12f7cc1503ba4e22e5","data":{"post":{"title":"Виды тестирования по моменту выполнения (хронологии)","content":"\nНесмотря на многочисленные попытки создать единую хронологию тестирования, предпринятые многими авторами, по-прежнему можно смело утверждать, что общепринятого решения, которое в равной степени подходило бы для любой методологии управления проектами, любого отдельного проекта и любой его стадии, просто не существует.\n\nЕсли попытаться описать хронологию тестирования одной общей фразой, то можно сказать, что происходит постепенное наращивание сложности самих тест-кейсов и сложности логики их выбора.\n\n## Общая универсальная логика последовательности тестирования \nСостоит в том, чтобы начинать исследование каждой задачи с простых позитивных тест-кейсов, к которым постепенно добавлять негативные (но тоже достаточно простые). Лишь после того, как наиболее типичные ситуации покрыты простыми тест-кейсами, следует переходить к более сложным (опять же, начиная с позитивных). \n\nТакой подход — не догма, но к нему стоит прислушаться, т. к. углубление на начальных этапах в негативные (к тому же — сложные) тест-кейсы может привести к ситуации, в которой приложение отлично справляется с кучей неприятностей, но не работает на элементарных повседневных задачах.\n\nЕщё раз суть универсальной последовательности:\n1) простое позитивное тестирование; \n2) простое негативное тестирование; \n3) сложное позитивное тестирование; \n4) сложное негативное тестирование.\n\n## Последовательность тестирования, построенная по иерархии компонентов\n### Восходящее тестирование (Bottom-up testing)\nинкрементальный подход к интеграционному тестированию, в котором в первую очередь тестируются низкоуровневые компоненты, после чего процесс переходит на всё более и более высокоуровневые\nкомпоненты.\n\n### Нисходящее тестирование (Top-down testing)\nинкрементальный подход к интеграционному тестированию, в котором в первую очередь тестируются высокоуровневые компоненты, после чего процесс переходит на всё более и более низкоуровневые компоненты.\n\n### Гибридное тестирование (hybrid testing)\nкомбинация восходящего и нисходящего тестирования, позволяющая упростить и ускорить получение результатов оценки приложения.\n\nПоскольку термин «гибридное» является синонимом «комбинированное», под «гибридным тестированием» может пониматься практически любое сочетание двух и более видов, техник или подходов к тестированию. Всегда уточняйте, о гибриде чего именно идёт речь.\n\n## Последовательность тестирования, построенная по концентрации внимания на требованиях и их составляющих\n\n1) Тестирование требований, которое может варьироваться от беглой оценки в стиле «всё ли нам понятно» до весьма формальных подходов, в любом случае первично по отношению к тестированию того, как эти требования реализованы.\n\n2) Тестирование реализации функциональных составляющих требований логично прово- дить до тестирования реализации нефункциональных составляющих, т. к. если что-то просто не работает, то проверять производительность, безопасность, удобство и прочие нефункциональные составляющие бессмысленно, а чаще всего и вовсе невозможно.\n\n3) Тестирование реализации нефункциональных составляющих требований часто ста- новится логическим завершением проверки того, как реализовано то или иное требование.\n\n## Типичные общие сценарии \nиспользуются в том случае, когда не существует явных пред-посылок к реализации иной стратегии. Такие сценарии могут видоизменяться и комбинироваться (например, весь «типичный общий сценарий 1» можно повторять на всех шагах «типичного общего сценария 2»).\n\n- Типичный общий сценарий 1\n1) Дымовое тестирование.\n2) Тестирование критического пути.\n3) Расширенное тестирование.\n\n- Типичный общий сценарий 2:\n1) Модульное тестирование.\n2) Интеграционное тестирование. \n3) Системное тестирование.\n\n- Типичный общий сценарий 3:\n1) Альфа-тестирование. \n2) Бета-тестирование. \n3) Гамма-тестирование.","description":"Виды тестирования по моменту выполнения (хронологии)","image":"null","category":{"id":"manual","title":"manual","path":"/category/manual/"},"date":"16/05/2022","path":"/vidy-testirovaniya-po-momentu-vypolneniya-hronologii/","links":[{"title":"","items":[{"title":"10. Виды тестирования","link":"/vidy-testirovaniya/"},{"title":"Классификация по запуску кода на исполнение","link":"/vidy-testirovaniya-po-zapusku-koda-na-ispolnenie/"},{"title":"Классификация по доступу к коду и архитектуре приложения","link":"/vidy-testirovaniya-po-dostupu-k-kodu-i-arhitekture-prilozheniya/"},{"title":"Классификация по степени автоматизации","link":"/vidy-testirovaniya-po-stepeni-avtomatizaczii/"},{"title":"Классификация по уровню деталиции приложения (по уровню тестирования)","link":"//vidy-testirovaniya-po-urovnyu-detaliczii-prilozheniya-po-urovnyu-testirovaniya/"},{"title":"Классификация по (убыванию) степени важности тестируемых функций (по уровню функционального тестирования)","link":"/vidy-testirovaniya-po-ubyvaniyu-stepeni-vazhnosti-testiruemyh-funkczij-po-urovnyu-funkczionalnogo-testirovaniya/"},{"title":"Классификация по принципам работы с приложением","link":"/vidy-testirovaniya-po-princzipam-raboty-s-prilozheniem/)"},{"title":"Классифкация по природе приложения","link":"/vidy-testirovaniya-po-prirode-prilozheniya/"},{"title":"Классификация по фокусировке на уровне архитектуры приложения","link":"/vidy-testirovaniya-po-fokusirovke-na-urovne-arhitektury-prilozheniya/"},{"title":"Классификация по привлечению конечных пользователей","link":"/vidy-testirovaniya-po-privlecheniyu-konechnyh-polzovatelej/"},{"title":"Классификация по степени формализации","link":"/vidy-testirovaniya-po-stepeni-formalizaczii/"},{"title":"Классификация по целям и задачам","link":"/vidy-testirovaniya-po-czelyam-i-zadacham/"},{"title":"Классификация по техникам и подходам","link":"/vidy-testirovaniya-po-tehnikam-i-podhodam/"},{"title":"Классификация по моменту выполнения (хронологии)","link":"/vidy-testirovaniya-po-momentu-vypolneniya-hronologii/"},{"title":"Другие виды тестирования","link":"/drugie-vidy-testirovaniya/"}]}],"headings":[{"value":"Общая универсальная логика последовательности тестирования","anchor":"#общая-универсальная-логика-последовательности-тестирования"},{"value":"Последовательность тестирования, построенная по иерархии компонентов","anchor":"#последовательность-тестирования-построенная-по-иерархии-компонентов"},{"value":"Последовательность тестирования, построенная по концентрации внимания на требованиях и их составляющих","anchor":"#последовательность-тестирования-построенная-по-концентрации-внимания-на-требованиях-и-их-составляющих"},{"value":"Типичные общие сценарии","anchor":"#типичные-общие-сценарии"}],"subtitles":[{"depth":2,"value":"Общая универсальная логика последовательности тестирования","anchor":"#общая-универсальная-логика-последовательности-тестирования"},{"depth":2,"value":"Последовательность тестирования, построенная по иерархии компонентов","anchor":"#последовательность-тестирования-построенная-по-иерархии-компонентов"},{"depth":3,"value":"Восходящее тестирование (Bottom-up testing)","anchor":"#восходящее-тестирование-bottom-up-testing"},{"depth":3,"value":"Нисходящее тестирование (Top-down testing)","anchor":"#нисходящее-тестирование-top-down-testing"},{"depth":3,"value":"Гибридное тестирование (hybrid testing)","anchor":"#гибридное-тестирование-hybrid-testing"},{"depth":2,"value":"Последовательность тестирования, построенная по концентрации внимания на требованиях и их составляющих","anchor":"#последовательность-тестирования-построенная-по-концентрации-внимания-на-требованиях-и-их-составляющих"},{"depth":2,"value":"Типичные общие сценарии","anchor":"#типичные-общие-сценарии"}],"tags":[{"id":"Виды тестирования","title":"Виды тестирования","path":"/tag/%D0%92%D0%B8%D0%B4%D1%8B%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}]},"comments":{"edges":[]}},"context":{}}