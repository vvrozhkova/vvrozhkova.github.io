{"hash":"74078440e78cf7eff9cd218b18924da13af0a419","data":{"post":{"title":"Система сборки. Ant, Maven, Gradle","content":"\n## Что такое система сборки\n\nСистема сборки – это программное обеспечение, обеспечивающее автоматизацию сборки проекта. Конфигурационный файл для системы сборки описывается в текстовом виде. Как следствие, быстрее можно начать проект, за счет того, что что все типовые задачи заключаются в копировании уже готовых сниппетов. Это гораздо быстрее, более гибко, мобильно, и, главное, читаемо, чем вводить то же самое например, через UI диалоги IDE. Ну и в промышленных проектах это более удобно.\n\n\nИнструменты сборки могут делать\n- компиляцию кода - поддерживают определенный компилятор или несколько\n- запуск тестов и определение покрытия\n- статический анализ\n- сборка архивов с бинарными файлами, исходными кодами, документацией\n- построение отчетов\n- скачивание и обеспечение доступа нужных зависимостей\n\nПольза от инструмента сборки\n- Уменьшение числа рутинных ошибок\n- уменьшение времени сборки проекта\n- можно хранить историю сборок и анализировать ошибки\n- уменьшение затрат на разработку и улучшение качества\n\n## Нет автоматизации сборки\n\nИзначально, когда не было систем сборки, то было неудобно было работать с большим числом файлов, была платформозависимость, не поддерживалась условная логика. \n\n```java\n$ javac MyClass.java\n```\n\n## Shell скрипт\n\nС таким подходом можно большие проекты легко собирать можно использовать условную логику можно разделить сборку на стадии:\nclean.sh, compile.sh, test.sh\n\nНо все также такой способ остается платформозависимым и нет единого подхода к описанию сборки.\n```sh\nif test ! -e .nuget; then\n    mkdir .nuget\n    cp $cachedir/nuget.exe .nuget/nuget.exe\nfi\n```\n\n## Make (1977 год)\n\nТакая утилита появилась под Unix. Make использует специальный формат для описания билда и называется Make-file.\nТипичный Make-file содержит название стадий, зависимость стадий. Но основное содержание это такие же команды операционной системы. \nКоманды выполняются запуском make + название стадии: make install, make noopt и т.д.\n\n```sh\nnoopt:\n    $(MAKE) OPTIMIZATION=\"-O0\"\n\nvalgrind:\n    $(MAKE) OPTIMIZATION=\"-O0\" MALLOC=\"libc\"\n\nsrc/help.h:\n    @../utils/generate-command-help.rb > help.h\n\ninstall: all\n    @mkdir -p $(INSTALL_BIN)\n    $(REDIS_INSTALL) $(REDIS_SERVER_NAME) $(INSTALL_BIN)\n    $(REDIS_INSTALL) $(REDIS_BENCHMARK_NAME) $(INSTALL_BIN)\n    $(REDIS_INSTALL) $(REDIS_CLI_NAME) $(INSTALL_BIN)\n```\n\nПреимущества:\n- определяет единый формат сборки\n\nНедостатки:\n- платформозависимый так как внутри также находятся команды операционной системы\n- в makefile используется табуляция и она не видна в текстовых файлах если в такой файл вставить пробел то такой файл становится неправильным и make не может с ним работать\n- нет поддержки нюансов определенного языка: задач, параметров, плагинов)\nmake работает для любого языка\n\n## Apache Ant (2000 год)\n\nПервый инструмент сборки разработанный на java и для java. Имеет конфигурационный файл формата build.xml.\n\nСодержит описание названий стадий, зависимости стадий и могут содержать java - специфичные вещи. Например, как собирать java  код (javac), classpath и т.д.\n\n```java\n<target name=\"compile\" depends=\"init\" description=\"Compile the source\">\n    <javac srcdir=\"${src.main}\" destdir=\"${build.compile}\" classpathref=\"lib.path.id\" includeantruntime=\"true\"/>\n</target>\n\n<target name=\"test-compile\" depends=\"compile\" description=\"Compile tests source\">\n    <javac srcdir=\"${src.test}\" destdir=\"${build.test-compile}\" classpathref=\"lib.path.id\" includeantruntime=\"true\">\n        <classpath>\n            <pathelement location=\"${build.compile}\"/>\n        </classpath>\n    </javac>\n</target>\n```\n\nЗапускается командой:\n```\n$ ant clean compile\n```\n\nПреимущества:\n- поддержка java-специфичных задач\n- переносима между платформами\n- это первая сисетма которая позвоила писать под нее расширения плагины\n- позволяет запускать параметризованные билды\nможно хранить в отдельной секции некоторые параметры; например, версии используемых библиотек и потом замена версии будет означать просто замену библиотеки у вас в билде\n\nНедостатки:\n- нет конвенций версионирования кода\nможно версионировать продукт, как заблагорасудится\n- нет конвенций по расположению кода\nоткрыв проект на ant'e вы можете ожидать, что код будет где угодно;\nобычно их кладут в одну и туже папку, но это не гарантируется;\n- нет автоматического управления зависимостями (их кладут в lib/)\nесли у вас используется какая-нибудь библиотека, то она будет лежать прямо в проекте в папке lib в виде jar файлов, а в большом проекте таких файлов библиотек будет много\n- произвольный набор целей(нет жизненного цикла)\nцели можно называть как угодно и приходится разбираться какая цель что делает\n- императивный стиль описания билда\nбилд состоит из последовательности действий, которые нужно выполнить чтобы собрать проект\nэто плохо\n- ant не поддерживает junit 4\n\n## Apache Ivy (2004 год)\nЭта библиотека решает проблему Ant - авоматическое управление зависимостями. Конфигурационный файл имеет формат ivy.xml. Написан на Java.\n\n```xml\n<ivy-module version=\"1.0\">\n    <info organisation=\"ru.yandex.qatools.allure\" module=\"allure-testng-ant\"/>\n    <dependencies>\n        <dependency org=\"ru.yandex.qatools.allure\" name=\"allure-testng-adaptor\" rev=\"1.4.0\"/>\n        <dependency org=\"org.aspectj\" name=\"aspectjweaver\" rev=\"1.7.4\"/>\n    </dependencies>\n</ivy-module>\n```\n\nМожно в конфигурационном файле указать название зависимости: организация, имя, версия и все библиотеки скачаются с интернета.\n\n## Apache Maven (2004 год)\nИмеет конфигурационный файл pom.xml (Project Object Model). Написан на Java.\n\nЗапускается подобно Ant'у командой:\n```\n$ mvn clean compile\n```\n\n```xml\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-compiler-plugin</artifactId>\n    <version>3.0</version>\n    <configuration>\n        <source>${compiler.version}</source>\n        <target>${compiler.version}</target>\n    </configuration>\n</plugin>\n```\n\nПреимущества:\n- Конвенции по расположению кода, тестов, ресурсов\nмы точно знаем где и в какой директории лежат исходные коды, тесты и т.д.\n- четкий жизненый цикл: цели предопределены\nесть цель для компиляции тестирования отчетов а можно и свои цели создавать\n- имеет четкий способ чтобы поделиться кодом с другими - удаленные репозитории зависимостей\nэто сервера на который закачиваются готовые пакеты с скомпилированным кодом, с исходными кодами, документацией и другие участники разработки могут их оттуда забрать\n- понятный механизм хранения зависимостей - локальный репозиторий\nэто каталог у вас на файловой системе в который сохраняются копии скомпилированных бинарных файлов, документации и т.д. - копия удаленного репозитория\n- правила версионирования кода\nМавен вводит понятия релизов и snapshot'ов и как версии должны меняться одна от другой\n- поддерживает многомодульные проекты\nможно разбивать большой проект на небольшие кусочки/модули которые могут собираться по отдельности и распространяться, передаваться версионироваться по отдельности\n- описывает подход декларативно \nговорит не в какой последовательности мы должны выполнить шаги а то что мы хотим получить на выходе\n- модульная структура(поддержка плагинов)\nдаже простые действия делают плагины: есть плагин для компиляции, плагин для тестирования и т.д.\n\n## Gradle (2009 год)\nНаписан на Groovy. Использует в качестве файлов конфигурации файлы использующие DSL(Domain Specific Language) на Groovy. \nФайл называется build.gradle. Команда для запуска аналогична Ant, Maven:\n\n```\n$ gradle clean compile\n```\nВозможности Gradle:\n- поддерживает основные воможности Maven;\n- инкрементальная компиляция\nумеет собирать только те исходные коды которые изменились\n- использует теже удаленные репозитории как и мавен\n- эмулирует жизненный цикл мавена, но можно задавать и свои цели\n- поддерживает плагины, но они не совместимы с Maven \n","description":"Система сборки. Ant, Maven, Gradle","image":"null","category":{"id":"automation","title":"automation","path":"/category/automation/"},"date":"16/06/2022","path":"/sistema-sborki-ant-maven-gradle/","links":[{"title":"","items":[{"title":"Моя подготовка","link":"/moya-podgotovka/"},{"title":"Курс по автоматизации тестирования Java","link":"/kurs-po-avtomatizaczii-testirovaniya-java/"},{"title":"Профессионально работаем с IntelliJ IDEA","link":"/professionalno-rabotaem-s-intelli-j-idea/"},{"title":"Что такое Selenium?","link":"/chto-takoe-selenium/"},{"title":"Инфраструктура проекта автотестирования","link":"/infrastruktura-proekta-avtotestirovaniya/"},{"title":"Основы Java","link":"/osnovy-java/"},{"title":"Система сборки. Ant, Maven, Gradle","link":"/sistema-sborki-ant-maven-gradle/"}]}],"headings":[{"value":"Что такое система сборки","anchor":"#что-такое-система-сборки"},{"value":"Нет автоматизации сборки","anchor":"#нет-автоматизации-сборки"},{"value":"Shell скрипт","anchor":"#shell-скрипт"},{"value":"Make (1977 год)","anchor":"#make-1977-год"},{"value":"Apache Ant (2000 год)","anchor":"#apache-ant-2000-год"},{"value":"Apache Ivy (2004 год)","anchor":"#apache-ivy-2004-год"},{"value":"Apache Maven (2004 год)","anchor":"#apache-maven-2004-год"},{"value":"Gradle (2009 год)","anchor":"#gradle-2009-год"}],"subtitles":[{"depth":2,"value":"Что такое система сборки","anchor":"#что-такое-система-сборки"},{"depth":2,"value":"Нет автоматизации сборки","anchor":"#нет-автоматизации-сборки"},{"depth":2,"value":"Shell скрипт","anchor":"#shell-скрипт"},{"depth":2,"value":"Make (1977 год)","anchor":"#make-1977-год"},{"depth":2,"value":"Apache Ant (2000 год)","anchor":"#apache-ant-2000-год"},{"depth":2,"value":"Apache Ivy (2004 год)","anchor":"#apache-ivy-2004-год"},{"depth":2,"value":"Apache Maven (2004 год)","anchor":"#apache-maven-2004-год"},{"depth":2,"value":"Gradle (2009 год)","anchor":"#gradle-2009-год"}],"tags":[{"id":"Автоматизация тестирования","title":"Автоматизация тестирования","path":"/tag/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}]},"comments":{"edges":[]}},"context":{}}