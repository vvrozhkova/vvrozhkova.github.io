{"hash":"7ce6058f470c3851afaa44882541a7f3d1089ffc","data":{"category":{"title":"web","path":"/category/web/","belongsTo":{"totalCount":5,"pageInfo":{"totalPages":1,"currentPage":1},"edges":[{"node":{"id":"c4bec020c5b0f9925458ae2fb597657f","title":"Понимание DOM модели","content":"\nDOM — это объектная модель документа, которую браузер создает в памяти компьютера на основании HTML-кода, полученного им от сервера. Иными словами, это представление HTML-документа в виде дерева тегов.\n\nБраузер запрашивает у сервера веб-страницу и получает в ответ ее исходный HTML-код. Браузеру такой код сначала нужно разобрать на элементы. В процессе разбора он строит на основе HTML-кода DOM-дерево. После этого браузер отрисовывает страницу, используя созданное им DOM-дерево, а не исходный HTML-документ.\n\nТакое дерево нужно для правильного отображения сайта и внесения изменений на страницах с помощью JavaScript. JavaScript — это «живой» язык, он может изменять страницу в реальном времени уже после того, как она «пришла» с сервера в браузер. Этим JavaScript принципиально отличается от PHP, который компилирует страницу и только потом посылает в браузер уже готовый HTML-код.\n\n![Схема отображения страницы в браузере](https://blog.skillfactory.ru/wp-content/uploads/2021/09/image6-1.png)\n\nДля чтения и изменения DOM браузеры предоставляют DOM API (программный интерфейс). DOM API — это набор различных объектов, которые разработчик использует для чтения и изменения DOM с помощью JavaScript.\n\n### Из чего состоит HTML-код страницы\nСтраница на HTML состоит из тегов, вложенных в друг друга. Самый общий тег — это HTML. В него вкладываются два дочерних тега head и body.\n\nТег head используется для подключения информации, которая не будет отображаться непосредственно на странице, но будет использоваться для подключения важных файлов. Тут бывает, например, подключение одного или нескольких CSS-файлов, подключенные шрифты, название сайта, язык, кодировка, скрипты, которые должны выполняться в первую очередь, иконка сайта или базовый фон.\n\nВ body находится значимое содержимое. Обычно в body выделяют три части: шапка сайта, основное содержимое и подвал. В шапке обычно содержится верхнее меню сайта, за это отвечает тег header. Для содержимого нет определенного тега, но обычно используется section. Для подвала используется footer, там обычно содержатся контактная информация, ссылки на ключевые страницы сайта и копирайт. Теги header и footer должны быть единственными на странице, а section может бесконечно повторяться.\n\n## Как строится DOM-дерево\nДля описания структуры DOM потребуются термины: корневой, родительские и дочерние элементы. Корневой элемент находится в основании всей структуры и не имеет родительского элемента. Дочерние элементы не просто находятся внутри родительских, но и наследуют различные свойства от них. На картинке ниже изображено DOM-дерево.\n\n![DOM-дерево](https://blog.skillfactory.ru/wp-content/uploads/2021/09/image4-1.png)\n\nКорневой элемент здесь html — без него страница не будет скомпилирована. Он не имеет родительского (вышестоящего) элемента, но имеет два наследника или дочерних элемента — head и body.\n\nПо отношению друг к другу элементы head и body являются сиблингами (братьями и сестрами). В каждый из них можно вложить еще много дочерних элементов. Например, в head обычно находятся link, meta, script или title.\n\nВсе эти теги не являются уникальными, и в одном документе может быть по несколько экземпляров каждого из них.\n\nВ body могут находиться разнообразные элементы. Например, в родительском body — дочерний элемент header, в элементе header — дочерний элемент section, в родительском section — дочерний div, в div — элемент h3, и наконец, в h3 — элемент span. В этом случае span не имеет дочерних элементов, но их можно добавить в любой момент.\n\nМожно описать это так:\n\n![Графическое представление элементов HTML-страницы](https://blog.skillfactory.ru/wp-content/uploads/2021/09/image5-1.png)\n\nА если бы система была бы более разветвленная и с большим количеством вложений — так:\n\n![Графическое представление элементов HTML-страницы](https://blog.skillfactory.ru/wp-content/uploads/2021/09/image1-2.png)\n\nНа схеме изображено довольно большое DOM-дерево, и его сложно воспринимать из-за его размера. Для удобства часто используется система многоуровневых списков. Например, предыдущее дерево можно преобразовать в такой список:\n![Представление элементов HTML-страницы в виде списка](https://blog.skillfactory.ru/wp-content/uploads/2021/09/image2-2.png)\n\nЕсли преобразовать дерево на предыдущем рисунке в код, то получится так:\n\n```js\n<html>\n  <head>\n    <link>\n    <link>\n    <link>\n    <meta>\n    <meta>\n    <title></title>\n  </head>\n  <body>\n    <header>\n      <div>\n        <h3></h3>\n      </div>\n      <div>\n        <h4>\n          <span></span>\n        </h4>\n      </div>\n      <div>\n        <p></p>\n      </div>\n      <div>\n        <img>\n      </div>\n    </header>\n    <section>\n      <div>\n        <h3></h3>\n        <p>\n          <span></span>\n        </p>\n      </div>\n      <div>\n        <p>\n          <span></span>\n        </p>\n        <img>\n        <p></p>\n        <div>\n          <img>\n          <iframe></iframe>\n        </div>\n      </div>\n    </section>\n    <footer>\n      <div>\n        <img>\n        <p></p>\n      </div>\n      <div>\n        <h6></h6>\n      </div>\n    </footer>\n  </body>\n</html>\n```\n\nКак видно из кода, некоторые теги должны закрываться, а некоторые — нет.\n\nЭту схему важно понимать, чтобы разобраться с темой наследования свойств. Элементы могут наследовать не все, но многие свойства своих родителей — например, цвет, шрифт, видимость и т.д.\n\nТаким образом, чтобы задать стиль шрифта на всей странице, потребуется не прописывать цвет для каждого элемента, а задать его только для body. А чтобы изменить наследуемое свойство у дочернего элемента, нужно прописать только ему новые свойства. Наследование удобно для создания единообразной страницы.\n\n### Зачем нужно знать, как строится DOM-дерево?\nБольшинство действий при работе с DOM сводится к поиску нужных элементов. Не понимая, как строится DOM-дерево, и не зная, каковы связи между узлами, найти нужный элемент будет сложно.\n\n### Как просмотреть DOM-дерево?\nВ любом браузере есть инструменты, с помощью которых можно отобразить DOM-дерево. Если выбрать какой-либо объект в структуре, он будет подсвечен на странице. При этом для него будут выведены свойства CSS, которые работают сейчас, и те, которые не задействованы.\n\nЧтобы посмотреть DOM в браузере, нужно зайти в инструменты разработчика. В большинстве браузеров для этого надо нажать на F12 — тогда откроется дополнительная панель с вкладками и зонами.\n\n![Просмотр DOM-дерева в браузере](https://blog.skillfactory.ru/wp-content/uploads/2021/09/image3-2.png)\n\nНа изображении выше во вкладке Elements представлена структура DOM в виде многоуровневого вложенного списка. Каждый элемент можно открыть и посмотреть, что у него внутри, его расположение на странице и размеры этого элемента со всеми отступами.\n\nТакже там находятся другие инструменты — например консоль, где выводится информация об ошибках и куда можно ввести необходимые данные, например для отладки (исправления ошибок в коде).\n\nПанель ресурсов отображает подключенные ресурсы — это шрифты, изображения, JavaScript- и CSS-файлы.\n\n\nПо Web могут спросить что-то типа такого: «Что происходит, когда пользователь набирает в браузере адрес сайта?». Можно раскрыть, как браузер начинает искать сервер, как отправляет запрос к DNS-серверам, как попакетно устанавливается соединение с сервером, процесс обработки запросов и так далее.\n\nКроме того, могут спросить про коды состояний HTTP (Informational/Success/Redirection/Client Error/Server Error) и методы HTTP (GET/POST/PUT/DELETE).\n\nкак функционирует веб-приложение: понимать устройство HTTP-протокола, разбираться в связке HTML/CSS/JS.","date":"2022-05-26T00:00:00.000Z","icon":"fas fa-bug","image":"null","path":"/ponimanie-dom-modeli/","order":null,"category":{"title":"web","path":"/category/web/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"Понимание DOM модели","path":"/tag/%D0%9F%D0%BE%D0%BD%D0%B8%D0%BC%D0%B0%D0%BD%D0%B8%D0%B5%20DOM%20%D0%BC%D0%BE%D0%B4%D0%B5%D0%BB%D0%B8/"}],"headings":[{"value":"Как строится DOM-дерево","anchor":"#как-строится-dom-дерево"}]}},{"node":{"id":"6226615cbb0917b5bbc9a6f0a2891bad","title":"Какие веб-элементы бывают","content":"\nЭлемент HTML — это основная структурная единица веб-страницы, написанная на языке HTML. Данный элемент вы можете увидеть в исходном коде для всех веб-страниц после задания типа документа на первой строке на странице. DOCTYPE определяет, какую версию (X) HTML эта страница использует. Элементы страницы находятся между открывающим тегом `<HTML>` и закрывающим `</HTML>`. Элемент `<html>` называется корневым элементом\n\n**Основные элементы**\n\n### Гиперссылки\n`<a href=\"filename\" target=\"_self\">название ссылки</a>`\nАтрибут href задаёт значение адреса документа, на который указывает ссылка.\n\n### Якорь\nТот же элемент используется для создания так называемых «якорей» (anchor), которые могут потом использоваться в гиперссылках, направленных на какой-то определённый элемент страницы. \n\n### Текстовые блоки\n`<H1> … </H1>, <H2> … </H2>, … ,<H6> … </H6>` — заголовки 1, 2, … 6 уровня. Используются для выделения частей текста (заголовок 1 — самый крупный, 6 — самый мелкий).\n`<P>` — новый абзац. Можно в конце абзаца поставить </P>, но это не обязательно.\n`<BR>` — новая строка. Этот тег не закрывается (то есть не существует тега </BR>)\n`<HR>` — горизонтальная линия\n`<BLOCKQUOTE> … </BLOCKQUOTE>`  — цитата. Обычно текст сдвигается вправо.\n`<PRE> … </PRE>`  — режим preview (preformatted text). Пробельные символы остаются там, где они есть в оригинальном документе (в других тегах игнорируются). Внутри могут обрабатываться внутристроковые теги кроме img, object, big, small, sup и sub.\n`<DIV> … </DIV>`  — блок (обычно используется для применения стилей CSS)\n`<SPAN> … </SPAN>`  — строка (обычно используется для применения стилей CSS)\n\n### Форматирование текста\n`<EM> … </EM>`  — логическое ударение (обычно отображается курсивным шрифтом)\n`<STRONG> … </STRONG>`  — усиленное логическое ударение (обычно отображается жирным шрифтом)\n`<I> … </I>`  — выделение текста курсивом\n`<B> … </B>` — выделение текста жирным шрифтом\n`<U> … </U>`  — подчёркивание текста\n`<S> … </S>` (или `<STRIKE> … </STRIKE>` )— зачёркивание текста\n`<BIG> … </BIG>`  — увеличение шрифта\n`<SMALL> … </SMALL>`  — уменьшение шрифта\n`<BLINK> … </BLINK>`  — мигающий текст. Внимание! Этот тег не работает в браузере Internet Explorer версий 5 и ниже без применения JavaScript\n`<MARQUEE> … </MARQUEE>`  — сдвигающийся по экрану текст.\n`<SUB> … </SUB>`  — подстрочный текст. Например, H<SUB>2</SUB>O создаст текст H2O.\n`<SUP> … </SUP>`  — надстрочный текст. Например, E=mc<SUP>2</SUP> создаст текст E=mc2.\n`<FONT параметры> … </FONT>`  — задание параметров шрифта. \n\n### Списки\n\n`<UL><LI>` - неупорядоченный список\n`<OL><LI>` - упорядоченный список\n`<DL><DT><DD>` - список определений\n\n### Объекты\nEMBED — вставка различных объектов: не-HTML документов и media-файлов\nAPPLET — вставка Java-апплетов\nSCRIPT — вставка скриптов.\nIMG — вставка изображения. Этот тег не закрывается.\n\n### Карта изображений\n`<MAP><AREA></MAP>` — создание карты изображений позволяющей хранить в одном изображении несколько ссылок.\n\n### Таблицы\nTABLE — создание таблицы. Параметры тега:\nCAPTION — заголовок таблицы (этот тег необязателен)\nTR — строка таблицы\nTH — заголовок столбца таблицы (этот тег необязателен)\nTD — ячейка таблицы\n\n### Формы\nСоздание форм в HTML является довольно сложным делом. Здесь приводятся только названия основных тегов.\n\nFORM — создание формы\nINPUT — элемент ввода (может иметь разные функции — от ввода текста до отправки формы)\nTEXTAREA — текстовая область (многострочное поле для ввода текста)\nSELECT — список (обычно в виде выпадающего меню)\nOPTION — пункт списка\n","date":"2022-05-26T00:00:00.000Z","icon":"fas fa-bug","image":"null","path":"/kakie-veb-elementy-byvayut/","order":null,"category":{"title":"web","path":"/category/web/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"веб-элементы","path":"/tag/%D0%B2%D0%B5%D0%B1-%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%D1%8B/"}],"headings":[]}},{"node":{"id":"a43913d00e0ffd7929efafa9f7fbfb3f","title":"UI/UX и Pixel Perfect","content":"\nhttps://bugza.info/testirovanie-ui-i-verstki/\n\n## UI тестирование\n\nUI (user interface — пользовательский интерфейс) — является точкой взаимодействия человека и продукта. Дизайн кнопок, полей ввода и т.д. — это место, где пользователь взаимодействует с системой. Таким образом, Вы можете сравнить UI с рулем, педалями и приборной панелью автомобиля. Они используются для управления автомобилем так же, как приложение использует UI (пользовательский интерфейс) для управления системой. Короче говоря, дизайн пользовательского интерфейса (UI) — это дизайн точек взаимодействия, через которые пользователь может взаимодействовать с системой.\n\nТестирование интерфейса пользователя осуществляется вместе со следующими видами тестирования (UI):\n- Тестирование на соответствие стандартам графических интерфейсов.\n- Тестирование с различными разрешениями экрана.\n- Тестирование кроссбраузерности или совместимости с разными интернет браузерами и их версиями.\n- Тестирование локализованных версий: точность перевода (мультиязычность, мультивалютность), проверка длины названий элементов интерфейса и т.д..\n- Тестирование графического интерфейса пользователя на целевых устройствах (смартфоны, кпп, планшеты).\n\n### Основные элементы графического интерфейса:\n- Окно (окно браузера, диалоговое окно, модальное окно, плавающее окно).\n- Меню (главное, всплывающее, контекстное, системное).\n- Виджеты/элементы управления/контролы (аккордеон, кнопка, радио-кнопка, чек-бокс, значок (иконка), список, панель инструментов, дерево, полоса прокрутки, ползунок, строка состояния, тултип (подсказка) и др.).\n- Вкладка.\n\nЭлементы взаимодействия: курсор мыши, текстовый курсор, поинтер (“ладошка”), курсор перетаскивания и др.\n\n### Основные проверки при тестировании UI:\n- Расположение, размер, цвет, ширина, длина элементов; возможность ввода букв или цифр.\n- Реализуется ли функционал приложения с помощью графических элементов.\n- размещение всех сообщений об ошибках, уведомленией (а также шрифт, цвет, размер, расположение и орфография текста).\n- Читабелен ли использованный шрифт.\n- Переходит ли курсор из текстового в поинтер при наведении на активные элементы, выделяются ли выбранные элементы.\n- Выравнивание текста и форм.\n- Качество изображений.\n- Проверить расположение и отображение всех элементов при различных разрешениях экрана, а также при изменении размера окна браузера (проверить, появляется ли скролл).\n- Проверить текст на орфографические, пунктуационные ошибки.\n- Появляются ли тултипы (если есть необходимость).\n- Унификация дизайна (цвета, шрифты, текст сообщений, названия кнопок и т.д.).\n\n## Тестирование Pixel Perfect \nПроверка точного (пиксель в пикcель) соответствия сверстанного HTML-шаблона оригиналу (PSD-макету). Другими словами, если наложить “картинку” сверстанного HTML-шаблона на картинку оригинального PSD-макета, то обе картинки должны совпадать. Совместиться должны все элементы картинок: текст, изображения, графические элементы.\n\n## UX тестирование\n\nПри проектировке качественного UI уделяется внимание не только внешнему виду интерфейса, но и его логической структуре, чтобы пользователь мог без лишних усилий, быстро и легко взаимодействовать с ним и добиваться необходимого результата. Но, чтобы четко понимать, как создать качественный пользовательский интерфейс для конкретного продукта, необходимо изучать поведение, эмоции и реакцию пользователей при взаимодействии с данным продуктом, проводить тестирование, собирать данные. Человек, взаимодействуя с какой-либо системой, испытывает ощущения и реагирует определенным образом в процессе ее использования. Это называется опытом взаимодействия, или UX.\n\nUser Experience (пользовательский опыт)— ощущение, испытываемое пользователем во время использования цифрового продукта, в то время как User interface — это инструмент, позволяющий осуществлять интеракцию «пользователь — веб-ресурс». UX — это то, что чувствует и запоминает пользователь в результате использования программы, приложения или сайта. UX учитывается при разработке UI, создании информационной архитектуры, юзабилити тестировании. Определив целевую аудиторию и характеристики основного пользователя можно составить список требований к проекту.\n\nДля простоты усвоения разницы между 2 этими понятиями рассмотрим наглядный пример: предположим, мы едим сэндвич с сыром. Ощущения, получаемые во время поедания сэндвича, это и есть пользовательский опыт. Ингредиенты, составляющие наш воображаемый бутерброд (хлеб, майонез, сыр, сливочное масло и т. д.), могут считаться частью пользовательского интерфейса.\n\nОщущение, что мы получаем, когда едим бутерброд, можно считать UX, а ингредиенты сэндвича ассоциируются с UI\n\nСэндвич, сделанный из белого хлеба и сыра и майонеза с высоким содержанием жиров, на вкус почти также хорош, как бутерброд, состоящий из цельнозернового хлеба, низкокалорийного майонеза и нежирного сыра. Однако люди, стремящиеся к здоровому образу жизни, отвергнут первый сэндвич в пользу второго.\n\nИтак, у нас есть хороший интерфейс в обоих случаях, но мы не провели пользовательское исследование (а это неотъемлемая часть UX), мы не знаем соотношения пользователей, которые будут/не будут использовать наш продукт, в результате чего мы теряем весомую часть целевой аудитории.\n\nПроцесс проектирования UX включает в себя исследование поведенческих паттернов и психологических реакций пользователей, разработку информационной архитектуры, дизайн взаимодействия (interaction design), дизайн пользовательского интерфейса, интерактивное прототипирование макета (interactive prototyping) и тестирование юзабилити (usability testing).\n\nДизайнеры пользовательского интерфейса должны обладать навыками в области визуального дизайна, иконографики и типографики, однако в перечень их служебных обязанностей не обязательно входит проведение пользовательских исследований или построение информационной архитектуры веб-ресурса.\n\nА вот дизайнеры пользовательского опыта должны дополнительно еще и разбираться в исследованиях целевого рынка, information architecture и дизайне взаимодействий (что автоматически подразумевает базовое знание поведенческой психологии) и т. д.\n\n### Тестирование удобства пользования (Usability Testing)\nЮзабилити (usability) - дословно с английского означает: возможность использования или полезность. Юзабилити — это больше мера дружелюбности сайта или интерфейса программы, поскольку оно помогает сделать сайт понятным и естественным для пользователя.\n\nТестирование удобства пользования (Usability Testing) — это метод тестирования, направленный на установление степени удобства использования, обучаемости, понятности и привлекательности для пользователей разрабатываемого продукта в контексте заданных условий.\n\n### Этапы тестирования удобства использования пользовательского интерфейса:\n\n1. Исследовательское — проводится после формулирования требований и спецификаций к системе, а также после разработки прототипа интерфейса. Основная цель на этом этапе — выяснить, позволяет ли он с достаточной степенью эффективности решать задачи пользователя.\n\n2. Оценочное — проводится после разработки низкоуровневых требований и детализированного прототипа пользовательского интерфейса. Оценочное тестирование углубляет исследовательское и имеет ту же цель. На данном этапе уже проводятся количественные измерения характеристик пользовательского интерфейса: измеряются количество обращений к системе помощи по отношению к количеству совершенных операций, количество ошибочных операций, время устранения последствий ошибочных операций и т.п.\n\n3. Валидационное — проводится ближе к этапу завершения разработки. На этом этапе проводится анализ соответствия интерфейса программной системы стандартам, регламентирующим вопросы удобства интерфейса, проводится общее тестирование всех компонентов пользовательского интерфейса (с точки зрения конечного пользователя). Под компонентами интерфейса здесь понимается как его программная реализация, так и система помощи и руководство пользователя. Также на данном этапе проверяется отсутствие дефектов удобства использования интерфейса, выявленных на предыдущих этапах.\n\n4. Сравнительное — данный вид тестирования может проводиться на любом этапе разработки интерфейса. В ходе сравнительного тестирования сравниваются два или более вариантов реализации пользовательского интерфейса.\n\nИз этого следует, что UI-тестирование, предполагает под собой тестирование на основании требований к внешнему виду пользовательского интерфейса и формам взаимодействия с пользователем. \n\nНа какие требования стоит обращать внимание при UI-тестировании:\n- Требования к размещению элементов управления на экранных формах.\n- Требования к содержанию и оформлению выводимых сообщений.\n- Требования к форматам ввода.\n- Требования к реакции системы на ввод пользователя.\n- Требования к времени отклика на команды пользователя.\n\nВажно обращать внимание на:\n- Простоту использования сайта или интерфейса.\n- Эффективность использования.\n- Запоминаемость.\n- Ошибки, их количество и серьезность.\n- Удовлетворение пользователя (субъективное).\n\nТестирование пользовательского интерфейса (UI) – тестирование, выполняемое путем взаимодействия с системой через графический интерфейс пользователя.\n\nGUI тестирование включает:\n- навигация;\n- цвета, графика, оформление;\n- содержание выводимой информации;\n- поведение курсора и горячие клавиши;\n- отображение различного количества данных (нет данных, минимальное и максимальное количество);\n- изменение размеров окна или разрешения экрана.\n\n\nТестирование удобства использования (Usability Testing) – тестирование с целью определения степени понятности, легкости в изучении и использовании, привлекательности программного продукта для пользователя при условии использования в заданных условиях эксплуатации:\n- визуальное оформление;\n- навигация;\n- логичность.\n\nCompatibility testing (тестирование совместимости) – процесс тестирования для определения возможности взаимодействия программного продукта, проверка работоспособности приложения в различных средах (браузеры и их версии, операционные системы, их типы, версии и разрядность)\n\nВиды тестов:\n- Кросс-браузерное тестирование (различные браузеры или версии браузеров).\n- Кросс-платформенное тестирование (различные операционные системы или версии операционных систем).\n\n\ntodo  добавить инструменты UI, UX и Pixel Perfect тестирования\n","date":"2022-05-26T00:00:00.000Z","icon":"fas fa-bug","image":"null","path":"/ui-ux-i-pixel-perfect/","order":null,"category":{"title":"web","path":"/category/web/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"UI","path":"/tag/UI/"},{"title":"UX","path":"/tag/UX/"},{"title":"Pixel Perfect","path":"/tag/Pixel%20Perfect/"}],"headings":[{"value":"UI тестирование","anchor":"#ui-тестирование"},{"value":"Тестирование Pixel Perfect","anchor":"#тестирование-pixel-perfect"},{"value":"UX тестирование","anchor":"#ux-тестирование"}]}},{"node":{"id":"5a3a1008b926b0a85c26c8c03c8d1402","title":"Работа с Dev Tool","content":"\nhttps://www.youtube.com/watch?v=58_AqypXjG4\n\nhttps://www.youtube.com/watch?v=C8Z-N0y6Sqo ","date":"2022-05-26T00:00:00.000Z","icon":"fas fa-bug","image":"null","path":"/rabota-s-dev-tool/","order":null,"category":{"title":"web","path":"/category/web/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"Dev Tool","path":"/tag/Dev%20Tool/"}],"headings":[]}},{"node":{"id":"06c239a24c9164817122fef5e8282b28","title":"Тестирование верстки, JS ошибок","content":"\nhttps://quality-lab.ru/blog/layout-testing/\n\nhttps://vc.ru/dev/199130-kak-my-testiruem-frontend-html-verstku-chek-list\n\nhttps://habr.com/ru/post/114256/\n\nhttps://qna.habr.com/q/373556\n\nhttps://www.youtube.com/watch?v=GfPmWGU0vI0\n\nhttps://www.youtube.com/watch?v=vfOEGw-n7mA","date":"2022-05-26T00:00:00.000Z","icon":"fas fa-bug","image":"null","path":"/testirovanie-verstki-js-oshibok/","order":null,"category":{"title":"web","path":"/category/web/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"Тестирование верстки","path":"/tag/%D0%A2%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B2%D0%B5%D1%80%D1%81%D1%82%D0%BA%D0%B8/"}],"headings":[]}}]}},"relatedCategory":{"id":"bd9343b7ea919bb56949304c9b6254e1","title":"web","path":"/category/web/","related":[{"id":"manual","path":"/category/manual/","title":"manual"},{"id":"automation","path":"/category/automation/","title":"automation"},{"id":"api","path":"/category/api/","title":"api"}]}},"context":{}}