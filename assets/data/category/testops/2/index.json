{"hash":"7ef89d9cd3f6579eddc6e6b2d3ffbd18a73c2491","data":{"category":{"title":"testops","path":"/category/testops/","belongsTo":{"totalCount":11,"pageInfo":{"totalPages":2,"currentPage":2},"edges":[{"node":{"id":"7a5ca99f9f48162e1bff6496b6f4dc68","title":"Общие вопросы TestOps","content":"\n## Какие есть виды индексов? Когда и зачем использовать?\nИндекс (англ. index) — объект базы данных, создаваемый с целью повышения производительности поиска данных. Таблицы в базе данных могут иметь большое количество строк, которые хранятся в произвольном порядке, и их поиск по заданному критерию путём последовательного просмотра таблицы строка за строкой может занимать много времени. Индекс формируется из значений одного или нескольких столбцов таблицы и указателей на соответствующие строки таблицы и, таким образом, позволяет искать строки, удовлетворяющие критерию поиска. Ускорение работы с использованием индексов достигается в первую очередь за счёт того, что индекс имеет структуру, оптимизированную под поиск — например, сбалансированного дерева.\n\nВ общем виде, индекс в базах данных — это файл с последовательностью пар ключей и указателей. Идея использования индексов пришла от того, что современные базы данных слишком массивны и не помещаются в основную память. Мы обычно делим данные на блоки и размещаем данные в памяти поблочно. Однако поиск записи в БД может занять много времени. С другой стороны, файл индексов или блок индексов намного меньше блока данных и может поместиться в буфере основной памяти, что увеличивает скорость поиска записи.\n\nРазрежённый индекс (англ. sparse index) характеризуется тем, что каждый ключ ассоциируется с определённым указателем на блок в сортированном файле данных.\n\nПлотный индекс (англ. dense index) в свою очередь отличается тем, что каждый ключ ассоциируется с определённым указателем на запись в сортированном файле данных.\n\nВ кластерных индексах с дублированными ключами разрежённый индекс указывает на наименьший ключ в каждом блоке, в то время как плотный индекс указывает на первую запись с указанным ключом.\n\n## Можно ли вывести список баз данных/таблиц через CLI\n\nВ Postgress\n\n```\n-l или \\list\n```\n\nВ MySQL\n\n```sql\nSHOW DATABASES;\n```\n\n## Транзакции,команды для транзакций\nТранзакции — это фундаментальное понятие во всех СУБД. Суть транзакции в том, что она объединяет последовательность действий в одну операцию «всё или ничего». Промежуточные состояния внутри последовательности не видны другим транзакциям, и если что-то помешает успешно завершить транзакцию, ни один из результатов этих действий не сохранится в базе данных.\n\nТранзакцией называется последовательность операций над данными имеющая начало и конец\n\nТранзакция это последовательное выполнение операций чтения и записи. Окончанием транзакции может быть либо сохранение изменений (фиксация, commit) либо отмена изменений (откат, rollback). Применительно к БД транзакция это нескольких запросов, которые трактуются как единый запрос.\n\nТранзакции должны удовлетворять свойствам ACID\n\nАтомарность. Транзакция либо выполняется полностью либо не выполняется вовсе.\n\nСогласованность. При завершении транзакции не должны быть нарушены ограничения накладываемые на данные (например constraints в БД). Согласованность подразумевает, что система будет переведена из одного корректного состояния в другое корректное.\n\nИзолированность. Параллельно выполняемые транзакции не должны влиять друг на друга, например менять данные которые использует другая транзакция. Результат выполнения параллельных транзакций должен быть таким, как если бы транзакции выполнялись последовательно.\n\nУстойчивость. После фиксации изменения не должны быть утеряны.\n\n```sql\nBEGIN;\nUPDATE accounts SET balance = balance - 100.00\n    WHERE name = 'Alice';\nSAVEPOINT my_savepoint;\nUPDATE accounts SET balance = balance + 100.00\n    WHERE name = 'Bob';\n-- ошибочное действие... забыть его и использовать счёт Уолли\nROLLBACK TO my_savepoint;\nUPDATE accounts SET balance = balance + 100.00\n    WHERE name = 'Wally';\nCOMMIT;\n```\n\n## Что такое индекс и что такое ключ\nКлюч представляет собой комбинацию полей, данные в которых однозначно определяют каждую запись в таблице. Простой ключ состоит из одного поля, а составной (сложный) из нескольких полей. Поля, по которым построен ключ, называют ключевыми. \n\nИндекс, как и ключ, представляет собой своеобразное оглавление таблицы, просмотр которого выполняется перед обращением к ее записям. Таким образом, использование индекса повышает скорость доступа к данным в таблице за счет того, что доступ выполняется не последовательным, а индексно-последовательным методом.\n\n## Deployment strategies\n\n### Rolling (постепенный, «накатываемый» деплой)\n\nЭто стандартная стратегия развертывания в Kubernetes. Она постепенно, один за другим, заменяет pod'ы со старой версией приложения на pod'ы с новой версией — без простоя кластера.\n\n### Recreate (повторное создание)\n\nВ этом простейшем типе развертывания старые pod'ы убиваются все разом и заменяются новыми\n\n### Blue/Green (сине-зеленые развертывания)\n\nСтратегия сине-зеленого развертывания (иногда ее ещё называют red/black, т.е. красно-чёрной) предусматривает одновременное развертывание старой (зеленой) и новой (синей) версий приложения. После размещения обеих версий обычные пользователи получают доступ к зеленой, в то время как синяя доступна для QA-команды для автоматизации тестов через отдельный сервис или прямой проброс портов\n\n### Canary (канареечные развертывания)\n\nКанареечные выкаты похожи на сине-зеленые, но лучше управляются и используют прогрессивный поэтапный подход. К этому типу относятся несколько различных стратегий, включая «скрытые» запуски и А/В-тестирование.\n\nЭта стратегия применяется, когда необходимо испытать некую новую функциональность, как правило, в бэкенде приложения. Суть подхода в том, чтобы создать два практически одинаковых сервера: один обслуживает почти всех пользователей, а другой, с новыми функциями, обслуживает лишь небольшую подгруппу пользователей, после чего результаты их работы сравниваются. Если все проходит без ошибок, новая версия постепенно выкатывается на всю инфраструктуру.\n\n### Dark (скрытые) или А/В-развертывания\n\nСкрытое развертывание — еще одна вариация канареечной стратегии (с ней, кстати, Flagger тоже может работать). Разница между скрытым и канареечным развертыванием состоит в том, что скрытые развертывания имеют дело с фронтендом, а не с бэкендом, как канареечные.\n\nДругое название этих развертываний — А/В-тестирование. Вместо того, чтобы открыть доступ к новой функции всем пользователям, ее предлагают лишь ограниченной их части. Обычно эти пользователи не знают, что выступают тестерами-первопроходцами (отсюда и термин «скрытое развертывание»).\n\n### Flagger и A/B-развертывания\n\nПомимо маршрутизации с учётом весов, Flagger также может направлять на канареечный сервер трафик в зависимости от параметров HTTP. При А/В-тестировании можно использовать заголовки HTTP или файлы cookie для перенаправления определенного сегмента пользователей. Это особенно эффективно в случае frontend-приложений, требующих привязки сессии к серверу (session affinity). Дополнительную информацию можно найти в документации Flagger.\n\n## Что такое контроллер?\nКонтроллер - это что-либо в вашем кластере, которое отслеживает хотя бы один другой тип ресурса Kubernetes. Контроллеры могут быть пассивными или активными. Активный контроллер сам выполнит необходимые действия; пассивы будут передавать изменения другим компонентам или серверу API кластера.\n\n## Что такое операторы?\nОператор - это специализированная форма контроллера. Операторы реализуют модель контроллера, что означает, что они переводят кластер в определенное состояние, но у них также есть дополнительные характеристики. Первоначально этот термин был придуман CoreOS, но теперь получил более широкое распространение в Kubernetes.\n\nОператоры адаптированы к конкретным приложениям. Они добавляют расширения Kubernetes API через пользовательские определения ресурсов, создавая новые типы объектов, используемых приложением, которым они управляют.\n\n## Права к файлу 755\nУ файла установлены права 755. \n\nПервая цифра — 7, это значит, что хозяин имеет на файл все права: чтение, запись и запуск (7 — 111). \n\nВторая цифра — 5, пользователи из одной с хозяином группы имеют возможность читать и запускать файл, но не могут в него писать (5 — 101). \n\nАналогично и все остальные — третья цифра тоже пятерка.\n\n## Какое максимальное количество docker layers возможно\n127\n\n## Что такое многоэтапный build\n\nмного-этапные (multi-stage builds) сборки позволяют значительно упростить процесс и описать его внутри Dockerfile. Каждая инструкция FROM может использовать индивидуальный базовый образ и каждая из них начинает новую стадию сборки docker образа. Но основное преимущество, что вы можете копировать необходимые артефакты из одной стадии в другую. В результате все вышеперечисленные шаги могут быть описаны вот так\nDockerfile:\n\n```docker\nFROM golang:latest as build\nCOPY . .\nRUN go build ./src/main.go\n\nFROM alpine:latest as production\nCOPY --from=build /go/main .\nCMD [\"./main\"]\n```\n\n## DinD (Docker in docker)\n\nDocker предоставляется в виде самодостаточного образа через тег docker:dind на Docker Hub.\n\nЗапустив этот образ, вы получите функционирующую установку демона Docker внутри вашего нового контейнера.\n\nОн будет работать независимо от демона вашего хоста, который запускает контейнер dind, поэтому docker ps внутри контейнера даст результаты, отличные от docker ps на вашем хосте.\n\n```\ndocker run -d --privileged --name docker \\\n    -e DOCKER_TLS_CERTDIR=/certs \\\n    -v docker-certs-ca:/certs/ca \\\n    -v docker-certs-client:/certs/client \\\n    docker:dind\n```\n\nИспользование Docker-in-Docker таким образом связано с одним большим предостережением: необходимо использовать привилегированный режим.\n\nЭто ограничение действует, даже если вы используете контейнеры без рутов.\n\nПривилегированный режим активируется флагом –privileged в команде, показанной выше.\n\nИспользование привилегированного режима дает контейнеру полный доступ к вашей хост-системе.\n\nЭто необходимо в сценарии Docker-in-Docker, чтобы ваш внутренний Docker мог создавать новые контейнеры.\n\nОднако в некоторых средах это может быть неприемлемым риском для безопасности.\n\nСуществуют и другие проблемы с dind.\n\nВ некоторых системах могут возникать конфликты с модулями безопасности Linux Security Modules (LSM), такими как AppArmor и SELinux.\n\nЭто происходит, когда внутренний Docker применяет политики LSM, которые внешний демон не может предугадать.\n\nЕще одна проблема связана с файловыми системами контейнеров.\n\nВнешний демон будет работать поверх обычной файловой системы вашего хоста, например ext4.\n\n## Переменная PATH\nДля того, чтобы посмотреть содержимое переменной PATH в Linux, выполните в терминале команду:\n\necho $PATH\n\nДля того, чтобы добавить новый путь к переменной PATH, можно воспользоваться командой export. Например, давайте добавим к значению переменной PATH папку/opt/local/bin. Для того, чтобы не перезаписать имеющееся значение переменной PATH новым, нужно именно добавить (дописать) это новое значение к уже имеющемуся, не забыв о разделителе-двоеточии:\n\nexport PATH=$PATH:/opt/local/bin\n\n## Команды для копирования и переименования файла\n- cp\n- mv\n\n## Команда env\n\nКоманда env позволяет модифицировать список переменных окружения перед исполнением пользовательской команды. В некоторых командных оболочках она является встроенной, в некоторых — внешней командой.\n\nБазовый синтаксис команды выглядит следующим образом:\n\n```\n$ env [параметры] [ИМЯ=ЗНАЧЕНИЕ] ... [команда]\n```\n\nПри вызове env без каких-либо параметров будет выведен список всех переменных окружения. \nИсполнение команды с измененными значениями переменных окружения\nДля изменения значения произвольной переменной окружения перед запуском команды достаточно указать имя этой переменной и ее значение после символа равенства. Например, для вывода времени по Гринвичу достаточно изменить значение переменной окружения TZ:\n\n```\n$ env TZ=GMT date\nСр июл 26 17:50:30 GMT 2017\n```\n\nИсполнение команды лишь с заданными переменными окружения\nДля исполнения команды с несколькими пользовательскими переменными окружения следует воспользоваться параметром -i и вручную задать значения необходимых переменных:\n```\n$ env -i PWD=/root env\nPWD=/root\n```\n\nDELETE vs TRUNCATE\n\n## Партиционирование \nПартиционирование – это метод разделения больших (исходя из количества записей, а не столбцов) таблиц на много маленьких. И желательно, чтобы это происходило прозрачным для приложения способом.\n\nкогда таблица готова, я могу создать партиции, что означает – наследованные таблицы:\n\ncreate table users_1 () inherits (users);\n\n* Deadlock\n* Задачка на LEFT JOIN примерно как в собесе выше\n\nЧто такое CI/CD\n* Инструменты (Jenkins, Gitlab CI ...)\n* Green / Blue deploy\n* Канареечный релиз\n* Балансировщик\n\n## В чем отличие контейнеризации от виртуализации\nВиртуализация - эмулируется аппаратное окружение и может быть запущен широкий спектр гостевых операционных систем,\nКонтейнеризация - может быть запущен экземпляр операционной системы только с тем же ядром, что и у хостовой операционной системы \nотсутствуют дополнительные ресурсные накладные расходы на эмуляцию виртуального оборудования и запуск полноценного экземпляра операционной системы","date":"2022-07-07T00:00:00.000Z","icon":"fas fa-bug","image":"null","path":"/obshhie-voprosy-test-ops/","order":5,"category":{"title":"testops","path":"/category/testops/"},"tags":[{"title":"qa","path":"/tag/qa/"}],"headings":[{"value":"Какие есть виды индексов? Когда и зачем использовать?","anchor":"#какие-есть-виды-индексов-когда-и-зачем-использовать"},{"value":"Можно ли вывести список баз данных/таблиц через CLI","anchor":"#можно-ли-вывести-список-баз-данныхтаблиц-через-cli"},{"value":"Транзакции,команды для транзакций","anchor":"#транзакциикоманды-для-транзакций"},{"value":"Что такое индекс и что такое ключ","anchor":"#что-такое-индекс-и-что-такое-ключ"},{"value":"Deployment strategies","anchor":"#deployment-strategies"},{"value":"Что такое контроллер?","anchor":"#что-такое-контроллер"},{"value":"Что такое операторы?","anchor":"#что-такое-операторы"},{"value":"Права к файлу 755","anchor":"#права-к-файлу-755"},{"value":"Какое максимальное количество docker layers возможно","anchor":"#какое-максимальное-количество-docker-layers-возможно"},{"value":"Что такое многоэтапный build","anchor":"#что-такое-многоэтапный-build"},{"value":"DinD (Docker in docker)","anchor":"#dind-docker-in-docker"},{"value":"Переменная PATH","anchor":"#переменная-path"},{"value":"Команды для копирования и переименования файла","anchor":"#команды-для-копирования-и-переименования-файла"},{"value":"Команда env","anchor":"#команда-env"},{"value":"Партиционирование","anchor":"#партиционирование"},{"value":"В чем отличие контейнеризации от виртуализации","anchor":"#в-чем-отличие-контейнеризации-от-виртуализации"}]}}]}},"relatedCategory":{"id":"b9b65e6a5922bc834b5223e06177ce4d","title":"testops","path":"/category/testops/","related":[{"id":"automation","path":"/category/automation/","title":"automation"}]}},"context":{}}