{"hash":"7ce6058f470c3851afaa44882541a7f3d1089ffc","data":{"category":{"title":"automation","path":"/category/automation/","belongsTo":{"totalCount":24,"pageInfo":{"totalPages":3,"currentPage":2},"edges":[{"node":{"id":"108cafef145bb82258b23c4a45f530b2","title":"Профессионально работаем с IntelliJ IDEA","content":"\n## Основы\n\n_Alt + 1(Win), ⌘ + 1(MacOs)_ - отобразить/скрыть вид проекта слева\n\n_Alt + Insert(Win), ⌘ + N(MacOs)_  \n_(клик в левом меню)_ - открывает диалог создания нового файла\n\n_Alt + Insert(Win), ⌘ + N(MacOs)_  \n_(клик в основной области окна)_ - открывает окно генерации методов разных типов (@Test, @SetUp, @TearDown)\n\n_Ctrl + P(Win), ⌘ + P(MacOS)_ - открывет подсказку параметров текущего метода\n\n_Alt + Enter(Win), Option + Enter(MacOs)_  \n_Alt + Shift + V(Win), Option + ⌘ + V(MacOs)_  - формирует из выражения новую переменную\n\n_⌘ + Shift + I(MacOs)_ - сбилдить gradle проект\n\n### Postfix\n\n_после выражения дописать .var_ - формирует из выражения новую переменную\n_после числа дописать .for_ - формирует циклы от 0 до заданного числа\n\n### Справочная информация по работе в IDE\n\n_Shift + Shift_ - поиск по командам, файлам и всему остальному в проекте\n\n_Help + Keyboard Shortcuts PDF_ - загружает PDF файл со всеми сочетаниями клавиш\n\n_Плагин Key Promoter Х_ - подсказывает какие shortcuts нужно выбирать при совершении действий мышью\n\n_Ctrl + Alt + O(Win), Option + ⌘ + N(MacOs)_ - перемещает значение переменной непосредственно в метод\n\n_Option + Enter (на запускаемом методе), F9_ - выполнить запуск кода\n\n_Ctrl + F11(Win), Option + F3(MacOs)_ - добавить файл в закладки\n\n_View - Tool Windows - TODO_ - открывается окно посмотра добавленных todo комментариев.  \nЗдесь можно настроить фильтр поиска todo содержащие определенный текст, и добавить им соответсвующее выделение\n\nВ момент дебага можно внести изменения в код и чтобы он применился на лету нужно запустить билд приложения и продолжить выполнение.\n\n\n## Git/VSC\n\n### Редактирование коммита\n\nВ окне `Git/VSC` вкладка `Log` - можно нажать на коммит и изменить сообщение\n\n### Объединение коммитов\n\n1. Выбираем в вверхнем меню `Git` - `Rebase`, \n2. Выбираем текущую ветку из удаленного репозитория и выбираем опцию `--interactive`\n3. Нажимаем Rebase\n4. Откроется окно, в нем также можно выбрать и переименовать комит (`Reword`). \n5. Выделяем коммиты, которые хотим объединить и вверху выбираем `Fixup` и нажимаем `Start Rebasing`.\n\n### Отмена коммита\n\nНа вкладке Log нажимаем ПКМ на коммит до которого хотим откатиться и выбираем `Reset Current Branch to Here...`.  \nВыбираем опцию `Hard` - все коммиты выше выбранного будут удалены без сохранения.\n\nЕсли коммит был запушен то отменить его лучше через `Revert commit`, будет создан комит отменяющий выполненные изменения.\n\n\n_Ctrl + Q(Win), F1(MacOS)_ - показывает короткую документацию по текущему методу/переменной.\n\n_Ctrl + B(Win), ⌘ + B(MacOs)_ - переход к объявлению кода/либо поиск мест где данные код используется.\n\n_Ctrl + E(Win), ⌘ + E(MacOs)_ - открывается окно с недавними файлами которые были ранее открыты.\n\n_Ctrl + Alt + ⇨(Win), ⌘ + Option + ⇨(MacOs)_ - позволяет перемещаться по истории в том числе между открытыми ранее файлами выставляя курсор в том месте, где он ранее был при работе в этих файлах.\n\n_Ctrl + shift + E(Win), ⌘ + Shift + E(MacOs)_ - показывает последние участки кода с которыми была работа.\n\nДля работы с рандомными файлами которые возможно даже не относятся к текущему проекту можно пользоваться разделом `Scratches and Console`. Он находится слева в окне с деревом проекта в самом низу.\nЭти файлы будут доступны в любых проектах. Можно сохранять разные шаблоны, шпаргалки и т.д.\n\n## Библиотека JsonPath\n\n_Alt + Enter(Win), Option + Enter(MacOs)_ - при нажатии на значении строковой переменной позволяет выбрать `Inject language or reference` после чего можно выбрать язык, чтобы содержимое строки отформатировалось и подсветилось в соотвествии с синтаксисом выбранного языка, например JSON. При повторном вызове команды, можно выбрать `Edit JSON Fragment` и в открывшемся окне отредактировать выбранный JSON или вставить большой фрагмент.\n\n### Прочитать данные из JSON\n\n```java\nString json = \"{\\\"name\\\": 10}\";\nJsonPath.read(json, \"$..name\")\n```\n\nПри нажатии `Option + Enter`(MacOs) на команде `\"$..name\"` выбираем `Evaluate JSONPath Expression`\nОткрывается окно в котором можно инспектировать json.\n\nЕсли json код находится в отдельном файле, то открыв этот файл и выбрав `Edit` - `Find` - `Evaluate JSONPath Expression`, можно инспектировать текущий json не копируя его содержимое.\n\n_Find By XPath_ - Аналогичный инструмент для XML. \n\n### Регулярные выражения\n\nПри нажатии `Option + Enter`(MacOs) на строке с регулярным выражением можно выбрать `Check RegExp` и выполнить проверку регулярного выражения\n\n## Плагины\n\n### Docker \n\nМожно установить из MarketPlace.\n\nОткрываем Tool окно `Services` (Alt + 8, ⌘ + 8) \n\nНажимаем на `+` - Docker Connection \nМожно смотреть разную информацию. Удалять, смотреть контейнеры.\n\n## Работа с БД (Ultimate Edition)\n\n- Вкладка Database - + - Data Source (выбираем тип БД) PostgreSQL.\n- Указываем Credentials - Test Connection.\n- Вкладка Schemas, обновить выбираем схему и отмечаем public.\n- После этого IDE подключается к БД и можно увидеть всю структуру БД.\nИ выполнять SQL запросы нажимая Cntl + Enter(Win), ⌘ + Enter(MacOs)\n\nЧтобы SQL распознавался в строковой переменной и была возможность автодополнения перед переменной в строке выше нужно добавить комментарий\n\n```java\n// language=SQL\n```\n\nЧтобы нужные колонки одтягивались из нашей БД нужно настроить диалект.\nНажимаем `Option + Enter`(MacOs) на SQL строке, выбираем `Change dialect to...`.\nВ диалоговом окне выбираем `Project SQL Dialect` нашу БД, например `PostgreSQL` и нажимаем `ОК`.\n\nПрямо в IDE можно менять данные в БД.\n\n## Selenium UI Testing (Ultimate Edition)\n\nПозволяет сформировать стартовый проект с подключенными нужными зависимостями (Allure, Selenide и т.д.)\nПодсвечивает и подсказывает в формировании селекторов(XPath, Css и т.д.)\nЕсть автодополнение разных атрибутов и Css свойств.\nTools - Generate Selenium PageObject - открыается браузер, в котором можно перейти на страницу для которой создается Page Object; при нажатии на элементы их можно быстро добавить в текущую страницу.\n\nТакже страницу можно: \n  - сохранить в scratches \n  - нажать иконку копировать и при вставке в дерево проекта будет создан файл с названием класса и содержимым копируемой страницы.\n\nЕсть интеграция с Selenoid: \nпри открытии файла browsers.json в верхней части окна можно выбрать ссылку Launch и запустить selenoid node в docker'e\n\nЕсть интеграция с Allure:\n  - при добавлении аннотации @Issue, @TmsLink можно будет проваливаться непосредственно в задачу, на которую ссылается данный тест.  \n  Для этого нужно тобы путь к проекту был настроен либо в allure.properties либо в настройках IDE: `Preferences` - `Version Control` - `Issue Navigation`,\n  `+` - `Add Pattern`\n\n## Работа с Web Services (Ultimate Edition)\n\nМожно генерировать и исполнять запросы с помощью специального языка http для этого создается файл с соответсвующим разрешением (.http)  \nМожет подсказывать параметры, заголовки и т.д.  \nМожно писать тест на языке javascript и выполнять их прямо из таких файлов.\n\n```javaScript\nGET https://httpbin.org/status/200\n\n> {%\nclient.test(\"Request executed succesfully\", function() {\n  client.assert(responce.status == 200, \"Response status is not 200\");\n});\n%}\n```\n\nПри написании Rest тестов например через библиотеку RestAssured IDE может подсказывать все url, которые есть в вашем проекте или в OpenApi спецификациях.\n\nЧтобы добавить спецификацию идем внизу во вкладку Endpoints, через шестиренку выбираем `Configure OpenApi Sources...` через + выбираем Swagger Hub, ищем конфигурацию и нажимаем `Add Selected`.  \nПосле этого в автодополнении появятся нужные url.  \nЕсли открыть swagger.yaml, то через иконку можно в соседнем открыть swagger ui в котором также можно делать отладку и отправлять запросы.\n\n## Плагины\n\n### Test Management (Ultimate Edition)\n\nНужно установить соответсвующий плагин и в настройках IDE - Preferences - Tools - Tms указать путь к ссиетме управления тестами TestRail.\n\nТогда в соседнем окне появятся тест кейсы, тест раны, тест планы, которые будут синхронизироваться.\n\nМожно скопировать нужный тест кейс и вставить в код автотестов, в результате будет сгененрирован тестовый метод с комментариями шагов, которые нужно автоматизировать.\n\nТакже эти кейсы можно фильтровать по каким-либо параметрам или например, автоматизирован тест или нет.\n\nТакже этот плагин позволяет хранить кейсы как код (test cases as a code). Они сохраняются в виде .md файлов в папочке specs, их можно обновлять и эти изменения будут отражаться в дереве кейсов справа. Их также можно фильтровать по параметрам, хранить в VSC. \nЕсть специальный формат, который позволяет добавлять статусы, assignee и т.д.\n\n### Test Data\n\nПлагин позволяет генерировать данные.\nЧерез `Option + Enter`(MacOs) в строковой переменной можно выбрать тип данных, который нужно сгененрировать.\n\n\nhttps://www.youtube.com/watch?v=_rj7dx6c5R8","date":"2022-06-11T00:00:00.000Z","icon":"fas fa-robot","image":"null","path":"/professionalno-rabotaem-s-intelli-j-idea/","order":null,"category":{"title":"automation","path":"/category/automation/"},"tags":[{"title":"Автоматизация тестирования","path":"/tag/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}],"headings":[{"value":"Основы","anchor":"#основы"},{"value":"Git/VSC","anchor":"#gitvsc"},{"value":"Библиотека JsonPath","anchor":"#библиотека-jsonpath"},{"value":"Плагины","anchor":"#плагины"},{"value":"Работа с БД (Ultimate Edition)","anchor":"#работа-с-бд-ultimate-edition"},{"value":"Selenium UI Testing (Ultimate Edition)","anchor":"#selenium-ui-testing-ultimate-edition"},{"value":"Работа с Web Services (Ultimate Edition)","anchor":"#работа-с-web-services-ultimate-edition"},{"value":"Плагины","anchor":"#плагины-1"}]}},{"node":{"id":"8633524d3902fdb2475292951a58be9e","title":"Maven","content":"\nВсе pom.xml переопределяют super pom который идет в поставке maven\nЭто позвояет писать компактный xml.\nPom.xml содержит\n- описание проекта(название, версия, ссылки на исходные коды, CI, лицензия, разработчики и т.п.)\n- список зависимостей\n- список плагинов и их конфигурации описывает то что нужно сделать\n- профили - возможность выполнять некоторые действия при определенных обстоятельствах\n\n## Название проекта и параметры\n\n```xml\n<properties>\n    <jetty.port>9990</jetty.port>\n    <jetty.version>9.1.9.v20131115</jetty.version>\n\n    <compiler.version>1.7</compiler.version>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n</properties>\n\n<group.id>ru.yandex.qatools.allure</group.id>\n<artifactId>allure-core</artifactId>\n<version>1.4.4-SNAPSHOT</version>\n\n<packaging>pom</packaging>\n\n<name>Allure Core</name>\n```\n\n## Список модулей\n\n```xml\n<modules>\n    <module>allure-model</module>\n    <module>allure-commons</module>\n    <module>allure-java-annotations</module>\n</modules>\n```\n\n## Информация о проекте\n\n```xml\n<issueManagement>\n    <system>GitHub Issues</system>\n    <url>https://github.com/allure-framework/allure-core/issues</url>\n</issueManagement>\n<ciManagement>\n    <system>TeamCity</system>\n    <url>https://teamcity.qatools.ru</url>\n</ciManagement>\n<developers>\n    <developer>\n        <id>eroshenkoam</id>\n        <name>Artem Eroshenko</name>\n        <email>eroshenko@yandex-team.ru</email>\n        <organization>Yandex</organization>\n    </developer>\n</developers>\n```\n\n## Описание сборки проекта (плагины)\n\n```xml\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-compiler-plugin</artifactId>\n    <version>3.0</version>\n    <configuration>\n        <source>${compiler.version}</source>\n        <target>${compiler.version}</target>\n    </configuration>\n</plugin>\n```\n\n## Зависимости\n\n```xml\n<dependency>\n    <groupId>ru.yandex.qatools.allure</groupId>\n    <artifactId>allure-model</artifactId>\n    <version>${project.version}</version>\n</dependency>\n<dependency>\n    <groupId>ru.yandex.qatools.allure</groupId>\n    <artifactId>allure-commons</artifactId>\n    <version>${project.version}</version>\n</dependency>\n```\n\n## Именование директорий\n\nsrc/ - все исходные коды  \nsrc/main - всё, что касается продукта  \nsrc/test - всё, что касается тестов\n\nsrc/main/java - Java-код продукта  \nsrc/main/resources - ресурсы продукта  \nsrc/main/webapp - файлы веб-приложений продукта (стили, Javascript и т.п.)\n\nsrc/test/java - Java-код тестов  \nsrc/test/resources - ресурсы тестов  \nsrc/test/webapp - файлы веб-приложений тестов\n\n## Жизненные циклы\n\nClean - очищает проект перед сборкой  \nDefault - собирает проект  \nSite - создает сайт проекта со ссылками на зависимости, CI, тикетную систему и т.п.\n\n## Сборка проекта. Команда mvn.\n\n```\n$ mvn clean test\n```\n\nValidate - проверить правильность проекта  \nCompile - скомпилировать исходники  \nTest - скомпилировать и выполнить тесты  \nPackage - упаковать скомпилированный код и исходники в jar, war архив  \nVerify - проверить, что код правильно упакован  \nInstall - установить пакеты в локальный репозиторий  \nDeploy - выгрузить пакеты в удаленный репозиторий  \n\n### Управление зависимостями\n\nНужно добавить блок, описывающий зависимость, в секцию `<dependencies>` и `<dependencyManagement>`\n\nБлок зависимости включает: \n- groupId - идентификатор который описывает группу проектов одного разработчика\n- artifactId - уникальное название проекта\n- version - номер версии\n- scope - на какой стадии сборки используется данная зависисмость\n    Scope может быть: \n    - compile - зависимость нужна на этапе компиляции\n    - test - зависимость не нужна чтобы собрать продукт, но нужна чтобы выполнить тесты\n    - runtime - зависимость не нужна для сборки и тестирования продукта, но нужна при его запуске\n    - provided - зависимость нужна для запуска, но при этом она поставляется кем то еще\n    - system - тоже самое что provided, но с указанием пути; мы можем указать, где на файловой системе лежит данная библиотека\n\n```xml\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-log4j12</artifactId>\n    <version>1.7.7</version>\n    <scope>runtime</scope>\n</dependency>\n```\n\n## Версии пакетов. Релизы и снепшоты\n\nСнепшот - промежуточная версия пакета, используемая в разработке: 1.0-SNAPSHOT(снимок текущей версии), чтобы делиться с другими разработчиками. Может быть бесконечно много снепшотов с одной и той же версией\n\nРелиз - стабильная версия пакета, предназначенная для использования другими проектами: 1.0. Релиз всегда один.\n\nПорядок версий: 1.0-SNAPSHOT, 1.0, 1.1-SNAPSHOT, 1.1, 1.2-SNAPSHOT и т.д.\nСначала мы делаем снепшоты, потом делаем релиз и т.д.\n\n## Конфликт зависимостей. Дерево зависимостей\n\nБывает такая ситуация, когда в проекте используется зависимость, в которой есть зависимость, которая также есть в нашем проекте. И одна зависимость будет перекрывать другую.\n\n```\npom.xml\n├── Log4j-1.2.13\n├── commons-logging-1.1\n    ├── Log4j-1.2.12\n    ├── Servlet-2.3\n```\n\nДля разрешения конфликтов зависимостей нужно построить дерево зависимостей.\nДля построения дерева зависимостей используется команда:\n\n```\n$ mvn dependency:tree\n```\n\n## Исключение зависимостей\n\nДля решения конфликта зависимостей иногда нужно исключить какую то зависимость. Для этого используется exclusions:\n\n```xml\n<dependency>\n    <groupId>ru.yandex.qatools.allure</groupId>\n    <artifactId>allure-report-builder</artifactId>\n    <version>2.0</version>\n    <exclusions>\n        <exclusion>\n            <groupId>ru.yandex.qatools.allure</groupId>\n            <artifactId>allure-model</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n```\n\n### Необязательные зависимости\n\nТакая зависимость не будет скачиваться в проектах, зависящих от данного\nДля того, чтобы пометить необязательную зависимость используется секция optional:\n\n```xml\n<dependency>\n    <groupId>junit</groupId>\n    <artifactId>junit</artifactId>\n    <version>4.11</version>\n    <scope>test</scope>\n    <optional>true</optional>\n</dependency>\n```\n\n## Плагины. Настройка билда\n\nИзменение процесса билда - это изменение настроек отдельных плагинов в секции build/plugins.\n\n### Maven Compiler Plugin\n\nКомпилирует java код продукта и его тестов. \nОсновная настройка - версия компилятора.\n\n```xml\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-compiler-plugin</artifactId>\n    <configuration>\n        <source>${compiler.version}</source>\n        <target>${compiler.version}</target>\n    </configuration>\n</plugin>\n```\n\n### Maven Source Plugin\n\nУпаковывает исходные коды проекта чтобы поделиться с другими участниками разработки.\n\n```xml\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-source-plugin</artifactId>\n    <version>2.2.1</version>\n    <executions>\n        <execution>\n            <goals>\n                <goal>jar</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n\n### Maven Dependency Plugin\n\nРазрешение зависимостей, построение дерева зависимостей;\nКопирование, распаковка и другие операции с зависимостями;\n\n### Maven Jar Plugin \n\nУпаковывает файлы в jar-архив;\nМожно сделать испольняемый jar файл и указать класс, который будет запускаться при запуске jar файла.\n\n### Maven Assembly Plugin\n\nСборка дистрибутивов продукта (например, zip-архив c jar, bash скриптами и README)\nНапример, вы хотите собрать свой продукт, а потом взять еще какие то файлы и все это вместе упаковать в архив. \nИ этот плагин требует создание специального файла Assembly.xml в котором будет описываться что он собственно должен делать.\n\n### Maven Release Plugin\n\nАвтоматизирует вырсионирование, выкладку релизов.\n\nДобавляются цели release:prepare и release:perform. Они увеличивают номер версии в pom.xml и отправляет в систему контроля версий.\n\nНастройка:\n\n```xml\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-release-plugin</artifactId>\n    <configuration>\n        <autoVersionSubmodules>true</autoVersionSubmodules>\n    </configuration>\n</plugin>\n```\n\n### Maven Surefire Plugin \n\nВыполнение тестов Junit или TestNG\n\n### Maven Site Plugin\n\nПервоначальное назначение - сгенерировать сайт поекта\nОсновное применение - генерация отчетов\n\nНастройка:\n\n```xml\n<reporting>\n    <excludeDefaults>true</excludeDefaults>\n    <plugins>\n        <plugin>\n            <groupId>ru.yandex.qatools.allure</groupId>\n            <artifactId>allure-maven-plugin</artifactId>\n            <version>${allure.version}</version>\n        </plugin>\n    </plugins>\n</reporting>\n```\n\n## Служебные файлы и каталоги\n\nПапка ~/.m2 - локальный репозиторий артефактов.  \nФайлы ~/.m2/settings.xml и /etc/maven/settings/xml, ~/.mavemrc и /etc/mavenrc - конфигурация Maven, можно менять поведение Maven по умолчанию\n\n## Профили. Settings.xml\n\nПрофиль - способ изменить настройки билда, не изменяя pom.xml. Мы можем определить как будет собираться проект при определнных условиях например если выставлена какая то переменная, включить дополнительный тесты и т.п..\n\nПрофиль хранится в pom.xml или в settings.xml(могут указываться пароли так как он не распространяется вместе с продуктом) в секции profiles\n\nИспользование профиля:\n\n```\n$ mvn clean test -P myProfile\n```\n\n```xml\n<profiles>\n    <profile>\n        <id>integration-tests</id>\n        <activation>\n            <activateByDefault>true</activateByDefault>\n        </activation>\n        <modules>\n            <module>allure-e2e</module>\n        </modules>\n    </profile>\n</profiles>\n```\n\n## Центральные репозитории артефактов\n\nУдаленный сервер, все разработчики на который могут отправлять свои разработки, а другие могут их забирать.\nОсновным таким сервером является: Maven Central Repository (http://maven.org)\n\nВ папке репозитория хранится: сами пакеты, которые приходят от разработчиков, их контрольная сумма, некоторая служебная информация в xml и цифровые подписи.\n\n- maven-metadata.xml(служебная информация)\n- jar, javadoc.jar, source.jar, jar.asc (пакеты)\n- jar.md5, javadoc.jar.md5, source.jar.md5, jar.asc.md5 (контрольная сумма)\n- jar.sha1, javadoc.jar.sha1, source.jar.sha1, jar.asc.sha1 (цифровые подписи)\n\nСуществует несколько специализироованных веб-приложений, которые выполняют функцию центральных репозиториев: Sonatype Nexus и Artifactory.\n\n## Локальный репозиторий артефактов \n\nПапка на файловой системе, которая скачивает все зависимости и файлы с центрального репозитория и кеширует у себя и это позвояет ускорять выполнение билдов.\n\nВ папке репозитоория хранятся: файлы pom.xml для каждого проекта, jar файлы, файлы с документацией и исходниками и их контрольные суммы.\n- pom\n- jar\n- javadoc.jar\n- source.jar\n- pom.sha1, jar.sha1, javadoc.jar.sha1, source.jar.sha1\n\n## Архетипы\n\nВозможность создавать шаблоны проектов. Такой возмодности не было в Ant.\nАрхетип - готовый шаблон.\n\nСоздание проекта по шаблону выполняется командой:\n\n```\n$ mvn archetype:generate\n```\n\n## TODO\n\nhttps://www.youtube.com/watch?v=R422m8VTevA","date":"2022-06-16T00:00:00.000Z","icon":"fas fa-robot","image":"null","path":"/maven/","order":null,"category":{"title":"automation","path":"/category/automation/"},"tags":[{"title":"Автоматизация тестирования","path":"/tag/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}],"headings":[{"value":"Название проекта и параметры","anchor":"#название-проекта-и-параметры"},{"value":"Список модулей","anchor":"#список-модулей"},{"value":"Информация о проекте","anchor":"#информация-о-проекте"},{"value":"Описание сборки проекта (плагины)","anchor":"#описание-сборки-проекта-плагины"},{"value":"Зависимости","anchor":"#зависимости"},{"value":"Именование директорий","anchor":"#именование-директорий"},{"value":"Жизненные циклы","anchor":"#жизненные-циклы"},{"value":"Сборка проекта. Команда mvn.","anchor":"#сборка-проекта-команда-mvn"},{"value":"Версии пакетов. Релизы и снепшоты","anchor":"#версии-пакетов-релизы-и-снепшоты"},{"value":"Конфликт зависимостей. Дерево зависимостей","anchor":"#конфликт-зависимостей-дерево-зависимостей"},{"value":"Исключение зависимостей","anchor":"#исключение-зависимостей"},{"value":"Плагины. Настройка билда","anchor":"#плагины-настройка-билда"},{"value":"Служебные файлы и каталоги","anchor":"#служебные-файлы-и-каталоги"},{"value":"Профили. Settings.xml","anchor":"#профилиsettingsxml"},{"value":"Центральные репозитории артефактов","anchor":"#центральные-репозитории-артефактов"},{"value":"Локальный репозиторий артефактов","anchor":"#локальный-репозиторий-артефактов"},{"value":"Архетипы","anchor":"#архетипы"},{"value":"TODO","anchor":"#todo"}]}},{"node":{"id":"209d49eb0872440764f01a31442cca0d","title":"Как установить Gradle на Mac OS","content":"\n## Скачиваем бинарный дистрибутив\n\nНеобходимо перейти на url: [gradle.org/releases/](https://gradle.org/releases/) и скачивать дистрибутив для последней версии Gradle.\n\n## Извлекаем архив\n\n```bash\ncd /Library/\nmkdir /Gradle/\nunzip gradle-6.3-bin.zip\n```\n\n## Настраиваем переменные окружения\n\n1. Открыть на редактирование файл `.profile`\n\n```bash\nnano ~/.profile\n```\n\n2. В конец добавляем строчки\n\n```bash\nexport GRADLE_HOME=/Library/Gradle/gradle-6.3\nexport PATH=$PATH:$GRADLE_HOME/bin\n```\n\n3. Нажимаем `Ctrl+X` и соглашаемся с сохранением изменений, нажав на `Y`\n4. Выполняем команду для инициализации изменений и проверяем что переменная среды выводится верно\n\n```bash\nsource ~/.profile\necho $JAVA_HOME\necho $PATH\n```\n\n4. Теперь нужно перезапустить консоль и проверить версию Java\n\n```bash\njava -version\n```\n","date":"2020-05-02T00:00:00.000Z","icon":"fas fa-robot","image":"null","path":"/kak-ustanovit-gradle-na-mac-os/","order":null,"category":{"title":"automation","path":"/category/automation/"},"tags":[{"title":"gradle","path":"/tag/gradle/"},{"title":"setup","path":"/tag/setup/"},{"title":"macos","path":"/tag/macos/"}],"headings":[{"value":"Скачиваем бинарный дистрибутив","anchor":"#скачиваем-бинарный-дистрибутив"},{"value":"Извлекаем архив","anchor":"#извлекаем-архив"},{"value":"Настраиваем переменные окружения","anchor":"#настраиваем-переменные-окружения"}]}},{"node":{"id":"d766f676baa4347410612acd4568d8da","title":"Gradle","content":"\nGradle - это фреймворк который отвечает за структуру, зависимости, плагины вашего проекта для того чтобы управлять этапами сборки этого проекта: компиляция, запуск тестов, публикация. \n\nНаписан на Java  и запускается на JVM. \n\nДля реализации и описания процесса сборки в Gradle реализовано 2 DSL языка на Groovy и на Kotlin.\nОба этих языка предоставляют примерно одинаковый API для работы со сборкой и имеют 2 интерфейса, которые эту сборку описывают.\n\n`project` - описывает как и из чего собрать проект;  \n`settings.gradle` - описывает дополнительные метаданные и список дочерних проектов, если это мультимодульный проект;\n\n## `project`\n\n### task\nПредставляет собой набор задач, который вам нужно выполнить для сборки приложения; эти задачи можно писать самим или добавлять через плагины.\n\n### plugin\nПлагин - это реализация методов интерфейса project, которые могут реализовывать работу с зависимостями, добавлять нужные таски и почти полностью менять, то как работает процесс сборки.\n\n### dependencies\nМожно указать необходимые зависимости для работы вашего приложения. Gradle реализует только логику управления зависимостями а сам репозиторий можно выбрать, настроив это в build скрипте. Это может быть например maven репозиторий.\n\nТип Task в Gradle это по сути класс, который состоит из действия, которое выполняет класс или нескольких действий, входных и выходных данных.\n\nКаждая из этих состовляющих кастомизируема и необязательна. Например, существуют LifeCycle таски, которые сами ничего не делают, но объединяют несколько других тасок.\n\nЗа счет такого разделения Gradle реализует **_инкрементальную_** сборку: перед выполнением таски Gradle проверяет есть ли изменения входных данных и повлияют ли эти изменеия на выходные данные. Если нет, то Gradle просто пропустит таск с надписью **UP TO DATE**, таким образом оптимизируется процесс сборки, чтобы каждый раз не собирать неизменяемые модули, а собирать только то, что изменилось, но эту логику также можно отключить.\n\nЧтобы обеспечить нужный порядок выполнения тасок Gradle строит ориентированный ациклический граф (**DAG, Directed Acyclic Graph**). \n\nГраф - это набор объектов(в нашем случае тасок), обладающих парными связями (каждая таска связана с одной или несколькими(двумя) тасками). \n\nТаски - вершины, связи между ними - ребра. \n\nТо что граф ориентированный значит, что у ребер есть направление (порядок исполнения тасок), то что он ациклический означает, что в нем нет направленных циклов, нельзя из одной точки прийти в нее же, но это не мешает из разных точек прийти в одну. \n\n**Граф для сборки Java приложения**\n\n```mermaid\ngraph TD;\n      build-->check;\n      build-->assemble;\n      check-->test;\n      assemble-->jar;\n      jar-->classes;\n      classes-->compileJava;\n      classes-->processResources;\n```\n\n## Сборка Java приложения\nПроцесс сборки делится на 3 тапа: инициализация, конфигурация и исполнение. \n\n### Инициализация\nВ процессе инициализации Gradle ищет `settings.gradle` файл, из которого определяет это одиночный или мультимодульный проект. После этого он создает instance одного или нескольких проектов. \n\n### Конфигурация\nДалее в процессе конфигурации, gradle для каждого проекта ищет build.gradle скрипт и выполняет все указанные там конфигурационные действия в контексте текущего проекта: подключает плагины, скачивает зависимости, выполняет код находящийся в конфигурационном блоке, создавая объекты сборки. \n\nВо время фазы конфигурации gradle исполняет конфигурационные скрипты всех проектов если это мультимодульный проект, даже если вы собираете только один из модулей. Так что если логика не относится ко всему мультимодульному проекту, лучше ее помещать в конкретные таски. \n\n### Исполнение\nПо сути в процессе конфигурации он строит тот самый граф из тасок и в процессе выполнения, исполняет те таски, которые мы указали.\n\n\nИннициализация Gradle проекта выполняется командой gradle init.\n\n```\n$ gradle init\n```\n\nДалее нужно ответить на несколько вопросов и дождаться окончания инициализации.\nПосле этого в проекте будут созданы файлы: \n- gradlew(исполняющий файл для Linux подобных систем), gradlew.bat(исполняющий файл для Windows);\n- папка gradle, в которой папка wrapper;  \nКак раз этот wrapper и запускает скрипты. Gradle использует wrapper, чтобы можно было однозначно понять версию Gradle, которая будет использоваться для сборки.  \nWrapper сам скачает эту версию Graddle, если на машине он не установлен. Поменять версию и откуда его скачивать можно в файле gradle/gradle-wrapper.properties\n- build.gradle, settings.gradle\n\nВ **settings.gradle** указано только имя проекта, для мультимодульных проектов также здесь указывается список модулей. \n\nВ **build.gradle** имеются следущие секции:\n\n- секция plugins  \nЗдесь размещается обычно плагин id: 'java', который используется для сборки java проектов;  \nЕще существует плагин java-library, он используется если вы хотите поставлять ваше приложение как библиотеку.\n\n```groovy\nplugins {\n    id 'java'\n}\n```\n\n- секция repositories  \nЗдесь можно задать url репозитория из которого будут скачиваться зависимости. Для стандартного Maven репозитория есть алиас mavenCentral().\n\n```groovy\nrepositories {\n    mavenCentral()\n}\n```\n\nТакже в build.gradle, как и в Maven содержатся group, version, description, java.sourceCompatibility, но в отличие от Maven их указывать не обязательно Gradle сможет сам сгенерировать эти данные.\nПосле компиляции нам доступны таски.\n\n- секция dependencies  \n\nЕсть несколько типов зависимостей:\n- implementation - зависимость доступна и в main и в test директориях\n- testImplementation - зависимость доступна только в test директории\n- testAnnitationProcessor - зависимость, которая генерирует код в рантайме на основе аннотаций\n\n```groovy\ndependencies {\n    implementation 'com.codeborne:selenide:6.6.3'\n    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'\n    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'\n    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'\n}\n```\n\nЧтобы после билда запустились тесты, нужно указать каким движком нужно запустить тесты.\n\n```groovy\ntest {\n    useJUnitPlatform()\n}\n```\n\nКогда зависимость требует какой то сложной конфигурацией она зачастую реализуется плагином. Тогда достаточно подключить плагин и не нужно добавлять несколько зависимостей.\n\nВместо testAnnotationProcessor которую мы прописывали для lombok можно добавить плагин.\n\n```groovy\nplugins {\n    id 'io.freefair.lombok' version'5.3.0'\n}\n```\n\n## Custom task\n\nДля добавления своей таски используется коллекция tasks и новые таски в нее добавляются с помощью методы register. В метод register нужно передать название таски(по этому названию мы в последствии сможем обращаться к этой таске)\nвторой параметр опционален, в него можно передать тип таски можно использовать стандартный тип Test который был добавлен Java плагином. \n\n### Таска для запуска тестов из определенной директории\nОтфильтровать тесты которые будут запускаться можно с помощью блока filter в нем есть метод includeTestsMatching.\nНа вход этому методу можно передать wildcard - часть пути до наших тестов со звездочкой.  \n\n```\nsrc\n├── main\n    ├── java\n        ├── simple\n            ├── automation\n├── test\n    ├── java\n        ├── rest\n        ├── utils\n        ├── web\n            ├── findby\n            ├── simple\n```\n\n```groovy\ntasks.register('webtests', Test).configure() {\n    filter {\n        includeTestsMatching(\"web.simple*\")\n    }\n}\n```\n\n### Указываем платформу для запуска тестов из Custom Tasks \n\nЧтобы не прописывать в каждой таске, что она должна запускаться с помощью Junit можно выполнить одну настройку для всех тасок с типом test. \nДля этого на контейнере tasks используем метод withType, который выберет все таски с типом Test, и внутри конфигурационного блока используем useJUnitPlatform().\n\n```groovy\ntasks.withType(Test) {\n    useJUnitPlatform()\n}\n```\n\n### Зауск тестов из Custom Task\nВыполняем запуск тестов webtests командой:\n\n```\n$ ./gradlew webtests\n```\n\n### Добавляем еще одну custom таску\nАналогично можно настроить запуск для rest тестов:\n\n```groovy\ntasks.register('resttests', Test).configure() {\n    filter {\n        includeTestsMatching(\"rest*\")\n    }\n}\n```\n\n### Добавляем зависимость одной таски от другой\nБывает что rest тесты могут использоваться при выполнении web тестов и зачастую бывает удобно прогонять web тесты только если прошли rest тесты.\nДля этого в Gradle есть метод dependsOn с аргументом в виде названия таска, от которой зависит текущая таска. \n\n```groovy\ntasks.register('webtests', Test).configure() {\n    filter {\n        includeTestsMatching(\"web.simple*\")\n    }\n    dependsOn 'resttests'\n}\n```\n\nСоответсвенно, при запуске web тестов будут также запущены rest тесты и они выполнятся только если rest тесты пройдут. \n\n### Запуск независимых тасок в одном скоупе\nНо если у нас rest и web тесты работают независимо как разные модули или части системы, мы можем создать еще один таск regress, который будет запускать и те и другие тесты. Используем тот же метод dependsOn но уаазываем и web и rest тесты.\n\n```groovy\ntasks.register('regress') {\n    dependsOn 'webtests'\n    dependsOn 'resttests'\n}\n```\n\nНо в таком виде запуска мы не знаем в каком порядке запустятся эти таски. \n\n### Настраиваем порядок запуска тасок\nЕсли мы хотим определить порядок, например, чтобы web тесты запускались после rest тестов, мы можем использовать метод mustRunAfter или shouldRunAfter(является менее строгим и не запускает тесты если из-за зависимости образуется петля).\nЧтобы найти ранее созданный таск используем метод getByName и из него запускаем mustRunAfter с аргументом ввиде названия таски после которой нужно запускать.\n\n```groovy\ntasks.register('regress') {\n    dependsOn 'webtests'\n    dependsOn 'resttests'\n    \n    tasks.getByName('webtests').mustRunAfter('resttests')\n}\n```\n\nЛибо при создании таска можно сохранить ее в переменную и тогда можно использовать эти переменные для вызова mustRunAfter.\n```groovy\ndef webtests = tasks.register('webtests', Test).configure() {\n    filter {\n        includeTestsMatching(\"web.simple*\")\n    }\n}\n\ndef resttests = tasks.register('resttests', Test).configure() {\n    filter {\n        includeTestsMatching(\"rest*\")\n    }\n}\n\ntasks.register('regress') {\n    dependsOn 'webtests'\n    dependsOn 'resttests'\n\n    webtests.mustRunAfter(resttests)\n}\n```\n\n### Запуск тестов из директории main\nЕсли по какой то причине тесты оказались не в папке test, а в папке main, то по умолчанию Gradle найти там тесты не может. Поэтому для того чтобы указать нестандартное место исходников можно использовать блок sourceSets.\n\n1. Добавляем новый sourceSet\n\nДля создания нового сета, просто пишем имя сета и скобку, внутри добавляем блок java чтобы указать свойства которые были добавлены java плагином, compileClasspath и runtimeClasspath, добавляем через += чтобы не затирать текущие значения. \nДобавляем туда путь к папке main - main.output. Чтобы указать где взять исходники используем свойство srcDir. \n\n```groovy\nsourceSets {\n    maintests {\n        java {\n            compileClasspath += main.output\n            runtimeClasspath += main.output\n        }\n        srcDir = file(\"src/main/java/simple/automation\")\n    }\n}\n```\n\n2. Настраиваем зависимости для добавленного sourceSet\n\nТакже нам нужны зависимости из блока dependencies, по умолчанию они в блок sourceSet не попадают.\nДля этого используется блок configurations, в нем указываем имя нашего sourceSet и без пробела пишем Implementation или RuntimeOnly. \nДалее с помощью метода extendsFrom можем указать, что зависимости нужно брать стандартные из testImplementation и testRuntimeOnly.\n\n\n```groovy\nconfigurations{\n    maintestsImplementation.extendsFrom(testImplementation)\n    maintestsRuntimeOnly.extendsFrom(testRuntimeOnly)\n}\n```\n\n3. Добавляем таск для запуска тестов, используя sourceSet\n\nСоздаем таск для запуска псевдотестов и указываем, что нужно использовать наш кастомный sourceSet.\n\n```groovy\ntasks.register('pseudotests', Test){\n    testClassesDirs = sourceSets.maintests.output.classesDirs\n    classPath = sourceSets.maintests.runtimeClasspath\n}\n```\n\n4. Добавляем фильтрацию по тегам JUnit\n\nТеперь нужно отфильтровать псевдотесты чтобы запускались только они. Сделать как в предыдущих тасках мы не можем потому что по имени package simple.automation будут запущены также и web тесты.\nНо можно использовать фильтрацию по тегам Junit. Для этого вызываем метод useJUnitPlatform, но к нему добавляем конфигурационный блок includeTags и тег методов или классов которые хотите запустить.\n\n```groovy\ntasks.register('pseudotests', Test){\n    testClassesDirs = sourceSets.maintests.output.classesDirs\n    classPath = sourceSets.maintests.runtimeClasspath\n\n    useJUnitPlatform{\n        includeTags \"pseudo\"\n    }\n}\n```\n\n### Запуск тестов с логированием\nЧтобы добавить уровень логирования INFO при запуске gradlew нужно добавить ключ -i.\nТаком образом мы увидим сообщения которые выводятся в консоль из тестов.\n\n```\n$ ./gradlew -i pseudotests\n```\n\n### Отключаем инкрементальный билд при запуске\nНо сразу мы можем их не увидеть из-за инкрементального билда.\nТак как между запусками исходники тестов не поменялись Gradle просто не запустит их.\nЧтобы они запустились перед таской с тестами запустим также таску clean. Это актуально для запуска тестов из контекста main.\nЕсли запускаются тесты из директории test то нужно использовать таску cleanTest.\n\n```\n$ ./gradlew -i clean pseudotests\n```\n\n### Отключаем инкрементальный билд глобально при настройке таски\nЧтобы каждый раз не вызывать clean таску можно установить значение upToDateWhen в знасение false для всех тасок с типом Test.\n\n```groovy\ntasks.withType(Test) {\n    useJUnitPlatform()\n    outputs.upToDateWhen {false}\n}\n```\n\nЕсли запускаетя несколько независимых тасок с тестами, то Gradle по умолчанию останавливает выполнение на первом упавшем тесте. \nМожно настроить чтобы он все равно переходил к следущей задаче даже если упала предыдущая.\nДля этого можно при запуске добавить ключ --continue\n\n```\n$ ./gradlew --continue resttests webtests\n```\n\n### Отключаем стандартную таску test при билде\n\nДля этого нужно в блоке test присвоить свойству enabled значение false\n\n```groovy\ntest {\n    enabled = false\n}\n``` \n\n### Порядок выполнения build скрипта \n\n### Как добавить кастомные экшены к таскам\n\nСоздаем еще одну таску, но не указываем тип. В этом случае у таски будет тип DefaultTask и к ней не будет привязано никаких экшенов.\nВыводить текст в консоль можно стандартной командой println, но для реального логирования лучше использовать нормальные логгеры.\nДобавим вывод текста в блок конфигурирования таски, а также перед таской и после нее.\nЧтобы добавить кастомные экшены в таску можно использовать блок doFirst - это действие которое будет выполнено перед стандартными экшенами.\nВ нашем случае таких экшенов нет а для тасок с типом Test таким стандартным экшеном был запуск тестов.\nЕще мы можем использовать блок doLast - запускает кастомные экшены после стандартных. И doFirst и doLast можно использовать несколько раз, тогда они будут исполняться в указанном порядке. \n\nПосле запуска по тексту в консоли мы видим порядок выполнения.\n\n```groovy\nprintln \"from build script root\"\ntasks.register(\"gradleTest\").configure{\n    println \"from task root\"\n    doFirst {\n        println \"from do first\"\n    }\n    doLast {\n        println \"from do last\"\n    }\n    doLast {\n        println \"from do last 2\"\n    }\n}\nprintln \"from build script root 2\"\n```\n\nРезультат выполнения:\n\n```console\n$ ./gradlew clean gradleTest\n\n> Configure project :\nfrom build script root\nfrom build script root 2\nfrom task root\n\n> Task :gradleTest\nfrom do first\nfrom do last\nfrom do last 2\n\nBUILD SUCCESSFUL in 637ms\n2 actionable tasks: 1 executed, 1 up-to-date\n```\n\nСначала вполняется код конфигурации, затем код конфигурации самой таски (код внутри таски вне блоков doFirst и doLast), \nа уже дальше выполняются экшены сначала doFirst, потом doLast в порядке в котором они указаны в скрипте.\n\n> Стоит иметь ввиду если бы у нас был многомодульный проект, то сначала вполнился бы код конфигурации из всех build скриптов всех модулей.\n\nТип таски это прсто класс. Можно создать свой тип. \nДля этого используется метод с аннотацией @TaskAction, при этом класс должен наследоваться от DefaultTask.\n\n```groovy\nclass CustomTask extends DefaultTask{\n    @TaskAction\n    def customAction(){\n        println \"from custom action\"\n    }\n}\n```\n\nТеперь можно указать наш кастомный тип при регистрации таски. И теперь между doFirst и doLast экшенами выполнился наш кастомный экшен.\n\n```groovy\nprintln \"from build script root\"\ntasks.register(\"gradleTest\", CustomTask).configure{\n    println \"from task root\"\n    doFirst {\n        println \"from do first\"\n    }\n    doLast {\n        println \"from do last\"\n    }\n    doLast {\n        println \"from do last 2\"\n    }\n}\nprintln \"from build script root 2\"\n```\n\n```console\n$ ./gradlew clean gradleTest\n\n> Configure project :\nfrom build script root\nfrom build script root 2\nfrom task root\n\n> Task :gradleTest\nfrom do first\nfrom custom action\nfrom do last\nfrom do last 2\n\nBUILD SUCCESSFUL in 1s\n2 actionable tasks: 1 executed, 1 up-to-date\n```\n\nТаск может состоять из input, actions, output. Добавим input в наш тип. Это можно сделать с помощью переменной с аннотацией @Input.\nПрисвоим ей дефолтное значение и будем использовать в нашем экшене. Теперь стандартный экшен использует значение из input'а \nи мы можем этот input переопределить в конфигурации самой таски. \n\n```groovy\nprintln \"from build script root\"\ntasks.register(\"gradleTest\", CustomTask).configure{\n    input = \"overrided\"\n    println \"from task root\"\n    doFirst {\n        println \"from do first\"\n    }\n    doLast {\n        println \"from do last\"\n    }\n    doLast {\n        println \"from do last 2\"\n    }\n}\nprintln \"from build script root 2\"\n\n\nclass CustomTask extends DefaultTask{\n    @Input\n    String input = \"default\"\n\n    @TaskAction\n    def customAction(){\n        println \"from custom action with $input\"\n    }\n}\n```\n\nПосле прогона тестов в build/test-results складывается отчет JUnit о прогоне тестов.\nТакже есть тип таски zip позволяет что-нибудь заархивировать.\n\nИмя итогового архива задается через переменную archiveFileName, с помощью distinationDirectory указываем куда будет сложен этот архив и через\nметод from указываем какую именно папку заархивировать. Чтобы указать несколько папок используйте несколько строяек from. \n\nТаска чтобы заархивировать отчет:\n\n```groovy\ntasks.register(\"zipReport\", Zip).configure{\n    archiveFileName = 'report.zip'\n    distinationDirectory = file(\"$buildDir/reports\")\n    from \"$buildDir/reports/tests\"\n}\n```\n\nТакже потом его нужно куда нибудь скопировать. ддля этого есть тип таски Copy. В ней указываем через from откуда взять файл(также можно указать несколько from),\nа в into указываем куда скопировать. \n\n```groovy\ntasks.register('copyReport', Copy).configure{\n    from file(\"$buildDir/reports/report.zip\")\n    into file(\"out\")\n}\n```\n\nЕще одна полезная таска это jar - позволяет заархивировать приложение в jar файл. \nУ него в блоке manifest в свойстве attributes можно задать атрибут Main-Class который указыывает класс в котром наодится исполняемый метод main \nа в блоке from откуда взять скомпилированные классы \n\nJar собирается в папку build/libs и его можно запустить через команду java -jar \n\n```groovy\njar {\n    manifest {\n        attributes \"Main-Class\": \"simple.automation.Main\"\n    }\n    from {\n        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }\n    }\n}\n```\n\n## TODO\n\nhttps://www.youtube.com/watch?v=WOBok2u-SL8\n\nhttps://www.youtube.com/watch?v=NZJTYPLb0iE","date":"2022-06-17T00:00:00.000Z","icon":"fas fa-robot","image":"null","path":"/gradle/","order":null,"category":{"title":"automation","path":"/category/automation/"},"tags":[{"title":"Автоматизация тестирования","path":"/tag/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}],"headings":[{"value":"project","anchor":"#project"},{"value":"Сборка Java приложения","anchor":"#сборка-java-приложения"},{"value":"Custom task","anchor":"#custom-task"},{"value":"TODO","anchor":"#todo"}]}},{"node":{"id":"5475e7c2947d9aa4170220de97792abc","title":"Как создать новый Gradle проект","content":"Для создания нового проекта с модулем Gradle нужно выполнить следущие шаги:\n\n## Создаем новый проект в Idea или открываем уже созданный\n- Если вы только что установили Inteliji Idea и у вас ещё нет созданных проектов, то после запуска Idea предложит создать новый проект, поэтому выбираем Create New Project.\n![Добавляем новый проект](/images/add_new_project_step1.1.png)\n\n- Если вы находитесь в уже созданном проекте то выбираем в верхнем меню File - New - Module...\n![Добавляем новый проект](/images/add_new_project_step1.2.png)\n\n## Выбираем модуль Gradle\nВыбираем модуль Gradle, библиотека Java. Нажимаем Next.\n![Добавляем новый проект](/images/add_new_project_step2.png)\n\n## Указываем GroupId и ArtifactId\nУказываем индетификаторы GroupId и ArtifactId. Нажимаем Finish.\n![Добавляем новый проект](/images/add_new_project_step3.png)\n\nДалее в нашем проекте формируются 2 файла: settings.gradle и build.gradle.\nВ файле build.gradle видим следущее содержание\n\n```groovy\nplugins {\n    id 'java'\n}\n\ngroup 'ru.qa'\nversion '1.0-SNAPSHOT'\n\nsourceCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n```\n## Подключаем библиотеку Selenium\n\n### Переходим в цетральный репозиторий Maven\nПерехом по url: [search.maven.org](http://search.maven.org)\n\n### Ищем библиотеку Selenium\nВводим в поисковую строку запрос java-selenium и выбираем библиотеку\n![Ищем библиотеку Selenium в репозитории Maven Central](/images/search_maven_central_selenium_lib.png)\n\n### Выбираем последнюю версию библиотеки и копируем строку для подключения для сборщика Gradle\n\n![Копируем строку для подключения Selenium для сборщика Gradle](/images/selenium_gradle_implementation_command.png)\n\n```groovy\ndependencies {\n    testImplementation group: 'junit', name: 'junit', version: '4.12'\n    testImplementation 'org.seleniumhq.selenium:selenium-java:4.0.0-alpha-5'\n}\n```\n\n## Указываем путь к Chrome Driver и запускаем первый тест\n\n### Скачиваем дитрибутив Chrome Driver\n\n1. Переходим по url [chromedriver.chromium.org/downloads](https://chromedriver.chromium.org/downloads)\n2. Выбираем ссылку для дистрибутива последней версии\n3. Скачиваем версию для вашей ОС\n4. Извлекаем дистрибутив из архива и помещаем его в папку нашего проекта: src/test/resources\n\n### Указываем путь к Chrome Driver и запускаем первый тест\n\nДля проверки на нужо будет создать файл с простым тестом и запустить его.\nСоздаем src/test/java/FirstTest.java\n\n```java\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.support.ui.WebDriverWait;\n\nimport static org.openqa.selenium.support.ui.ExpectedConditions.titleIs;\n\npublic class FirstTest {\n\n    private WebDriver driver;\n    private WebDriverWait wait;\n\n    @Before\n    public void start(){\n        System.setProperty(\"webdriver.chrome.driver\",\"./src/test/resources/chromedriver\");\n        driver = new ChromeDriver();\n        wait = new WebDriverWait(driver, 10);\n    }\n\n    @Test\n    public void myFirstTest(){\n        driver.get(\"http://www.google.com/\");\n        driver.findElement(By.name(\"q\")).sendKeys(\"webdriver\");\n        driver.findElement(By.name(\"btnK\")).click();\n        wait.until(titleIs(\"webdriver - Поиск в Google\"));\n    }\n\n    @After\n    public void stop(){\n        driver.quit();\n        driver = null;\n    }\n}\n```\n\n","date":"2020-05-01T00:00:00.000Z","icon":"fas fa-robot","image":"null","path":"/kak-sozdat-novyj-gradle-proekt/","order":null,"category":{"title":"automation","path":"/category/automation/"},"tags":[{"title":"gradle","path":"/tag/gradle/"},{"title":"setup","path":"/tag/setup/"},{"title":"java","path":"/tag/java/"}],"headings":[{"value":"Создаем новый проект в Idea или открываем уже созданный","anchor":"#создаем-новый-проект-в-idea-или-открываем-уже-созданный"},{"value":"Выбираем модуль Gradle","anchor":"#выбираем-модуль-gradle"},{"value":"Указываем GroupId и ArtifactId","anchor":"#указываем-groupid-и-artifactid"},{"value":"Подключаем библиотеку Selenium","anchor":"#подключаем-библиотеку-selenium"},{"value":"Указываем путь к Chrome Driver и запускаем первый тест","anchor":"#указываем-путь-к-chrome-driver-и-запускаем-первый-тест"}]}},{"node":{"id":"bb6cb77e3f322d6d8584b894de59db2a","title":"Система сборки. Ant, Maven, Gradle","content":"\n## Что такое система сборки\n\nСистема сборки – это программное обеспечение, обеспечивающее автоматизацию сборки проекта. Конфигурационный файл для системы сборки описывается в текстовом виде. Как следствие, быстрее можно начать проект, за счет того, что что все типовые задачи заключаются в копировании уже готовых сниппетов. Это гораздо быстрее, более гибко, мобильно, и, главное, читаемо, чем вводить то же самое например, через UI диалоги IDE. Ну и в промышленных проектах это более удобно.\n\n\nИнструменты сборки могут делать\n- компиляцию кода - поддерживают определенный компилятор или несколько\n- запуск тестов и определение покрытия\n- статический анализ\n- сборка архивов с бинарными файлами, исходными кодами, документацией\n- построение отчетов\n- скачивание и обеспечение доступа нужных зависимостей\n\nПольза от инструмента сборки\n- Уменьшение числа рутинных ошибок\n- уменьшение времени сборки проекта\n- можно хранить историю сборок и анализировать ошибки\n- уменьшение затрат на разработку и улучшение качества\n\n## Нет автоматизации сборки\n\nИзначально, когда не было систем сборки, то было неудобно было работать с большим числом файлов, была платформозависимость, не поддерживалась условная логика. \n\n```java\n$ javac MyClass.java\n```\n\n## Shell скрипт\n\nС таким подходом можно большие проекты легко собирать можно использовать условную логику можно разделить сборку на стадии:\nclean.sh, compile.sh, test.sh\n\nНо все также такой способ остается платформозависимым и нет единого подхода к описанию сборки.\n```sh\nif test ! -e .nuget; then\n    mkdir .nuget\n    cp $cachedir/nuget.exe .nuget/nuget.exe\nfi\n```\n\n## Make (1977 год)\n\nТакая утилита появилась под Unix. Make использует специальный формат для описания билда и называется Make-file.\nТипичный Make-file содержит название стадий, зависимость стадий. Но основное содержание это такие же команды операционной системы. \nКоманды выполняются запуском make + название стадии: make install, make noopt и т.д.\n\n```sh\nnoopt:\n    $(MAKE) OPTIMIZATION=\"-O0\"\n\nvalgrind:\n    $(MAKE) OPTIMIZATION=\"-O0\" MALLOC=\"libc\"\n\nsrc/help.h:\n    @../utils/generate-command-help.rb > help.h\n\ninstall: all\n    @mkdir -p $(INSTALL_BIN)\n    $(REDIS_INSTALL) $(REDIS_SERVER_NAME) $(INSTALL_BIN)\n    $(REDIS_INSTALL) $(REDIS_BENCHMARK_NAME) $(INSTALL_BIN)\n    $(REDIS_INSTALL) $(REDIS_CLI_NAME) $(INSTALL_BIN)\n```\n\nПреимущества:\n- определяет единый формат сборки\n\nНедостатки:\n- платформозависимый так как внутри также находятся команды операционной системы\n- в makefile используется табуляция и она не видна в текстовых файлах если в такой файл вставить пробел то такой файл становится неправильным и make не может с ним работать\n- нет поддержки нюансов определенного языка: задач, параметров, плагинов)\nmake работает для любого языка\n\n## Apache Ant (2000 год)\n\nПервый инструмент сборки разработанный на java и для java. Имеет конфигурационный файл формата build.xml.\n\nСодержит описание названий стадий, зависимости стадий и могут содержать java - специфичные вещи. Например, как собирать java  код (javac), classpath и т.д.\n\n```java\n<target name=\"compile\" depends=\"init\" description=\"Compile the source\">\n    <javac srcdir=\"${src.main}\" destdir=\"${build.compile}\" classpathref=\"lib.path.id\" includeantruntime=\"true\"/>\n</target>\n\n<target name=\"test-compile\" depends=\"compile\" description=\"Compile tests source\">\n    <javac srcdir=\"${src.test}\" destdir=\"${build.test-compile}\" classpathref=\"lib.path.id\" includeantruntime=\"true\">\n        <classpath>\n            <pathelement location=\"${build.compile}\"/>\n        </classpath>\n    </javac>\n</target>\n```\n\nЗапускается командой:\n```\n$ ant clean compile\n```\n\nПреимущества:\n- поддержка java-специфичных задач\n- переносима между платформами\n- это первая сисетма которая позвоила писать под нее расширения плагины\n- позволяет запускать параметризованные билды\nможно хранить в отдельной секции некоторые параметры; например, версии используемых библиотек и потом замена версии будет означать просто замену библиотеки у вас в билде\n\nНедостатки:\n- нет конвенций версионирования кода\nможно версионировать продукт, как заблагорасудится\n- нет конвенций по расположению кода\nоткрыв проект на ant'e вы можете ожидать, что код будет где угодно;\nобычно их кладут в одну и туже папку, но это не гарантируется;\n- нет автоматического управления зависимостями (их кладут в lib/)\nесли у вас используется какая-нибудь библиотека, то она будет лежать прямо в проекте в папке lib в виде jar файлов, а в большом проекте таких файлов библиотек будет много\n- произвольный набор целей(нет жизненного цикла)\nцели можно называть как угодно и приходится разбираться какая цель что делает\n- императивный стиль описания билда\nбилд состоит из последовательности действий, которые нужно выполнить чтобы собрать проект\nэто плохо\n- ant не поддерживает junit 4\n\n## Apache Ivy (2004 год)\nЭта библиотека решает проблему Ant - авоматическое управление зависимостями. Конфигурационный файл имеет формат ivy.xml. Написан на Java.\n\n```xml\n<ivy-module version=\"1.0\">\n    <info organisation=\"ru.yandex.qatools.allure\" module=\"allure-testng-ant\"/>\n    <dependencies>\n        <dependency org=\"ru.yandex.qatools.allure\" name=\"allure-testng-adaptor\" rev=\"1.4.0\"/>\n        <dependency org=\"org.aspectj\" name=\"aspectjweaver\" rev=\"1.7.4\"/>\n    </dependencies>\n</ivy-module>\n```\n\nМожно в конфигурационном файле указать название зависимости: организация, имя, версия и все библиотеки скачаются с интернета.\n\n## Apache Maven (2004 год)\nИмеет конфигурационный файл pom.xml (Project Object Model). Написан на Java.\n\nЗапускается подобно Ant'у командой:\n```\n$ mvn clean compile\n```\n\n```xml\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-compiler-plugin</artifactId>\n    <version>3.0</version>\n    <configuration>\n        <source>${compiler.version}</source>\n        <target>${compiler.version}</target>\n    </configuration>\n</plugin>\n```\n\nПреимущества:\n- Конвенции по расположению кода, тестов, ресурсов\nмы точно знаем где и в какой директории лежат исходные коды, тесты и т.д.\n- четкий жизненый цикл: цели предопределены\nесть цель для компиляции тестирования отчетов а можно и свои цели создавать\n- имеет четкий способ чтобы поделиться кодом с другими - удаленные репозитории зависимостей\nэто сервера на который закачиваются готовые пакеты с скомпилированным кодом, с исходными кодами, документацией и другие участники разработки могут их оттуда забрать\n- понятный механизм хранения зависимостей - локальный репозиторий\nэто каталог у вас на файловой системе в который сохраняются копии скомпилированных бинарных файлов, документации и т.д. - копия удаленного репозитория\n- правила версионирования кода\nМавен вводит понятия релизов и snapshot'ов и как версии должны меняться одна от другой\n- поддерживает многомодульные проекты\nможно разбивать большой проект на небольшие кусочки/модули которые могут собираться по отдельности и распространяться, передаваться версионироваться по отдельности\n- описывает подход декларативно \nговорит не в какой последовательности мы должны выполнить шаги а то что мы хотим получить на выходе\n- модульная структура(поддержка плагинов)\nдаже простые действия делают плагины: есть плагин для компиляции, плагин для тестирования и т.д.\n\n## Gradle (2009 год)\nНаписан на Groovy. Использует в качестве файлов конфигурации файлы использующие DSL(Domain Specific Language) на Groovy. \nФайл называется build.gradle. Команда для запуска аналогична Ant, Maven:\n\n```\n$ gradle clean compile\n```\nВозможности Gradle:\n- поддерживает основные воможности Maven;\n- инкрементальная компиляция\nумеет собирать только те исходные коды которые изменились\n- использует теже удаленные репозитории как и мавен\n- эмулирует жизненный цикл мавена, но можно задавать и свои цели\n- поддерживает плагины, но они не совместимы с Maven \n","date":"2022-06-16T00:00:00.000Z","icon":"fas fa-robot","image":"null","path":"/sistema-sborki-ant-maven-gradle/","order":null,"category":{"title":"automation","path":"/category/automation/"},"tags":[{"title":"Автоматизация тестирования","path":"/tag/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}],"headings":[{"value":"Что такое система сборки","anchor":"#что-такое-система-сборки"},{"value":"Нет автоматизации сборки","anchor":"#нет-автоматизации-сборки"},{"value":"Shell скрипт","anchor":"#shell-скрипт"},{"value":"Make (1977 год)","anchor":"#make-1977-год"},{"value":"Apache Ant (2000 год)","anchor":"#apache-ant-2000-год"},{"value":"Apache Ivy (2004 год)","anchor":"#apache-ivy-2004-год"},{"value":"Apache Maven (2004 год)","anchor":"#apache-maven-2004-год"},{"value":"Gradle (2009 год)","anchor":"#gradle-2009-год"}]}},{"node":{"id":"03f6cb36de6e925d79edb18d08fda8fe","title":"JUnit 5","content":"\nМожно определять тестовые методы без модификатора.\n\n```java\n@Test\nvoid someTest(){\n    assertTrue(true);\n}\n```\n\n## Build tool support\n\n```groovy\ntest {\n    useJUnitPlatform {\n        includeTags 'fast', 'smoke'\n        excludeTags 'slow', 'ci'\n\n        include 'org/foo/**'\n        exclude 'org/boo/**'\n    }\n}\n```\n\nhttps://www.youtube.com/watch?v=RAOAcq97KZM\n\nhttps://www.youtube.com/watch?v=w1ey2zjf3-s\n\nhttps://www.youtube.com/watch?v=DAszLeWMsqU\n\nhttps://www.youtube.com/watch?v=751gMXH-lEE\n\nhttps://www.youtube.com/watch?v=r-8EGXMFJaw\n\nhttps://www.youtube.com/watch?v=ZIkIUCyJBGU\n\nhttps://www.youtube.com/watch?v=3pOjh6O7-cg\n\nhttps://www.youtube.com/watch?v=W1INR0I3FCo&list=PLnh8EajVFTl5AqvBosxUefReW4nC35P0x","date":"2022-06-18T00:00:00.000Z","icon":"fas fa-robot","image":"null","path":"/j-unit-5/","order":null,"category":{"title":"automation","path":"/category/automation/"},"tags":[{"title":"Автоматизация тестирования","path":"/tag/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}],"headings":[{"value":"Build tool support","anchor":"#build-tool-support"}]}},{"node":{"id":"bc7ff23838128e5ec3fd7300d34483d6","title":"Selenium & Selenide","content":"\n\n✅ [QA Fest: Selenide для профи - Андрей Солнцев. QA Fest 2019](https://youtu.be/be_cTwayRQc)\n\n❌ [Simple Automation: Автоматизация для QA: Selenide](https://youtu.be/xknQcm6H87M)\n\n❌ [Hillel IT School: Selenide: tips and tricks](https://youtu.be/5WxlKf_EFII)\n\n❌ [Heisenbug: Алексей Виноградов — Selenide Брандашмыг — интерактивное путешествие по дорогам библиотеки](https://youtu.be/3J6mX98TSjk)\n\n❌ [Heisenbug: Алексей Виноградов, Андрей Солнцев – Selenide Puzzlers](https://youtu.be/y-ZyxTWHH08)\n\n❌ [comaqa: Selenide 2019 - Quo vadis? Новинки и малоизвестные функции библиотеки. Алексей Виноградов](https://youtu.be/U5lpTH-FwqE)\n\n❌ [Somov Studio: Применение Cucumber & Selenide в автоматизации тестирования](https://youtu.be/s33NCtGiVFM)\n\n❌ [DEVCLUB.EU: 2017.12.29 Андрей Солнцев - Selenide Puzzlers](https://youtu.be/LQSrhmzXpHM)\n\n❌ [comaqa:Selenide (Selenium WebDriver + Java): используем listener-ы, Андрей Стахиевич](https://youtu.be/yQa47hx53Zc)\n\n## Как начать проект автоматизации с Selenide\n\nhttps://www.youtube.com/watch?v=1aq4gYflEho\n\nhttps://www.youtube.com/watch?v=pbvJ8rmh7Ws\n\nhttps://www.youtube.com/watch?v=h254Tccxgq4\n\nhttps://www.youtube.com/watch?v=WETyt87o_R4","date":"2022-06-18T00:00:00.000Z","icon":"fas fa-robot","image":"null","path":"/selenium-and-selenide/","order":null,"category":{"title":"automation","path":"/category/automation/"},"tags":[{"title":"selenium","path":"/tag/selenium/"},{"title":"selenide","path":"/tag/selenide/"}],"headings":[{"value":"Как начать проект автоматизации с Selenide","anchor":"#как-начать-проект-автоматизации-с-selenide"}]}},{"node":{"id":"3dd0555dcb84ed50931b5c0d9363504e","title":"Ресурсы. Selenium 4","content":"\n## EN version\n\nhttps://www.youtube.com/watch?v=3SaCFLiKoTs\n\nhttps://www.youtube.com/watch?v=2VKeDFmQFVQ\n\n\n## RU version\n\nhttps://www.youtube.com/watch?v=d7aq0aXYEss&t\n\nhttps://www.youtube.com/watch?v=7_Q8x37fPLw","date":"2022-06-08T00:00:00.000Z","icon":"fas fa-bug","image":"null","path":"/resursy-selenium-4/","order":null,"category":{"title":"automation","path":"/category/automation/"},"tags":[{"title":"qa","path":"/tag/qa/"}],"headings":[{"value":"EN version","anchor":"#en-version"},{"value":"RU version","anchor":"#ru-version"}]}},{"node":{"id":"69e2a0e8f352a43863174d1d7360b43a","title":"Что такое Selenium?","content":"\n## Что такое Selenium?\n**Selenium** - это инструмент для автоматизированного управления браузерами _или_ драйвер для браузера, специальное ПО которое предназначено для управления браузерами и позволяет другим программам взаимодействовать с браузером.\n\nSelenium специальных средств для тестирования не имеет, он позволяет только управлять браузером.\n\n## Что умеет Selenium\nОбычно драйвер предоставляет некоторый набор команд, который соответствует некоторым функциям устройства, в нашем случае функциям браузера.\n\nДрайвер может:\n- запускать браузер \n- открывать URL адреса\n- находить ссылки или другие элементы\n- выполнять действия над элементами\n- остановить браузер\n\n## Реализации Selenium\nДля разных браузеров существуют разные драйверы, но они предоставляют одинаковый набор команд.\nТак же существуют разные реализации интерфейсов для разных языков программирования.\n\nВ рамках проекта Selenium разрабатываются интерфейсы для 5 языков:\n- Java\n- Python\n- Ruby\n- JavaScript\n- C#\n\n## Принцип работы\n\nКаждое веб приложение условно можно разделить на 2 части: \n- веб сервер, на котором реализуется логика и находится БД \n- браузер, который предоставляет графический пользовательский интерфейс к этому приложению. \n\nБраузер и веб сервер взаимодействуют по протоколу HTTP. Браузер отправляет запрос, сервер его обрабатывает и отправляет обратно ответ.\nЭтот ответ содержит информацию, которую браузер использует для визуализации. \n\nДля того, чтобы тестировать серверную часть, браузер не нужен, его можно заменить http клиентом(библиотека которая умеет отправлять запросы по протоколу http и получать ответы), такие клиенты сузествуют для разных языков они не имеют пользовательского интерфейс, только программный(API). \n\nОднако такой способ игнорирует всё, что происходит в браузере (в браузере может быть реализована часть логики плюс сам интерфес становится более динамичным и его тоже нужно тестировать).\n\nSelenium предоставляет клиентскую библиотеку для разных языков программирования, через которую можно связаться с самим Selenium интерфейсом, который уже взаимодействует с браузером.\n\nБольшинство браузеров сейчас  предоставляют интерфейс для управления или отладки, которым можно воспользоваться для внедрения JavaScript кода и выполнения этого кода в браузере.\n\nИзначально браузеры не предоставляли такие интерфейсы, кроме IExplorer и в нем работа была реализована изначально таким способом. Но потом появилась возможность взаимодействовать через интерфейсы и с другими браузерами.\n\n### Интерфесы которые предоставляют браузеры\nРазные браузеры предоставляют разные интерфейсы:\n- Chrome - Remote Debug\n- Firefox - Marionette\n- IE - COM API\n\n### Selenium интерфейсы для разных браузеров\nSelenium предоставляет единый интерфейс, а сам взаимодействует с браузерами по их интерфейсу:\n- Chrome - chromedriver\n- Firefox - geckodriver\n- IE - IEDriverServer","date":"2022-06-12T00:00:00.000Z","icon":"fas fa-robot","image":"null","path":"/chto-takoe-selenium/","order":null,"category":{"title":"automation","path":"/category/automation/"},"tags":[{"title":"Автоматизация тестирования","path":"/tag/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}],"headings":[{"value":"Что такое Selenium?","anchor":"#что-такое-selenium"},{"value":"Что умеет Selenium","anchor":"#что-умеет-selenium"},{"value":"Реализации Selenium","anchor":"#реализации-selenium"},{"value":"Принцип работы","anchor":"#принцип-работы"}]}}]}},"relatedCategory":{"id":"e9c3ea3dc1c81f4432b35adc5e174d7f","title":"automation","path":"/category/automation/","related":[{"id":"manual","path":"/category/manual/","title":"manual"},{"id":"api","path":"/category/api/","title":"api"}]}},"context":{}}