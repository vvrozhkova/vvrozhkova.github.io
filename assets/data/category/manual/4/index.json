{"hash":"7ef89d9cd3f6579eddc6e6b2d3ffbd18a73c2491","data":{"category":{"title":"manual","path":"/category/manual/","belongsTo":{"totalCount":44,"pageInfo":{"totalPages":5,"currentPage":4},"edges":[{"node":{"id":"8559d83dce8d8f6293083cba91830c2f","title":"Master Test Plan и тестовые планы для каждого уровня","content":"\n## План тестирования (Test plan)\n\n_“План тестирования (test plan): Документ, описывающий цели, подходы, ресурсы и график запланированных тестовых активностей. Он определяет объекты тестирования, свойства для тестирования, задания, ответственных за задания, степень независимости каждого тестировщика, тестовое окружение, метод проектирования тестов, определяет используемые критерии входа и критерии выхода и причины их выбора, а также любые риски, требующие планирования на случай чрезвычайных обстоятельств.” (IEEE 829)_\n\nВ то время как стратегия излагает общие принципы или теорию, план детально описывает практические аспекты того, как проект будет протестирован в реальности.\n\nХотя есть рекомендации по составлению тест плана (IEEE 829 ([1](https://www.ecs.csun.edu/\\~rlingard/comp480/TestPlanTemplate.pdf), [2](https://jmpovedar.files.wordpress.com/2014/03/ieee-829.pdf)), [RUP](https://tmguru.ru/wp-content/uploads/2015/01/TestPlanTemplate\\_RUP.pdf)), нет единственно правильного шаблона или формата для написания тест-планов. В обзорных статьях можно встретить и свои варианты:\n\n[Такой](https://theqalead.com/topics/leadership-in-test-test-planning/):\n\n* Перечень планируемых тестовых активностей ([Test Activities](https://theqalead.com/wp-content/uploads/2021/06/Test-activities-infographic-1024x579.png));\n* Тестовая логистика ([Test Logistics](https://theqalead.com/wp-content/uploads/2021/06/Test-logistics-infographic-1024x579.png));\n* Необходимые ресурсы ([Resources](https://theqalead.com/wp-content/uploads/2021/06/Resources-infographic-1024x579.png));\n* Необходимые коммуникации ([Your Support Network](https://theqalead.com/wp-content/uploads/2021/06/Typical-requirements-infographic-1024x579.png));\n* Оценки трудозатрат (Estimates);\n* Зависимости и риски (Dependencies, Risks and Assumptions);\n* Порядок обсуждений и отчетности в процессе работы (Communication, Commitment and Progress Reporting);\n\nИли:\n\n* Какие ресурсы требуются и когда;\n* Когда задачи нужно начинать и заканчивать, и кто их будет выполнять;\n* Навыки, необходимые для выполнения задач;\n* Инструменты и технологии, поддерживающие план;\n* Результаты и когда они будут доставлены;\n* Затраты на усилия и необходимые ресурсы;\n* Процесс продвижения проекта / процесса по стадиям;\n* Риски, угрожающие доставке.\n\nВ какой-то момент можно заметить, что все они предлагают плюс-минус похожую структуру и пункты, а итоговый вариант всё равно будет уникальным для каждого конкретного проекта. Весомая часть литературы по данной теме предполагает работу по водопадной модели разработки и эта информация не так актуальна в наше время. Это не значит, что в гибких методологиях не бывает тест-планов. Даже в Agile необходимо предварительное планирование для структурирования работы, распределения ресурсов и планирования - по крайней мере, на высоком уровне - процесса выпуска на ближайшие месяцы. Но итерация за итерацией, а часто и день за днем, общий план постоянно корректируется с учетом событий и новой информации, которая появляется на свет. Планирование - это непрерывное обучение, а не задача с конечным результатом.\n\nВ гибких методологиях всё чаще говорят о концепции одностраничного тест-плана, а в случае необходимости дополнений и уточнений просто создаются ссылки на внешние страницы/документы. Такой план может быть и в гугл-таблицах, в виде дашборда, mind map, и как вам самим вздумается. Тест-план призван отвечать на те вопросы, ради которых его создают. Порой весомую часть пользы от данной активности можно получить на этапе самого планирования и составления плана, а не от самого документа. Если команда понимает, что никакой практической “боли” этот документ и его создание не решает, на него нет времени, то можно прекрасно обойтись и без его формализации, т.к. в некоей словесной форме он всё равно будет существовать всегда.\n\n_“В зависимости от размеров команды, сложности продукта, количества зависимостей и строгости критериев качества эти вопросы могут быть иными. Если процесс тестирования имеет большое количество зависимостей, например разные команды должны выполнять разные этапы тестирования в строго определенном порядке - это необходимо фиксировать. Без этого ты не только не сможешь планировать работу команд, но и несколько раз выстрелишь себе в ногу, когда команды будут блокировать друг друга из-за того, что заранее не проговорили зависимости. Чем более комплексным является объект тестирования (и как результат само тестирование), тем более подробного описания требует методология тестирования, применяемые подходы и практики - просто за счёт увеличения объема того, что необходимо проверить. Без этого сложно оценивать объемы работ, давать эстимейты и строить планы по релизам. Чем более точно и строго необходимо оценивать уровень качества, тем более детально должны быть описаны критерии прохождения тестирования, ключевые метрики и_ [_quality gate_](https://habr.com/ru/post/542676/)_\\`ы. Потому что без их формализации нельзя будет однозначно оценить результаты тестирования. Люди, находящиеся за пределами команды тестирования (а иногда и команды разработки в целом) хотят понимать, что вообще происходит на этапе тестирования и как обеспечивается качество продукта. Иногда это связано с регуляторикой отрасли, иногда для согласования объемов работы с заказчиком, иногда из-за высокой степени рисков или просто потому, что работа этих людей напрямую зависит от результатов процесса обеспечения качества.“ (с)_ [_Shoo and Endless Agony: What's the plan?_](https://t.me/shooandendlessagony/76)\\_\\_\n\n**Виды тест-планов**:\n\n* **Мастер Тест-План** ([Master Test Plan](https://tryqa.com/what-are-master-test-plans-level-test-plan-examples-when-to-use/)): \\_“Главный план тестирования (master test plan, project test plan): План тестирования, обычно охватывающий несколько уровней тестирования.” (ISTQB). \\_Это может быть как единственный базовый план, так и главный в иерархии нескольких планов, самый статичный и высокоуровневый. Нужен когда:\n  * продукт имеет множество релизов или итераций, между которыми сохраняется общая информация, которую нет смысла повторять;\n  * различные тестовые команды работают над одним продуктом, выполняя различные задачи, которые необходимо объединить в рамках одного документа;\n* **Детальный Тест-план** (Phase Test plan): _“Уровневый план тестирования (level test plan): План тестирования, обычно относящийся к одному уровню тестирования.” (ISTQB)._ Детальный план составляется на каждый релиз/итерацию или для каждой команды в рамках проекта и является динамическим, т.е. может претерпевать изменения по необходимости. Его основная цель - кратко и доходчиво отразить задачи тестирования. Детальных планов может быть несколько для отдельных модулей ПО или команд тестирования. Кроме того, могут быть созданы планы для отдельных уровней тестирования (Level Test Plan) или видов тестирования. В Agile проектах могут быть планы итерационного тестирования ([iteration testing plans](https://tryqa.com/what-is-release-and-iteration-planning-in-agile-methodology/)) для каждой итерации;\n* **План приемочных испытаний** (Acceptance Test Plan, ПСИ):\\*\\* \\*\\*план приемочного тестирования отличают от обычного плана тестирования факторы, которые приводят к принятию бизнес-решения. План приемочного тестирования - это один из жизненно важных документов, который содержит руководство по выполнению приемочного тестирования для конкретного проекта. Пишется на основе бизнес-требований (Business Requirements). Ревью этого плана обычно выполняется by Managers/Business Analysts/Customers.\n\n**Тест план (Test Plan)** — это документ, описывающий весь объем работ по тестированию, начиная с описания объекта, стратегии, расписания, критериев начала и окончания тестирования, до необходимого в процессе работы оборудования, специальных знаний, а также оценки рисков с вариантами их разрешения.\nОтвечает на вопросы:\nЧто надо тестировать?\nЧто будете тестировать?\nКак будете тестировать?\nКогда будете тестировать?\nКритерии начала тестирования.\nКритерии окончания тестирования.\n\nОсновные пункты тест плана\nВ стандарте IEEE 829 перечислены пункты, из которых должен (пусть — может) состоять тест-план:\na) Test plan identifier;\nb) Introduction;\nc) Test items;\nd) Features to be tested;\ne) Features not to be tested;\nf) Approach;\ng) Item pass/fail criteria;\nh) Suspension criteria and resumption requirements;\ni) Test deliverables;\nj) Testing tasks;\nk) Environmental needs;\nl) Responsibilities;\nm) Staffing and training needs;\nn) Schedule;\no) Risks and contingencies;\np) Approvals.\n\nИсточники:\n\n* [Leadership in test: test planning](https://theqalead.com/topics/leadership-in-test-test-planning/)\n* [Acceptance Testing Documentation With Real-Time Scenarios](https://www.softwaretestinghelp.com/acceptance-test-plan/)\n\nДоп. материал:\n\n* [The Inquiry Method for Test Planning](https://testing.googleblog.com/2016/06/the-inquiry-method-for-test-planning.html)\n* [Тест-план не для галочки, или 8 вопросов к заказчику на старте проекта](https://dou.ua/lenta/columns/creating-quality-test-plan/)\n* [Blog: What Should A Test Plan Contain?](https://www.developsense.com/blog/2008/12/what-should-test-plan-contain/)\n* [The One Page Test Plan](https://www.ministryoftesting.com/dojo/lessons/the-one-page-test-plan)\n* [TEST PLAN: What is, How to Create (with Example)](https://www.guru99.com/what-everybody-ought-to-know-about-test-planing.html)\n* [Developing a solid yet simple test plan](https://www.softwaretestingnews.co.uk/developing-a-solid-yet-simple-test-plan/)\n* [Тест-план и тест-стратегия: преимущества, состав, советы по ведению](https://dou.ua/forums/topic/35324/?from=fpcol)\n* [Действительно ли вам нужен тест-план?](https://telegra.ph/Dejstvitelno-li-vam-nuzhen-test-plan-11-03)\n* [Что такое тест план и как его написать?](https://testengineer.ru/chto-takoe-test-plan-i-kak-ego-napisat/)\n* [End-to-end, приди и порядок наведи](https://habr.com/ru/company/arcadia/blog/653773/)\n* [Еще одна история о важности Тест Плана](https://serioustester.io/tpost/eeseb021v1-esche-odna-istoriya-o-vazhnosti-test-pla)\n* Примеры: [раз](https://testerchronicles.ru/wp-content/uploads/2018/03/2018-03-12\\_16-33-10.png), [два](https://hsto.org/getpro/habr/upload\\_files/5be/94e/842/5be94e842c3417a918830cc9f5f1b785.png); [Acceptance Test Plan Template](https://www.softwaretestinggenius.com/docs/tplatp.doc)\n","date":"2022-05-23T00:00:00.000Z","icon":"fas fa-bug","image":"null","path":"/master-test-plan-i-testovye-plany-dlya-kazhdogo-urovnya/","order":16,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Master Test Plan и тестовые планы для каждого уровня","path":"/tag/Master%20Test%20Plan%20%D0%B8%20%D1%82%D0%B5%D1%81%D1%82%D0%BE%D0%B2%D1%8B%D0%B5%20%D0%BF%D0%BB%D0%B0%D0%BD%D1%8B%20%D0%B4%D0%BB%D1%8F%20%D0%BA%D0%B0%D0%B6%D0%B4%D0%BE%D0%B3%D0%BE%20%D1%83%D1%80%D0%BE%D0%B2%D0%BD%D1%8F/"}],"headings":[{"value":"План тестирования (Test plan)","anchor":"#план-тестирования-test-plan"}]}},{"node":{"id":"bcbed88dace3edaa8cadf8a5e91154c2","title":"Понятие Test Case и Test Suite","content":"\n## Тестовый сценарий (Test scenario)\n\n_Сценарий выполнения (test scenario): См. спецификация процедуры тестирования. (ISTQB)_\n\n_Спецификация процедуры тестирования (test procedure specification): Документ, описывающий последовательность действий при выполнении теста. Также известен как ручной сценарий тестирования. (IEEE 829) См. также спецификация теста_\n\n_Спецификация теста (test specification): Документ, состоящий из спецификации проектирования теста, спецификации тестовых сценариев и/или спецификации процедуры тестирования (ISTQB)_\n\n**Тестовый сценарий** (Test scenario) - последовательность действий над продуктом, которые связаны единым ограниченным бизнес-процессом использования, и сообразных им проверок корректности поведения продукта в ходе этих действий. Иными словами, это последовательность шагов, которые пользователь может предпринять, чтобы использовать ваше программное обеспечение. Сценарии тестирования должны учитывать все возможные способы выполнения задачи (функции) и охватывать как положительные, так и отрицательные тестовые примеры, потому что конечные пользователи могут не обязательно предпринимать шаги, которые вы от них ожидаете. Используя тестовые сценарии, мы оцениваем работу приложения с точки зрения конечного пользователя. Фактически при успешном прохождении всего тестового сценария мы можем сделать заключение о том, что продукт может выполнять ту или иную возложенную на него функцию.\n\n**Как писать сценарии**:\n\n* Тщательно ознакомьтесь с требованиями (Спецификация бизнес-требований (BRS), Спецификация требований к программному обеспечению (SRS), Спецификация функциональных требований (FRS)) тестируемой системы (SUT), use cases, книгами, руководствами и т. д.;\n* Для каждого требования выясните, как пользователь может использовать программное обеспечение всеми возможными способами;\n* Составьте список сценариев тестирования для каждой функции тестируемого приложения (AUT);\n* Создайте матрицу прослеживаемости и свяжите все сценарии с требованиями. Это позволит вам определить, сопоставлены ли все требования с тестовыми сценариями или нет;\n* Отправьте сценарии тестирования руководителю, чтобы он рассмотрел и оценил их. Даже сценарии тестирования дополнительно проверяются всеми заинтересованными сторонами.\n\nНе стоит путать Test scenario с **Test Suite** (набор тестов, тест-свит).\n\n_Набор тестов (test suite): Комплект тестовых наборов для исследуемого компонента или системы, в котором обычно постусловие одного теста используется в качестве предусловия для последующего. (ISTQB)_\n\nTest Suite - это некоторый набор формализованных Test case, объединенных между собой по общему логическому признаку, которые позволяют проверить одну из частей или вариантов сценария. Test Scenario представляет собой некий пользовательский сценарий по тестированию некой функциональности. Что-то, что пользователь может захотеть сделать с вашей системой, и вы хотите это проверить. Сценарий может иметь один или несколько Test Suite.\n\nИсточники:\n\n* [How To Create Test Scenarios With Examples](https://www.softwaretestingmaterial.com/test-scenarios/)\n* [Каких ответов я жду на собеседовании по тестированию](https://habr.com/ru/post/254209/)\n\nДоп. материал:\n\n* [Test Scenarios Registration Form](https://www.softwaretestingmaterial.com/test-scenarios-registration-form/)\n* [Test Scenarios of GMail](https://www.softwaretestingmaterial.com/test-scenarios-of-gmail/)\n* [Шаблон сценария](https://www.softwaretestingmaterial.com/wp-content/uploads/2021/11/Sample-Test-Scenario-Template.xlsx)\n\n## Тест-кейс (Test case)\n\n_Тестовый сценарий (test case): Набор входных значений, предусловий выполнения, ожидаемых результатов и постусловий выполнения, разработанный для определенной цели или тестового условия, таких как выполнения определенного пути программы или же для проверки соответствия определенному требованию. (IEEE 610)_\n\n**Test case** (тест-кейс, тестовый пример/случай) - это артефакт, описывающий совокупность шагов, конкретных условий и параметров, необходимых для проверки реализации тестируемой функции или ее части. Более строго - формализованное описание одной показательной проверки на соответствие требованиям прямым или косвенным.\n\n**Содержание тест-кейса**:\n\n* Идентификатор набора тестов (**Test Suite ID**): Идентификатор набора тестов, в которых входит этот кейс;\n* Идентификатор тестового кейса (**Test Case ID**): Идентификатор самого кейса;\n* Заголовок кейса (**Test Case Summary**): Краткое и емкое название проводимой проверки;\n* Связанное требование (**Related Requirement**): Идентификатор требования, к которому относится / отслеживается данный тестовый пример;\n* Предварительные условия (**Prerequisites**): Любые предпосылки или предварительные условия, которые должны быть выполнены перед выполнением теста;\n* Шаги выполнения (**Test Script / Procedure**): Шаги выполнения теста;\n* Тестовые данные (**Test Data**): Тестовые данные или ссылки на тестовые данные, которые должны использоваться при проведении теста;\n* Ожидаемый результат (**Expected Result**): результат, который мы ожидаем получить после выполнения шагов теста;\n* Статус пройден или не пройден (**Status**): Другие статусы могут быть «Не выполнено», если тестирование не проводится, и «Заблокировано», если тестирование заблокировано;\n* Заметки (**Remarks**): Любые комментарии к тесту или выполнению теста;\n* Создано (**Created By**): Имя автора тестового примера;\n* Дата создания (**Date of Creation**): Дата создания тестового примера (опционально модификации);\n* Выполнено (**Executed By**): Имя человека, выполнившего тест;\n* Дата выполнения (**Date of Execution**): Дата выполнения теста;\n* Тестовое окружение (**Test Environment**): оборудование / программное обеспечение / сеть, в которых выполнялся тест, т.е. все необходимые сведения об окружении, чтобы можно было воспроизвести полученный результат.\n\nВ иностранной литературе часто делят кейсы на две категории:\n\n* **Высокоуровневый тест-кейс** (high level test case или logical test case) - тест-кейс без конкретных входных данных и ожидаемых результатов. Как правило, ограничивается общими идеями и операциями, схож по своей сути с подробно описанным пунктом чек-листа. Достаточно часто встречается в интеграционном тестировании и системном тестировании, а также на уровне smoke. Может служить отправной точкой для проведения исследовательского тестирования или для создания низкоуровневых тест-кейсов.\n* **Низкоуровневый тест-кейс** (low level test case) - тест-кейс с конкретными входными данными и ожидаемыми результатами. Представляет собой «полностью готовый к выполнению» тест-кейс и вообще является наиболее классическим видом тест-кейсов. Начинающих тестировщиков чаще всего учат писать именно такие тесты, т.к. прописать все данные подробно - намного проще, чем понять, какой информацией можно пренебречь, при этом не снизив ценность тест-кейса.\n\n**Нужно ли вообще писать кейсы?** Ответ тот же, что и для любого документа - если написание кейсов решает определенную задачу и это обоснованно, то писать. Если вы один, не путаетесь в небольшом проекте, пользуетесь чек листами/mind map/.., можете и без TMS/test runs reports наглядно предоставлять актуальные сведения о протестированности/качестве заинтересованным лицам, то не писать.\n\n**Может ли быть несколько ожидаемых результатов?** Может, если это необходимо, но сразу после каждого шага.\n\n**Можно ли объединять позитивные и негативные тест-кейсы?** Позитивные можно, негативные нельзя, поскольку сложно будет понять, что именно влияет на результат.\n\nИсточники:\n\n* [Test Case](https://softwaretestingfundamentals.com/test-case/)\n\nДоп. материал:\n\n* [Тест-кейсы: полная лекция из ШНАТ](https://www.youtube.com/watch?v=0xuOOlhb5SQ)\n* [Составление тест-кейсов](https://www.youtube.com/watch?v=VG8hAQjxAkI)\n* [12 характеристик высокоэффективных тестов](https://software-testing.ru/library/testing/test-analysis/3495-12-traits-of-highly-effective-tests)\n* [Blog: Evaluating Test Cases, Checks, and Tools](https://www.developsense.com/blog/2021/04/evaluating-test-cases-checks-and-tools/)\n* [How to write Test Cases for a Login Page](https://www.softwaretestingmaterial.com/test-scenarios-login-page/)\n* [Как писать тест-кейсы: полное руководство](https://testengineer.ru/kak-pisat-test-kejsy-polnoe-rukovodstvo/)\n* [Основные методики создания тест-кейсов](https://testengineer.ru/osnovnye-metodiki-sozdaniya-test-kejsov/)\n* [Вложил в тест-кейс аттач? Поясни его!](https://okiseleva.blogspot.com/2018/11/blog-post\\_23.html)\n* [Результат в тест-кейсе - один или много?](https://okiseleva.blogspot.com/2020/05/blog-post\\_14.html)\n* [Правила написания предварительных шагов в тест-кейсах](https://okiseleva.blogspot.com/2019/12/blog-post\\_24.html)\n* [Название тест-кейса - как оформлять](https://okiseleva.blogspot.com/2020/12/blog-post\\_17.html)\n* [5 атрибутов хорошего тест-кейса. Правила написания тест-кейсов. Тест-кейсы в TestRail.](https://www.youtube.com/watch?v=S4UyfH\\_QNec)\n* Примеры: [раз](https://drive.google.com/uc?export=download\\&id=0ByI5-ZLwpo25eXFlcU5ZMTJsT28), [два](https://www.softwaretestingmaterial.com/wp-content/uploads/2016/02/Sample-Test-Case-Template-1.png)","date":"2022-05-13T00:00:00.000Z","icon":"fas fa-bug","image":"null","path":"/ponyatie-test-case-i-test-suite/","order":17,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Тестовая документация","path":"/tag/%D0%A2%D0%B5%D1%81%D1%82%D0%BE%D0%B2%D0%B0%D1%8F%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F/"}],"headings":[{"value":"Тестовый сценарий (Test scenario)","anchor":"#тестовый-сценарий-test-scenario"},{"value":"Тест-кейс (Test case)","anchor":"#тест-кейс-test-case"}]}},{"node":{"id":"525bc13378096b220c0514d29eceafe8","title":"Понятие Test Basis, Test Condition и Test Procedure","content":"\n## Базис тестирования (Test basis)\n\n_Базис тестирования (test basis): Документ, на основании которого определяются требования к компоненту или системе. Документация, на которой базируются тестовые сценарии. Если правка данного документа может быть осуществлена только в процессе формальной процедуры внесения изменения, то такой базис тестирования называется замороженным базисом тестирования. (ISTQB)_\n\n_Базис тестирования (test basis): Свод знаний, используемых в качестве базы проекта тестирования и контрольных примеров. Примечание - Базис тестирования может иметь форму документов, таких как спецификация требований, спецификация проекта или спецификация модуля, но может также представлять собой недокументированное понимание требуемого поведения. (ГОСТ 56920)_\n\n_Тестовое условие (test condition): Тестируемый аспект компонента или системы, такой как функция, транзакция, возможность, атрибут качества или структурный элемент, идентифицированные как базис тестирования. (ГОСТ 56920)_\n\nБазис тестирования определяется как источник информации или документ, необходимый для написания кейсов, а также как данные для начала анализа тестов. Им может выступать:\n\n* System Requirement Document (SRS);\n* Functional Design Specification;\n* Technical Design Specification;\n* User Manual;\n* Use Cases;\n* Source Code;\n* Business Requirement Document (BRD);\n* ?User story;\n* ?Vision;\n* ?Mockup;\n* ?Prototype.\n\nПо [ГОСТ Р 56920-2016/ISO/IEC/IEEE 29119-1:2013](https://docs.cntd.ru/document/1200134996) примерами базиса тестирования являются:\n\n* ожидания по формату и содержанию документации, обычно в форме стандартов и/или контрольных списков;\n* ожидания потребителя/пользователя по программной системе, новой или уже существующей, обычно спецификаций требований в письменной форме. Они могут быть представлены как функциональные/нефункциональные описания с употреблением глагола \"должен\", содержащие варианты использования, истории пользователя или другие формы неформально или формально записанные требования. Сюда могут быть включены нормативные требования, которые должны соблюдаться для определенных типов продуктов, например, для критичного к безопасности программного обеспечения для фармацевтической промышленности или для транспортных систем, таких как поезд или самолет;\n* опыт тестера или экспертов в другой предметной области по работе с функциями, необходимыми пользователям, или с историей продукта;\n* ожидания по прямым и/или косвенным интерфейсам между компонентами программной системы и/или по сосуществованию компонентов программной системы, обычно в форме проекта архитектуры в виде схем и/или формального письменного определения протокола;\n* ожидания по реализации компонентов программной системы в коде, обычно в форме детального проекта.\n\nБазис тестирования должен быть четко определен и должным образом структурирован, чтобы можно было легко определить условия тестирования, из которых можно получить тестовые примеры.\n\n_Тестовое условие (test condition): Объект или событие в компоненте или системе, которое должно быть проверено одним или несколькими тестовыми наборами. Например: функция, транзакция, параметр, атрибут качества или структурный элемент. (ISTQB)_\n\nТестовое условие - тестируемый аспект в test basis.\n\nИсточники:\n\n* [Test Basis in Software Testing](https://www.professionalqa.com/test-basis)\n","date":"2022-05-13T00:00:00.000Z","icon":"fas fa-bug","image":"null","path":"/ponyatie-test-basis-test-condition-i-test-procedure/","order":18,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Тестовая документация","path":"/tag/%D0%A2%D0%B5%D1%81%D1%82%D0%BE%D0%B2%D0%B0%D1%8F%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F/"}],"headings":[{"value":"Базис тестирования (Test basis)","anchor":"#базис-тестирования-test-basis"}]}},{"node":{"id":"08d46281fcdc109f9abd5020e824aa27","title":"Check-list, как представитель Experience-Based","content":"\n## Чек-лист (Check List)\n\nКонтрольный список/лист проверок - это список проверок, которые помогают тестировщику протестировать приложение или отдельные функции. Основная цель чеклиста состоит в том, чтобы вы не забыли проверить всё, что планировали. Классический чеклист состоит из:\n\n* 1-й столбец: заголовки тест-кейсов, структурированные по разделам/функционалу, или любые определенные составителем пункты;\n* 2-й столбец для отметки: пусто (еще не проверялось)/успех/ошибка;\n* 3-й столбец опционально под заметки.\n\nПримеры чек-листов из жизни:\n\n* Список проверок при покупке б/у ноутбука;\n* Список вещей/дел во время сборов в путешествие;\n* Список покупок в магазине.\n\nЧек-лист не обязательно является некоторой заменой тест-кейсов, это более глобальная сущность, в виде которой можно записывать множество планов и предстоящих действий: критерии начала и окончания тестирования, проверки перед началом каждой фазы, действия по их завершении, подспорье при исследовательском тестировании, накидать проверок с mind map функционала продукта, шеринг опыта с коллегами и т.п.\n\n**Разница между тест-кейсом и чек-листом**\n\nСила тест-кейса в том, что в нем все расписано очень детально, и с помощью тест-кейсов тестировать сможет даже человек, который ни разу не видел тестируемое им приложение. Но создание и поддержка кейсов требует времени, сил и является рутиной. Помимо прочего, очевидно, тест-кейс часто подразумевает только один конкретный тест, когда в чек-листе подразумевается целый перечень разных проверок.\n\nСила чек-листа в том, что он простой. Там нет глубокой детализации, это просто памятка. К тому же, он довольно наглядный с точки зрения отчетности. Минус в том, что другому человеку может быть сложно вникнуть в суть проверок без деталей и шагов. Чек-листы стали популярнее с приходом гибких моделей разработки, когда писать детальные кейсы может не быть времени и смысла, т.к. всё меняется слишком быстро, к тому же команда может быть небольшой и расписывать кейсы просто не для кого.\n\n**Traceability matrix** — Матрица соответствия требований — это двумерная таблица, содержащая соответсвие функциональных требований (functional requirements) продукта и подготовленных тестовых сценариев (test cases). В заголовках колонок таблицы расположены требования, а в заголовках строк — тестовые сценарии. На пересечении — отметка, означающая, что требование текущей колонки покрыто тестовым сценарием текущей строки.\nМатрица соответсвия требований используется QA-инженерами для валидации покрытия продукта тестами. МСТ является неотъемлемой частью тест-плана.\n\n\n\n**Чек-лист (check list)** — это документ, описывающий что должно быть протестировано. При этом чек-лист может быть абсолютно разного уровня детализации. На сколько детальным будет чек-лист зависит от требований к отчетности, уровня знания продукта сотрудниками и сложности продукта.\nКак правило, чек-лист содержит только действия (шаги), без ожидаемого результата. Чек-лист менее формализован чем тестовый сценарий. Его уместно использовать тогда, когда тестовые сценарии будут избыточны. Также чек-лист ассоциируются с гибкими подходами в тестировании.\n\n\n**Traceability matrix** — Матрица соответствия требований — это двумерная таблица, содержащая соответсвие функциональных требований (functional requirements) продукта и подготовленных тестовых сценариев (test cases). В заголовках колонок таблицы расположены требования, а в заголовках строк — тестовые сценарии. На пересечении — отметка, означающая, что требование текущей колонки покрыто тестовым сценарием текущей строки.\nМатрица соответсвия требований используется QA-инженерами для валидации покрытия продукта тестами. МСТ является неотъемлемой частью тест-плана.\n\nДоп. материал:\n\n* [Чек-листы: полная лекция](https://www.youtube.com/watch?v=UOhg7moss9U)\n* [Составление чек-листов](https://www.youtube.com/watch?v=b3E5SbU1rEM)\n* [Cheat-sheet](https://tmguru.ru/baza-znanij/upravlenie-testami/cheat-sheet/)\n* Примеры: [раз](https://strongqa.com/qa-portal/testing-docs-templates/checklist)\n","date":"2022-05-13T00:00:00.000Z","icon":"fas fa-bug","image":"null","path":"/check-list-kak-predstavitel-experience-based/","order":19,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Тестовая документация","path":"/tag/%D0%A2%D0%B5%D1%81%D1%82%D0%BE%D0%B2%D0%B0%D1%8F%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F/"}],"headings":[{"value":"Чек-лист (Check List)","anchor":"#чек-лист-check-list"}]}},{"node":{"id":"79251c07595cbe1ae401a08a7b1ac10f","title":"Bug Report","content":"\n## Баг-репорт (Defect/bug report)\n\n_Отчет о дефекте (defect report): Документ, содержащий отчет о любом недостатке в компоненте или системе, который может привести компонент или систему к невозможности выполнить требуемую функцию. (IEEE 829)_\n\n«Смысл написания отчета о проблеме (отчета об ошибке) состоит в том, чтобы исправить ошибки» - Джем Канер. Если тестировщик неправильно сообщает об ошибке, то программист, скорее всего, отклонит эту ошибку, заявив, что она невоспроизводима. Или потратит кучу лишнего времени на то, чтобы сделать вашу работу за вас. Едва ли такой тестировщик будет выгоден бизнесу, приятен коллегам и долго задержится на своем месте.\n\nГлавное при написании отчета - он должен быть сразу и однозначно понят читающим, а дефект однозначно воспроизведен по указанным шагам в указанном окружении.\n\n**Основные поля баг-репорта**:\n\n* Уникальный идентификатор (**ID**);\n* Описание (**Summary**): краткое, емкое и понятное описание ошибки;\n* Окружение (**Environment**): ссылка на билд/коммит/версия ПО и всего окружения;\n* Шаги воспроизведения (**Steps to reproduce**): полный перечень шагов для воспроизведения;\n* Ожидаемый результат (**Expected result**): какой результат должен был быть без ошибки;\n* Фактический результат (**Actual result**): какой результат получился на самом деле;\n* Вложения (**Attachments**): логи, скриншоты, видео - всё что необходимо для понимания ошибки.\n\n**Дополнительные**:\n\n* Предварительные условия (Prerequisites);\n* Тестовые данные (Test Data);\n* Серьезность дефекта (Defect Severity);\n* Комментарии (Remarks);\n* Проект (Project);\n* Продукт (Product);\n* Версия релиза (Release Version);\n* Модуль (Module);\n* Обнаружено в версии (Detected Build Version);\n* Вероятность возникновения дефекта (Defect Probability);\n* Приоритет дефекта (Defect Priority);\n* Автор отчета (Reported By);\n* Назначено на (Assigned To);\n* Статус (Status);\n* Fixed Build Version.\n\nВ случаях использования TMS поля будут настроены лидом/менеджером и в зависимости от размеров проекта могут быть пункты вроде milestone, epic, feature и т.п.\n\nПомимо прочего, баг-репорты могут создаваться не только тестировщиками, но и любыми членами команды, приходить от пользователей или техподдержки. Во втором случае необходимо будет воспроизвести ошибку, составить баг-репорт по всем правилам или дополнить присланный, затем провести ретроспективу на тему того, как ошибка попала в прод и как этого избежать в будущем.\n\n**Несколько ключевых моментов, которые следует учитывать при написании отчета об ошибке:**&#x20;\n\n* В одном отчете один баг;\n* Воспроизведите его 2-3 раза;\n* Убедитесь, что используете актуальную версию ПО и окружения;\n* Проверьте по поиску багтрекинговой системы наличие отчета о таком же дефекте;\n* Локализуйте ошибку, чтобы выяснить ее первопричину;\n* Напишите подробные шаги и полное окружение для воспроизведения ошибки;\n* Напишите хорошее summary дефекта по формуле “Что? Где? При каких условиях?” (3 Ws, WWW - What? Where? When?);\n* Следите за словами в процессе написания сообщения об ошибке, они не должны обвинять, оскорблять людей, содержать какую-либо точку зрения по поводу произошедшего. В общем, только факты по делу;\n* Проиллюстрируйте проблему с помощью правильных скриншотов, видео и логов;\n* Перед отправкой перепроверьте ваш отчет об ошибке. А потом еще раз;\n\nИсточники:\n\n* [How To Write Good Bug Report](https://www.softwaretestingmaterial.com/write-good-bug-report/)\n\nДоп. материал:\n\n* [Defect Probability](https://softwaretestingfundamentals.com/defect-probability/)\n* [Как правильно писать отчеты о дефектах на английском языке](https://www.youtube.com/watch?v=UEY5hGNPSvA)\n* [Не пишите в баге «Ввести 6,9»!](https://okiseleva.blogspot.com/2016/06/69.html)\n* [Воспроизводится ли баг по твоим шагам? Проверь!](https://okiseleva.blogspot.com/2019/07/blog-post\\_28.html)\n* [Нужна авторизация? Дай данные](https://okiseleva.blogspot.com/2019/09/blog-post\\_2.html)\n* [Эмоций в баге быть не должно!](https://okiseleva.blogspot.com/2019/01/blog-post\\_13.html)\n* [4 типичные ошибки оформления бага новичком](https://okiseleva.blogspot.com/2018/09/4.html)\n* [Шаблон бага](http://okiseleva.blogspot.com/2015/05/blog-post\\_25.html)\n* [Как воспроизвести баг](https://www.youtube.com/watch?v=1NLd5cvaBAI)\n* [О записи багов, или Найди кота](https://habr.com/ru/company/developersoft/blog/456132/)\n\n\n## Отчет о дефекте\n\n### Отчет о дефекте / Баг Репорт (Bug Report)\n\nДокументирование возникновения, характера и состояния дефекта. [[Глоссарий ISTQB](https://glossary.istqb.org/ru/search/%D0%BE%D1%82%D1%87%D0%B5%D1%82%20%D0%BE%20%D0%B4%D0%B5%D1%84%D0%B5%D0%BA%D1%82%D0%B5)]  \nВключает описание ситуации или последовательность действий приведшую к некорректной работе объекта тестирования, с указанием причин и ожидаемого результата.\n\n### Состав баг репорта\n\n| Поле                             | Описание                                                                                                   |\n| -------------                    | --------------- | \n| Заголовок (Summary)              | Короткое описание проблемы, явно указывающее на причину и тип ошибочной ситуации.                          |\n| Проект (Project)                 | Название тестируемого проекта                                                                              |\n| Компонент приложения (Component) | Название части или функции тестируемого продукта                                                           |\n| Номер версии (Version)           | Версия на которой была найдена ошибка                                                                      |\n| Критичность (Severity)           | Наиболее распространена пятиуровневая система градации серьезности дефекта: <br>• S1 Блокирующий (Blocker) <br>• S2 Критический (Critical) <br>• S3 Значительный (Major) <br>• S4 Незначительный (Minor) <br>• S5 Тривиальный (Trivial)                    |\n| Приоритет (Priority)             | Приоритет дефекта: <br>• P1 Высокий (High) <br>• P2 Средний (Medium) <br>• P3 Низкий (Low)                 |\n| Статус (Status)                  | _Статус бага._ <br>Зависит от используемой процедуры и жизненного цикла бага. Например: <br>• Новый <br>• Открыт <br>• Закрыт                                                                                                                             |\n| Автор (Author)                   | Создатель баг репорта                                                                                      |\n| Назначен на (Assigned To)        | Имя сотрудника, назначенного на решение проблемы                                                           |\n| Описание (Description)           | _Окружение (Environment):_ <br>Информация об окружении, на котором был найден баг.<br>_Операционная Система, Service Pack;_<br>для WEB тестирования — _имя и версия браузера и т.д._<hr>_Шаги воспроизведения (Steps to Reproduce):_<br>Шаги, по которым можно легко воспроизвести ситуацию, приведшую к ошибке.<hr>_Фактический Результат (Actual Result):_<br>Результат, полученный после прохождения шагов к воспроизведению.<hr>_Ожидаемый результат (Expected Result):_<br>Ожидаемый правильный результат                                                  |\n| Дополнения                       | _Прикрепленный файл (Attachment):_<br>Файл с логами, скриншот или любой другой документ, который может помочь прояснить причину ошибки или указать на способ решения проблемы                                                                                 |\n\n## Дополнительные ссылки\n\n### Как написать хороший баг репорт\n\nhttps://www.softwaretestinghelp.com/how-to-write-good-bug-report/\n\nhttps://testlio.com/blog/the-ideal-bug-report/\n\n https://testit.software/blog/post/kak-pravilno-oformit-bag-report","date":"2022-05-13T00:00:00.000Z","icon":"fas fa-bug","image":"null","path":"/bug-report/","order":20,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Тестовая документация","path":"/tag/%D0%A2%D0%B5%D1%81%D1%82%D0%BE%D0%B2%D0%B0%D1%8F%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F/"}],"headings":[{"value":"Баг-репорт (Defect/bug report)","anchor":"#баг-репорт-defectbug-report"},{"value":"Отчет о дефекте","anchor":"#отчет-о-дефекте"},{"value":"Дополнительные ссылки","anchor":"#дополнительные-ссылки"}]}},{"node":{"id":"5c82f53f9fe1265bd31c281a4074f11f","title":"Summary Report","content":"\n**Итоговый отчет о тестировании (test summary report)**\n\n_Итоговый отчет о тестировании (test summary report): Документ, подводящий итог задачам и результатам тестирования, также содержащий оценку соответствующих объектов тестирования относительно критериев выхода. (IEEE 829)_\n\nСводный отчет о тестировании содержит подробную информацию о тестировании, проведенном на протяжении жизненного цикла разработки программного обеспечения. Элементы в итоговом отчете по тестированию различаются от организации к организации, а также различаются для разных проектов. Информация в отчете об испытаниях основывается на аудитории отчета об испытаниях. Аудитория может быть клиентом, менеджментом, бизнес-аналитиком, разработчиками, членами команды тестирования, членами организации и т. д.\n","date":"2022-05-13T00:00:00.000Z","icon":"fas fa-bug","image":"null","path":"/summary-report/","order":21,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Тестовая документация","path":"/tag/%D0%A2%D0%B5%D1%81%D1%82%D0%BE%D0%B2%D0%B0%D1%8F%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F/"}],"headings":[]}},{"node":{"id":"b89d4c153e3db40cc409c03b1d775318","title":"Requirements Tracebility Matrix","content":"\n## Матрица трассируемости (RTM - Requirement Traceability Matrix)\n\n_Трассируемость (traceability): Способность идентифицировать связанные объекты в документации и программном обеспечении, например, требования со связанными с ними тестами. (ISTQB)_\n\n_Матрица трассируемости (traceability matrix): Двумерная таблица, описывающая связь двух сущностей (например, требований и тестовых сценариев). Таблица позволяет производить прямую и обратную трассировку от одной сущности к другой, обеспечивая таким образом возможность определения покрытия и оценки влияния предполагаемых изменений. (ISTQB)_\n\n![https://hsto.org/r/w1560/webt/5n/tw/4h/5ntw4hujujk0cmsxs6hchfajtoo.jpeg](https://hsto.org/r/w1560/webt/5n/tw/4h/5ntw4hujujk0cmsxs6hchfajtoo.jpeg)\n\nВ тестировании многое можно представить в виде удобной и наглядной матрицы (таблицы): Requirement Traceability Matrix, Test matrix, Compliance Matrix, Risk Matrix, RACI Matrix и т.д.\n\n**Матрица трассируемости** (Requirement Traceability Matrix AKA Traceability Matrix or Cross Reference Matrix) используется для документирования связей между требованиями и тест-кейсами по этим требованиям и наглядного отображения трассируемости в виде простой таблицы.\n\nМатрица трассируемости может служить одновременно в качестве матрицы покрытия. Наличие такой матрицы позволяет объективно оценить, какая часть продукта покрыта тестами, а какая нет.\n\n**Виды трассируемости**:\n\n* _Вертикальная трассируемость (vertical traceability): Отслеживание требований через уровни разработки к компонентам. (ISTQB)_\n* _Горизонтальная трассируемость (horizontal traceability): Трассировка требований к уровню тестирования по отношению к уровням документации (например, план тестирования, спецификация проектирования теста, спецификация тестовых сценариев и спецификация процедуры тестирования или автоматизированный сценарий тестирования). (ISTQB)_\n\nДругой источник:\n\n* Прямая трассируемость (Forward Traceability): гарантирует, что проект продвигается в желаемом направлении и что каждое требование тщательно проверяется;\n* Обратная трассируемость (Backward Traceability): гарантирует, что текущий разрабатываемый продукт находится на правильном пути. Это также помогает определить, что дополнительные неуказанные функции не добавляются и, таким образом, это не влияет на объем проекта;\n* Двунаправленная трассируемость (Bi-Directional Traceability = Forward + Backward): содержит ссылки от тестовых примеров к требованиям и наоборот. Это гарантирует, что все тестовые примеры можно отследить до требований, и каждое указанное требование содержит точные и действительные тестовые примеры для них.\n\nRTM актуальна на всех этапах программного проекта. Давайте разберемся с этим через водопадную модель SDLC:\n\n* RTM начинается вместе с началом фазы сбора требований (Requirements Gathering phase);\n* продолжается через управление требованиями (Requirements Management);\n* проектирование (Design);\n* разработку (Development);\n* тестирование (Testing);\n* внедрение (Implementation);\n* и поддержку (Support).\n\nПри прохождении всех этих этапов трассируемость требований поддерживается с помощью этого документа. После того, как требования были внесены в таблицу, детали дизайна для этих требований будут сопоставлены с требованиями. На основе этих деталей проекта будет производиться разработка программного обеспечения / модуля. Детали репозитория кода из SVN, TFS, Bitbucket, Github будут сопоставлены. Теперь вы знаете, где находится дизайн и код каждого требования. Это трассируемость. Отслеживайте каждое требование от начала до его конечного результата по мере его использования пользователем приложения! На этапе поддержки RTM будет чрезвычайно полезен для понимания и решения проблем, пройдя через все соответствующие детали функции / требования. Улучшение функции стало бы возможным благодаря отслеживанию и пониманию логики, дизайна и кода. С точки зрения владения RTM, RTM принадлежит менеджерам проекта или бизнес-аналитикам. В организациях CMMi команда TQM также будет проверять это как стандартный результат в проектах программного обеспечения.\n\n\\*Когда на основе требований к продукту составляются тест-сценарии и выполняется тестирование, это называется Requirement based testing.\n\nИсточники:\n\n* [How To Create Requirements Traceability Matrix (RTM): Example And Sample Template](https://www.softwaretestinghelp.com/requirements-traceability-matrix/)\n* [What is the difference between Test matrix and Traceability matrix?](https://www.quora.com/What-is-difference-between-Test-matrix-and-Traceability-matrix)\n\nДоп. материал:\n\n* [Матрица трассабилити](https://habr.com/ru/company/simbirsoft/blog/412677/)\n* [Reinventing the QA process](https://blog.picnic.nl/reinventing-the-qa-process-25854fee51f3)\n* [Traceability Matrix как инфраструктура общения QA и AQA спец-ов через призму Test Pyramid и ROI 2.0](https://www.youtube.com/watch?v=Vurf7G1JgG8)\n","date":"2022-05-13T00:00:00.000Z","icon":"fas fa-bug","image":"null","path":"/requirements-tracebility-matrix/","order":22,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Тестовая документация","path":"/tag/%D0%A2%D0%B5%D1%81%D1%82%D0%BE%D0%B2%D0%B0%D1%8F%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F/"}],"headings":[{"value":"Матрица трассируемости (RTM - Requirement Traceability Matrix)","anchor":"#матрица-трассируемости-rtm---requirement-traceability-matrix"}]}},{"node":{"id":"5a9cd1839c1d0471b52a3b5b962acf74","title":"Test Data Tables","content":"","date":"2022-05-13T00:00:00.000Z","icon":"fas fa-bug","image":"null","path":"/test-data-tables/","order":23,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Тестовая документация","path":"/tag/%D0%A2%D0%B5%D1%81%D1%82%D0%BE%D0%B2%D0%B0%D1%8F%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F/"}],"headings":[]}},{"node":{"id":"3af94f116f420bf83db600a7070f6b77","title":"Test Scenario","content":"","date":"2022-05-13T00:00:00.000Z","icon":"fas fa-bug","image":"null","path":"/test-scenario/","order":24,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Тестовая документация","path":"/tag/%D0%A2%D0%B5%D1%81%D1%82%D0%BE%D0%B2%D0%B0%D1%8F%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F/"}],"headings":[]}},{"node":{"id":"7f14dbdf826b67d63cfea164b4cbe91b","title":"External Test Reports","content":"## Виды отчетов (Reports)\n\nОтчет - это документ, содержащий информацию о выполненных действиях, результатах проведённой работы. Обычно он включает в себя таблицы, графики, списки, просто описывающую информацию в виде текста. Их пропорция и содержание определяют пользу и понятность отчета.\n\nНам важно понять, для кого, для чего и в каких условиях мы это делаем и на сколько это улучшит восприятие излагаемой нами информации. Надо помнить, что каждое действие преследует определенную цель. В случае отчета нам важно понять, для кого, для чего и в каких условиях мы это делаем.\n\nНиже перечислены наиболее известные варианты отчетов в тестировании.\n\n**Отчет по инциденту (incident report)**\n\n_Отчет по инциденту (incident report): Документ, описывающий событие, которое произошло, например, во время тестирования, и которое необходимо исследовать. (IEEE 829)_\n\nОтчет об инцидентах можно определить как письменное описание инцидента, наблюдаемого во время тестирования. Чтобы лучше понять, давайте начнем с того, что такое «инцидент». Инцидент при тестировании программного обеспечения можно определить как наблюдаемое изменение или отклонение поведения системы от ожидаемого. Это может быть отклонение от функционального требования или от настроек среды. Очень часто инцидент называют дефектом или ошибкой, но это не всегда так. Инцидент - это в основном любое неожиданное поведение или реакция программного обеспечения, требующая расследования.\n\nИнцидент необходимо расследовать, и на основании расследования инцидент может быть преобразован в дефект. Чаще всего это оказывается дефектом, но иногда это может произойти из-за различных факторов, например:\n\n* Человеческий фактор;\n* Требование отсутствует или неясно;\n* Проблема среды, например отсутствие ответа от внутреннего сервера, вызывающее периодическое непредвиденное поведение или ошибку. Либо неправильная конфигурация среды;\n* Ошибочные тестовые данные;\n* Некорректный ожидаемый результат.\n\nIncident report призван зафиксировать и сообщить об инциденте заинтересованным лицам, провести расследование. Составляется аналогично баг-репорту, возможно с упором на расследование, обсуждение, влияние (impact) и может быть назначен не на разработчиков для уточнения деталей.\n\n**Отчет о результатах тестирования (test result report)**\n\nОтчет о результатах тестирования - периодический отчет, в котором документируется подробная информация о выполнении теста и его результате. Также он содержит условия, предположения, ограничения теста, какой элемент теста кем тестируется. Помимо этого вносится подробная информация об оставшейся работе, чтобы показать, сколько еще работы необходимо выполнить в проекте.\n\n**Отчет о выполнении теста (Test Execution Report)**\n\nОтчет о выполнении теста содержит детали выполнения и результат выполнения теста. Обычно его готовят для отправки вышестоящему руководству от группы тестирования, чтобы показать состояние выполнения теста и ход тестирования. Когда мы доставляем программное обеспечение клиенту, мы вкратце отправим полную информацию о выполнении теста. Это даст клиенту лучшее понимание выполненного теста и покрытия.\n\n**Отчет о ходе тестирования (test progress report)**\n\n_Отчет о ходе тестирования (test progress report): Документ, подводящий итог задачам и результатам, составляемый с определенной периодичностью с целью сравнения прогресса тестирования с базовой версией (например, с исходным планом тестирования) и извещения о рисках и альтернативах, требующих решения руководства. (ISTQB)_\n\n**Аналитический отчет о тестировании (test evaluation report)**\n\n_Аналитический отчет о тестировании (test evaluation report): Документ, создаваемый в конце процесса тестирования и подводящий итог тестовым активностям и результатам. Также в нем содержится оценка процесса тестирования и полученный опыт. (ISTQB)_\n\n**Итоговый отчет о тестировании (test summary report)**\n\n_Итоговый отчет о тестировании (test summary report): Документ, подводящий итог задачам и результатам тестирования, также содержащий оценку соответствующих объектов тестирования относительно критериев выхода. (IEEE 829)_\n\nСводный отчет о тестировании содержит подробную информацию о тестировании, проведенном на протяжении жизненного цикла разработки программного обеспечения. Элементы в итоговом отчете по тестированию различаются от организации к организации, а также различаются для разных проектов. Информация в отчете об испытаниях основывается на аудитории отчета об испытаниях. Аудитория может быть клиентом, менеджментом, бизнес-аналитиком, разработчиками, членами команды тестирования, членами организации и т. д.\n\n**Отчет о пользовательском приемочном тестировании (User acceptance test report)**\n\nОтчет о пользовательском приемочном тестировании создается во время и после UAT. В нем указываются подробности проведенного пользователем приемочного теста и результат пользовательского приемочного теста. В нем также перечислены дефекты, не учтенные при UAT.\n\nИсточники:\n\n* [Создание понятных отчетов о тестировании](https://habr.com/ru/company/performance\\_lab/blog/207512/)\n* [What Is Incident Report In Software Testing?](https://www.softwaretestingclass.com/what-is-incident-report-in-software-testing/)\n* [Software Testing Artifacts - Test Reports](https://www.softwaretestingclass.com/test-report-artifacts/)\n\nДоп. материал:\n\n* [Как составить отчет о тестировании](https://telegra.ph/test-report-04-15)\n* [48+ SAMPLE Test Report Templates](https://www.sample.net/reports/test-report/)\n* [Отчет по результатам тестирования сайта](https://www.performance-lab.ru/wp-content/themes/pureengineering/images/sitetesting/test\\_report\\_example.pdf)\n* [Отчет о тестировании релиза](https://vk.com/@usetalkrostov-otchet-o-testirovanii-reliza)\n* [Test report templates](https://strongqa.com/qa-portal/testing-docs-templates/test-report)\n* [Test Summary Reports Tutorial: Learn with Example & Template](https://www.guru99.com/how-test-reports-predict-the-success-of-your-testing-project.html)\n","date":"2022-05-13T00:00:00.000Z","icon":"fas fa-bug","image":"null","path":"/external-test-reports/","order":25,"category":{"title":"manual","path":"/category/manual/"},"tags":[{"title":"Тестовая документация","path":"/tag/%D0%A2%D0%B5%D1%81%D1%82%D0%BE%D0%B2%D0%B0%D1%8F%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F/"}],"headings":[{"value":"Виды отчетов (Reports)","anchor":"#виды-отчетов-reports"}]}}]}},"relatedCategory":{"id":"603a2c0d964c5170463a1125f6911641","title":"manual","path":"/category/manual/","related":[{"id":"mobile","path":"/category/mobile/","title":"mobile"},{"id":"api","path":"/category/api/","title":"api"}]}},"context":{}}