{"hash":"7ef89d9cd3f6579eddc6e6b2d3ffbd18a73c2491","data":{"category":{"title":"interview","path":"/category/interview/","belongsTo":{"totalCount":16,"pageInfo":{"totalPages":2,"currentPage":1},"edges":[{"node":{"id":"6cc7b17cf4d6b9086536772cd0489771","title":"Собеседование в 2ГИС","content":"\n## Официальная инструкция\n\nhttps://qa-welcome.2gis.ru/\n\n## Автоматизация\n\n1. Опыт использования инструментов автоматизации:\n- [CI/CD](/ci-cd/)\n- [Docker и контейнеризация](/docker/)\n- виртуальные машины\n- языки программирования\n- [фреймворки](/frejmvorki-avtomatizaczii-testirovaniya/)  \n[Сравнение Junit и TestNG](/j-unit-vs-test-ng/)\n\n2. Применяемые подходы к автоматизации и процессы для автоматизации\n- [подходы](/podhody-k-avtomatizaczii-testirovaniya/)\n- процессы\n\n3. Сетевой стек и архитектура веб-приложений\n- сетевой стек\n- архитектура веб-приложений\n\n## Задание на собеседовании\n\n### Задача 1\n\n```java\n// Существует поле с элементами разных цветов. \n// Необходимо найти самую длинную цепочку (по горизонтали/вертикали) из элементов одного цвета, вывести ее цвет и длину. \n// Размерность поля может быть любая, кол-во цветов тоже не ограничено\n\nclass main {\n    public static void main(String[] args) {\n        String[][] table  = new String[][] {\n            {\"green\", \"green\", \"blue\", \"red\"},\n            {\"blue\",  \"green\", \"blue\", \"blue\"},\n            {\"green\", \"red\",   \"red\",  \"red\"}\n        };\n\n```\n\n### Задача 2\n\nSQL-запрос, чтобы из 1000 студентов отобрать десять человек с лучшими оценками","date":"2022-08-04T00:00:00.000Z","icon":"fas fa-robot","image":"null","path":"/sobesedovanie-v-2-gis/","order":1,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"Автоматизация тестирования","path":"/tag/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"},{"title":"собеседование","path":"/tag/%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"},{"title":"2ГИС","path":"/tag/2%D0%93%D0%98%D0%A1/"}],"headings":[{"value":"Официальная инструкция","anchor":"#официальная-инструкция"},{"value":"Автоматизация","anchor":"#автоматизация"},{"value":"Задание на собеседовании","anchor":"#задание-на-собеседовании"}]}},{"node":{"id":"683a344fdf62d3e0bdbf3d79b92601ea","title":"Подготовка к собеседованию на QA Automation Engineer","content":"\n## 1. Теория тестирования\n01. [Тестирование, Quality control, Quality assurance](/testirovanie-quality-control-quality-assurance/)\n02. [Понятие качества, международные стандарты качества](/ponyatie-kachestva-mezhdunarodnye-standarty-kachestva/)\n03. [Жизненный цикл дефекта](/zhiznennyj-czikl-defekta/)\n04. [Жизненный цикл разработки ПО, SDLC (Software Development LifeCycle)](/zhiznennyj-czikl-razrabotki-po-sdlc-software-development-life-cycle/)\n05. [Модели разработки ПО](/modeli-razrabotki-po/)\n06. [Методологии разработки ПО: Scrum, Kanban, RUP, DSDM, RAD, XP](/metodologii-razrabotki-po-scrum-kanban-rup-dsdm-msf-xp)\n07. [Жизненный цикл тестирования приложений, STLC (Software Testing LifeCycle)](zhiznennyj-czikl-testirovaniya-prilozhenij-stlc-software-testing-life-cycle/)\n08. [Принципы тестирования, Agile принципы тестирования](/princzipy-testirovaniya-agile-princzipy-testirovaniya/)\n09. [Практики и подходы тестирования](/praktiki-i-podhody-testirovaniya/\")\n10. [Виды тестирования](/vidy-testirovaniya/)\n11. [Уровни тестирования](/urovni-testirovaniya/)\n12. [Техники тест-дизайна](/tehniki-test-dizajna/)\n13. [Тестовая документация](/testovaya-dokumentacziya/)\n  - [Тестовая политика и стратегия](/testovaya-politika-i-strategiya/) \n  - [Международные стандарты тестовой документации](/mezhdunarodnye-standarty-testovoj-dokumentaczii/)\n  - [Master Test Plan и тестовые планы для каждого уровня](/master-test-plan-i-testovye-plany-dlya-kazhdogo-urovnya/)\n  - [Понятие Test Case и Test Suite](/ponyatie-test-case-i-test-suite/)\n  - [Понятие Test Basis, Test Condition и Test Procedure](/ponyatie-test-basis-test-condition-i-test-procedure/)\n  - [Checl-list, как представитель Experience-Based](/checl-list-kak-predstavitel-experience-based/)\n  - [Bug Report](/bug-report/)\n  - [Summary Report](/summary-report/)\n  - [Requirements Tracebility Matrix](/requirements-tracebility-matrix/)\n  - [Test Data Tables](/test-data-tables/)\n  - [Test Scenario](/test-scenario/)\n  - [External Test Reports](/external-test-reports/)\n  - [Критерии приемки](/kriterii-priemki)\n  - [Метрики тестирования](/metriki-testirovaniya/)\n  - [Требования](/trebovaniya/)\n  - [Тестовый оракул](/testovyj-orakul/)\n\n\n## 2. Тестирование WEB приложений\n- 01. [Понимание DOM модели](/ponimanie-dom-modeli/)\n- 02. [Какие веб-элементы бывают](/kakie-veb-elementy-byvayut/)\n- 03. Веб-формы и веб-сервера\n- 04. [UI(UX) и Pixel Perfect](/ui-ux-i-pixel-perfect/)\n- 05. [Тестирование верстки, JS ошибок](/testirovanie-verstki-js-oshibok/)\n- 06. Тестирование мобильной верстки\n- 07. Тестирование функций безопасности SSL\n- 08. [Работа с Dev Tool](/rabota-s-dev-tool/)\n- 09. Подходы к тестированию веб приложений\n- 10. Тестирование кросбраузерности, масштабируемости\n- 11. Тестирование кодировок\n- 12. Тестирование локализации, интернационализации\n- 13. Конфигурационное тестирование\n- 14. Работа с Cookie\n\n## 3. Тестирование API\n- [Понимание клиент-серверной архитектуры](/ponimanie-klient-servernoj-arhitektury/)\n- [Взаимодействие сервера, клиента и БД](/vzaimodejstvie-servera-klienta-i-bd/)\n- [REST и SOAP](/rest-i-soap/)\n- JSON vs XML vs WSDL\n- [Response codes](/response-codes/)\n- HTTP/HTTPS структура и методы\n- [Аутентификация и авторизация](/autentifikacziya-i-avtorizacziya/)\n- Mock servers\n- Написание тестов, assertions, запуск коллекций\n- Уровни переменных и работа с ними\n- Токены, pre-request scripts, debugging API\n- Monitoring and reports\n- Работа со Swagger\n- Описение Rest запросов (Open API)\n- Что такое Open API\n- Типы авторизации (basic auth, oAuth, jwt что-то типо того)\n- GET vs POST, POST vs PUT + идемпотентность\n- http 1.1 vs http 2\n- CSRF token\n\n## 4. Тестирование Mobile\n- Особенности тестирования мобильных приложений\n- Требования AppStore и PlayMarket к релизу\n- Классификация мобильных устройств и расширений\n- Виды мобильных устройств\n- Уровни тестирования mobile\n- Виды тестирования mobile\n- Симуляторы и эмуляторы\n- составление юзабио=лити тестов\n- Тестирование утечки памяти\n- Тестирование энергопотребления\n- Тестирование прерываний и человеческого фактора\n- Эвристики и мнемоники\n- Типичные баги\n- Тестирование игр на мобильных устройствах\n\n## 5. Нагрузочное тестирование\n- Load testing vs Perfomance vs Volume vs Stress\n- Метрики нагрузочного тестирования\n- Инструменты нагрузочного тестирования\n- Администрирование с настройкой мониторинга\n- Работа со скриптами, парсерами и заглушками\n- Основные методики и отчеты\n- Понятие настройки генератора нагрузки\n\n## 6. Системы контроля версий\n- Что такое система контроля версий, цель и виды\n- Основные команды GIT\n- Работа с тегами\n- Просмотр коммитов\n- Ветвление в GIT и работа с ветками\n- Установка GIT на сервер\n\n## 7. Основы HTML & CSS\n- Что такое HTML\n- Что такое CSS\n- Структура веб страницы\n- Основные элементы (html, head, title, meta, style, body, link)\n- Атрибуты\n- Работа с таблицами, тегами\n- Применение стилей и CSS-правил\n\n## 8. SQL и NoSQL базы данных\n- Что такое базы данных и их классификация\n- Формы нормализации баз данных\n- Понятие СУБД\n- 12 правил Кодда\n- Базовые запросы с использованием LIKE, BETWEEN, ORDER BY, ALIASES, IN, TOP/LIMIT, DISTINCT\n- Понятие NULL\n- CREATE, DROP, DELETE, UPDATE, INSERT, ALTER\n- Объединение таблиц(вложенные запросыб джойны и т.д.)\n- Работа с агрегатными функциями GROUP BY, HAVING\n- Представления, хранимые процедуры, триггеры и функции\n- Работа с индексами\n- Constraints\n- Понятие и виды NoSWL баз данных\n\n## 9. Компьютерные сети\n- Классификация и топология сетей\n- [Модель OSI vs стек протоколов TCP/IP](/model-osi-vs-stek-protokolov-tcp-ip/)\n- Основные стандарты\n- Протоколы по уровням и их особенности\n- HTTP, FTP, POP3, SMTP, UDP, TCP, ARP, IPv4 vs IPv6, PPP, ICMP\n- Ethernet, WI-FI, IP, MAC, Маска подсети, VLAN\n- DHCP и DNS\n- Типы данных(сегменты, датаграммы, пакеты, биты, кадры)\n- Сетевое оборудование\n\n## 10. Основы тест менеджмента\n- Метрики тестирования\n- Понятие ROI. Формула, расчеты, примеры\n- Модели улучшения тестовго процесса (TMMi, CTP, STEP, TPI NEXT и другие) Особенности их применения\n- Виды моделей Risk-Based testing. Решение практических кейсов.\n- Основы управления QA командой. Основные показатели\n- Оценка трудозатрат на тестирование\n- Оценка качества продукта\n- TEST MANAGEMENT TOOLS\n\n## 11. Основы автоматизированного тестирования\n- Понятие автоматизированного тестирования. Когда стоит применять, а когда нет\n- Базовые основы программирования(типы данных, классы, методы, конструкторы, интерфесы, принципы ООП)\n- Xpath, CSS-селекторы, локаторы\n- Работа с Selenium WebDriver\n- Написаниеи запуск примитивных автотестов, работа с отчетами об их прохождении\n- Понятие BDD, Gherkin\n- Работа со средой разработки + GIT\n\n## 12. Основы тестирования безопасности\n- Основы тестирования безопасности\n- OWASP TOP-10\n- классификация видов уязвимостей\n- Понятие XSS, INJECTIONS, Authorization Bypass\n- Опыт работы с 2-3 инструментами (OWASP ZAP, Nmap, Metasploit, SQLmap, BeFF и др)\n- Суметь протестировать сайт на наличие SQL-инъекций\n- Базовое представление о Kali Linux\n\n## 13. Виртуализация\n- Понятие и настройка виртуализации\n- Паравиртуализация\n- Работа с VIRTUAL BOX\n- Работа с VMWare\n- Установка и работа с различными ОС\n- Команды Linux. Работа в терминале Mac OS\n- Суметь поднять виртуальную машину и подключиться к ней\n\n## 14. Основы работы со снифферами\n- Понятие и виды снифферов\n- Опыт работы с Fiddler\n- Опыт работы с Charles\n- Опыт работы с Wireshark\n- Суметь перехватить пакет и проанализировать трафик\n\n## 15. Инструменты для тестирования\n- Postman, SOAP UI, CURL, Katalon Studio\n- Jmeter, Grafana, Apigee, Browserstacks, Genymotion\n- PowerShell, Redmine, Jira, HP ALM, IBM Rational Quality Manager, MSTeam Foundation Server, TestRail, TestLink\n- Notepad++, PSPad, Snagit, ScreenHunter, Snipping tool, Monosnap, Sitechco, FakeFiller, PICT, Mackaroo, Lipsum\n- DiffChecker, Intellij IDEA, Eclipse и т.д.\n\n","date":"2022-06-21T00:00:00.000Z","icon":"fas fa-bug","image":"null","path":"/podgotovka-k-sobesedovaniyu-na-qa-automation-engineer/","order":1,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"собеседование","path":"/tag/%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"},{"title":"interview","path":"/tag/interview/"}],"headings":[{"value":"1. Теория тестирования","anchor":"#1-теория-тестирования"},{"value":"2. Тестирование WEB приложений","anchor":"#2-тестирование-web-приложений"},{"value":"3. Тестирование API","anchor":"#3-тестирование-api"},{"value":"4. Тестирование Mobile","anchor":"#4-тестирование-mobile"},{"value":"5. Нагрузочное тестирование","anchor":"#5-нагрузочное-тестирование"},{"value":"6. Системы контроля версий","anchor":"#6-системы-контроля-версий"},{"value":"7. Основы HTML & CSS","anchor":"#7-основы-html--css"},{"value":"8. SQL и NoSQL базы данных","anchor":"#8-sql-и-nosql-базы-данных"},{"value":"9. Компьютерные сети","anchor":"#9-компьютерные-сети"},{"value":"10. Основы тест менеджмента","anchor":"#10-основы-тест-менеджмента"},{"value":"11. Основы автоматизированного тестирования","anchor":"#11-основы-автоматизированного-тестирования"},{"value":"12. Основы тестирования безопасности","anchor":"#12-основы-тестирования-безопасности"},{"value":"13. Виртуализация","anchor":"#13-виртуализация"},{"value":"14. Основы работы со снифферами","anchor":"#14-основы-работы-со-снифферами"},{"value":"15. Инструменты для тестирования","anchor":"#15-инструменты-для-тестирования"}]}},{"node":{"id":"b10c9dd7b8dd4a38cdf2d00c801f1043","title":"Подготовка к собеседованию на QA Automation Engineer 2","content":"\nhttps://itvdn.com/ru/blog/article/250-questions-qa?utm_sourse=tg_post_/250_questions_qa\n\nhttps://www.youtube.com/channel/UC6hNNlCXv1ZgdGpziNf83RA/videos\n\nhttps://www.youtube.com/watch?v=za6VI5uplIk\n\nhttps://www.youtube.com/watch?v=PIxa53N_uIM\n\nhttps://www.youtube.com/watch?v=LR7aDc_G5Xo\n\nhttps://www.youtube.com/watch?v=KlE3BOltGdw\n\nhttps://www.youtube.com/watch?v=GI2D3MAZBe0\n\nhttps://www.youtube.com/watch?v=PBjYqFNfLhw\n\nhttps://www.youtube.com/watch?v=u5BU2CxgBIo\n\nhttps://www.youtube.com/watch?v=PMJYLi_ePiQ\n\nhttps://www.youtube.com/watch?v=l3vC73Hgl-w\n\nhttps://www.youtube.com/watch?v=Fj1DdwSiY34\n\nhttps://www.youtube.com/watch?v=QnUFyAiL0N0&t=673s\n\nhttps://www.youtube.com/watch?v=KFgYa6GkAjM\n\nhttps://www.youtube.com/watch?v=dMdHRYfjzx0&t=1s\n\nhttps://www.youtube.com/watch?v=6bq28qjTHQk\n\nhttps://www.youtube.com/watch?v=vmOK5r4bjRU\n\nhttps://www.youtube.com/watch?v=WOo3YZHIDYE&t=2s\n\nhttps://www.youtube.com/watch?v=q75avN98ibg\n\nhttps://www.youtube.com/watch?v=XhKDpflWKls&t=2101s\n\nhttps://www.youtube.com/watch?v=4D40jGV8Jb8\n\nhttps://www.youtube.com/watch?v=4ESHltu1YBI\n\n\n\n## QA\n\n## Теоретическая база по Computer Science \nпонимание работы целевой платформы, общие принципы построения приложений, версионность, SDLC и прочее\n\nhttps://www.youtube.com/playlist?list=PLtPJ9lKvJ4oiNMvYbOzCmWy6cRzYAh9B1\n\n## Теоретическая база по тестированию\nтест-дизайн, практики и подходы тестирования, артефакты тестирования и принципы и подходы к построению и проведению тестирования.\n\n## Теоретическая база по автоматизации\nкакие инструменты есть, как автоматизируются те или иные сценарии, что стоит автоматизировать, а что нет и с какой стороны ко всему этому подходить. Пресловутый page object и html\\page elements.\n\n## Теоретическая база по программированию\nООП, структуры данных, способность решать минимальные типовые задачи, знание Java\\Python.\n\n\n\n\n### Основы тест-дизайна\n\n- как бы вы составили тест-кейсы для какого-то функционала или целой программы\n\n### Понимание работы клиент-серверных приложений\n\n- как работает Web\n- протокол HTTP\n- связка HTML / CSS / JavaScript\n- смысл кросс-браузерного тестирования\n\nкак настроить Selenium или Selenoid, как подбирать CSS или XPath-локаторы для элементов, какие браузеры выбрать для тестов.\nДля автоматизации API необходимо знать про методы HTTP-запросов (GET, POST, PUT, DELETE и т.д.) и их отличия, коды ответа сервера и их основные форматы (JSON, XML).\n\nНа практической части могут дать проверить работу какого-нибудь приложения, попросить составить список тест-кейсов и рассказать про особенности тестирования подобных продуктов.\n\n\n## Java\n\n- вопросы по ООП - что такое класс и экземпляр класса, что такое инкапсуляция, полиморфизм и наследование, какие бывают модификаторы доступа (в Java) и прочее.\n\nЕще на собеседовании могут поспрашивать немного про паттерны программирования. Тут хорошо знать про Singleton, Factory, PageObject, PageFactory, Builder и так далее. Можно еще почитать про принципы разработки SOLID, KISS, DRY, SRP.\n\n## TestOps\n\nс какой CI-системой вы чаще всего работали. На мой взгляд, самыми популярными являются Jenkins, Gitlab CI, TeamCity и Bamboo.\n\nПомимо этого спросят про опыт работы с bash: команды cd, ls, ps, mv, cp и так далее. Просто, чтобы убедиться, что вы не растеряетесь, зайдя на какой-нибудь сервер на основе linux по ssh.\n\nЕще могут быть вопросы по Docker - что такое образ, как запустить контейнер, как сделать маунт директории хост-машины, как собрать docker compose файл, как распространять образы между коллегами (docker registry)... Примерно так.\n\nСкорее всего попросят решить какую-нибудь задачку на SQL-запрос. Он тоже довольно популярен и с ним приходится работать, например, при тестировании серверной части: баз данных, сервисов или API.\n\nНапоследок могут спросить про системы контроля версий. Сейчас, на мой взгляд, самая популярная - это Git. Кандидата могут спросить про то, что такое ветки и коммиты, попросить решить какую-нибудь простую задачу. Например, рассказать о способе решения конфликтов мержа.","date":"2022-05-26T00:00:00.000Z","icon":"fas fa-bug","image":"null","path":"/podgotovka-k-sobesedovaniyu-na-qa-automation-engineer-2/","order":2,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"собеседование","path":"/tag/%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"},{"title":"interview","path":"/tag/interview/"}],"headings":[{"value":"QA","anchor":"#qa"},{"value":"Теоретическая база по Computer Science","anchor":"#теоретическая-база-по-computer-science"},{"value":"Теоретическая база по тестированию","anchor":"#теоретическая-база-по-тестированию"},{"value":"Теоретическая база по автоматизации","anchor":"#теоретическая-база-по-автоматизации"},{"value":"Теоретическая база по программированию","anchor":"#теоретическая-база-по-программированию"},{"value":"Java","anchor":"#java"},{"value":"TestOps","anchor":"#testops"}]}},{"node":{"id":"f68ca0b6fce182086906272bf7a885a6","title":"Теоретическая база по тестированию. Список вопросов","content":"\n## Тестирование, Quality control, Quality assurance\n\n### 1. Что такое тестирование программного обеспечения?\nВ соответствии со стандартом ANSI/IEEE 1059 — процесс анализа элемента программного обеспечения для обнаружения различий между существующими и необходимыми условиями (т. Е. Дефектов) и оценки функций элемента программного обеспечения. Щелкните здесь для получения более подробной информации.\n\n### 2. В чем разница между SDET, инженером-тестировщиком и разработчиком\n**SDET против инженера-тестировщика против разработчика**\n\n| Инженер-испытатель |\tSDET |\tРазработчик |\n| ------------------ | ----- | ------------ |\n| Инженер по тестированию думает только о том, прошел или не прошел тестовый пример, и о том, как сломать программное обеспечение |SDET знает функциональные цели системы, а также цели качества|Разработчик думает, как разработать систему и заставить функциональность работать|\n| Инженер-тестировщик работает только для жизненного цикла теста, такого как проектирование тестовых примеров и выполнение|SDET участвует в проектировании, разработке и тестировании|Разработчик ограничен частью кодирования и выпуском для группы тестирования |\n| Знания в области программирования не требуются |\tДинамические наборы навыков, такие как знание качества и тестирования, а также хорошее знание кода|\tТребуются только знания кодирования|\n|Инженеры-испытатели знают, где присутствует повторяющаяся работа или простой ввод данных, но не ожидают, что они минимизируют повторяющиеся задачи\t|SDET понимает потребности автоматизации, они могут кодировать и предоставлять решение для команды, где повторяющаяся работа убивает время. Они могут разработать структуру, которая может помочь команде тестирования сократить повторяющийся цикл тестирования или простую задачу ввода данных.\t|Разработчики не занимаются такими задачами|\n| Ожидается, что инженеры-испытатели не дойдут до уровня кода и настроят производительность\t| Хорошо осведомленные о настройке производительности и угрозах безопасности, они могут предлагать и обращаться к коду и предлагать, где приложение работает с низкой производительностью, плюс они могут оптимизировать код|\tОжидается, что разработчики будут кодировать только те функции, которые ожидаются от клиента|\n\n### 3. Что такое гарантия качества и контроль качества?\n_Обеспечение качества:_ Обеспечение качества включает в себя деятельность, ориентированную на процесс. Это обеспечивает предотвращение дефектов в процессе создания Программных приложений. Таким образом, дефекты не возникают при разработке программного приложения.\n\n_Контроль качества:_ Контроль качества включает в себя деятельность, ориентированную на продукт. Он запускает программу или код для выявления дефектов в программном приложении.\n\n## Понятие качества, международные стандарты качества ???\n\n## Жизненный цикл дефекта\n\n### 1. Как определяешь, что это баг? Вообще, когда считается, что это баг? Правда ли, что некоторые баги на порядок важнее остальных? Как репортишь баги?\n\n###  2. Что такое проверка при тестировании программного обеспечения?\nВерификация — это процесс, чтобы убедиться, правильно ли мы создаем продукт, то есть проверить требования, которые у нас есть, и проверить, разрабатываем ли мы продукт соответствующим образом или нет. Здесь задействованы следующие виды деятельности: инспекции, обзоры, обходы. Щелкните здесь, чтобы узнать подробнее.\n\n###  3. Что такое валидация при тестировании программного обеспечения?\nВалидация — это процесс, независимо от того, создаем ли мы правильный продукт, т.е. для проверки правильности разработанного нами продукта. Мероприятия, связанные с этим, — это тестирование программного приложения. Нажмите здесь, чтобы узнать больше.\n\n### 4. Что такое проверка?\nИнспекция — это формальная встреча, проводимая обученным модератором, но никак не автором. Проверяемый документ готовится и тщательно проверяется рецензентами перед встречей. На контрольном совещании обнаруженные дефекты регистрируются и передаются автору для принятия соответствующих мер. После проверки используется официальный процесс последующих действий для обеспечения своевременных и корректирующих действий.\n\n### 5. Кто все участвует в инспекционной встрече?\nАвтор, Модератор, Рецензент (и), Писец/Регистратор и Менеджер.\n\n### 6. Что такое дефект?\nРазница между фактическими и ожидаемыми результатами называется дефектом. Если разработчик обнаруживает проблему и исправляет ее самостоятельно на этапе разработки, это называется дефектом. Щелкните здесь, чтобы узнать подробнее.\n\n### 7. Что такое ошибка?\nЕсли тестировщики обнаруживают несоответствие в приложении/системе на этапе тестирования, они называют это ошибкой. \nМы не можем скомпилировать или запустить программу из-за ошибки кода в программе. Если разработчик не может успешно скомпилировать или запустить программу, он называет это ошибкой. Щелкните здесь для получения более подробной информации.\n\n### 8. Что такое неудача?\nПосле того, как продукт развернут и клиенты обнаруживают какие-либо проблемы, они называют продукт неисправным. После выпуска, если конечный пользователь обнаруживает проблему, эта конкретная проблема называется ошибкой. Щелкните здесь, чтобы узнать подробнее.\n\n### 9. Что такое серьезность ошибки?\nСерьезность ошибки/дефекта можно определить как влияние ошибки на бизнес клиента. Это может быть критическое, серьезное или незначительное. Проще говоря, насколько сильно повлияет на систему тот или иной дефект. Щелкните здесь, чтобы узнать подробнее.\n\n### 10. Что такое приоритет ошибок?\nПриоритет дефекта можно определить по тому, как скоро дефект должен быть исправлен. Он дает порядок, в котором дефект должен быть устранен. Разработчики решают, какой дефект им следует устранить дальше, в зависимости от приоритета. Он может быть высоким, средним или низким. В большинстве случаев статус приоритета устанавливается в зависимости от требований клиента. Щелкните здесь, чтобы узнать подробнее.\n\n### 11. Приведите несколько примеров серьезности ошибки и приоритета ошибки?\nВысокий приоритет &amp; Высокая степень серьезности: Кнопка «Отправить» не работает на странице входа, и клиенты не могут войти в приложение\n\nНизкий приоритет &amp; Высокая степень серьезности: сбой в работе некоторых функций, которые будут реализованы после нескольких выпусков\n\nHigh Priority &amp; Низкая степень серьезности: орфографическая ошибка в названии компании на главной странице\n\nНизкий приоритет &amp; Низкая серьезность: страница часто задаваемых вопросов загружается\n\n### 12. Что такое критическая ошибка?\nКритическая ошибка — это ошибка, которая означает, что большая часть функциональности или основной компонент системы полностью нарушена, и нет никакого обходного пути для дальнейшего продвижения.\n\nНапример, из-за ошибки в одном модуле мы не можем протестировать другие модули, потому что ошибка блокировщика заблокировала другие модули. Ошибки, влияющие на бизнес клиентов, считаются критическими.\n\nПример:\n1. Кнопка «Войти» не работает в приложении Gmail, и пользователям Gmail заблокирован вход в свои учетные записи.\n2. Сообщение об ошибке появляется, когда клиент нажимает кнопку перевода денег на веб-сайте банка.\n\n### 13. Что такое жизненный цикл ошибки?\nЖизненный цикл ошибки также известен как жизненный цикл дефекта . В процессе разработки программного обеспечения ошибка имеет жизненный цикл. Ошибка должна пройти жизненный цикл, чтобы быть закрытой. Жизненный цикл ошибки варьируется в зависимости от используемых инструментов (QC, JIRA и т. Д.) И процесса, выполняемого в организации. Щелкните здесь, чтобы узнать подробнее.\n\n### 14. Каковы различные стадии жизненного цикла дефекта?\n\nРазличные этапы жизненного цикла ошибки:\n- Новая\n- Назначенная\n- Открытая\n- Тестовая\n- Перемещено в QA/Готово к тестированию\n\n- Подтверждено\n- Исправлено\n- Закрыто\n- Повторно протестировано\n- Открыть повторно\n- Дубликат\n- Отложено\n- Отклонено\n- Не может быть исправлено\n- Невоспроизводимо\n- Требуется дополнительная информация\n\n### 15. Что такое утечка ошибок?\nОшибка, которая фактически упущена командой тестирования во время тестирования, и сборка была выпущена в производство. Если теперь эта ошибка (которая была пропущена группой тестирования) была обнаружена конечным пользователем или заказчиком, мы называем это утечкой ошибки.\n\n### 16. Что такое выпуск ошибок?\nВыпуск программного обеспечения в производственную среду с известными ошибками, мы называем это выпуском ошибок. Эти известные ошибки следует включить в примечание к выпуску.\n\n### 17. Что такое возраст дефекта?\nВозраст дефекта можно определить как временной интервал между датой обнаружения дефекта и датой закрытия дефекта.\n\nВозраст дефекта = Дата закрытия дефекта — Дата обнаружения дефекта\n\nПредположим, тестировщик обнаружил ошибку и сообщил о ней 1 января 2016 г., а 5 января 2016 г. она была успешно исправлена. Таким образом, возраст дефекта составляет 5 дней.\n\n### 18. Что такое ошибка при заполнении?\nЗаполнение ошибок — это процесс добавления известных ошибок в программу, предназначенного для определения скорости обнаружения ошибок. Это помогает в процессе оценки навыков тестировщика в поиске ошибок, а также в оценке возможностей приложения (насколько хорошо приложение работает при наличии ошибок).\n\n### 19. Что такое угадывание ошибок?\nУгадывание ошибок также является методом разработки тестовых примеров, аналогичным поиску ошибок. При угадывании ошибок тестировщики проектируют тестовые примеры, угадывая возможные ошибки, которые могут возникнуть в программном приложении. Намерение состоит в том, чтобы немедленно обнаруживать ошибки.\n\n### 20. Что такое дефект Showstopper?\nДефект showstopper — это дефект, который не позволяет пользователю двигаться дальше в приложении. Это почти похоже на сбой.\n\nПредположим, что кнопка входа не работает. Несмотря на то, что у вас есть действующее имя пользователя и действующий пароль, вы не можете двигаться дальше, потому что кнопка входа в систему не работает.\n\n## Жизненный цикл разработки ПО, SDLC (Software Development LifeCycle)\n\n### 1. Что такое SDLC?\nЖизненный цикл разработки программного обеспечения (SDLC) направлен на создание высококачественной системы, которая соответствует ожиданиям клиентов или превосходит их, эффективно и действенно работает в текущей и планируемой инфраструктуре информационных технологий, недорого в обслуживании и рентабельна для улучшения.\n\n### 2. Какие существуют различные доступные модели SDLC?\n- Waterfall\n- Spiral\n- V Model\n- Прототип\n- Agile\n\n### 3. Можете ли вы провести тестирование системы на любом этапе SDLC?\nМы можем проводить тестирование системы только тогда, когда все блоки находятся на своих местах и ​​работают должным образом. Это можно сделать только до пользовательского приемочного тестирования (UAT).\n\n## Модели разработки ПО\n\n### 1. По каким общепринятым сейчас процессам работала твоя бывшая команда? Мог ли бы ты описать своими словами, как можно было улучшить эти процессы?\n\n## Методологии разработки ПО: Scrum, Kanban, RUP, DSDM, RAD, XP\n\n## Жизненный цикл тестирования приложений, STLC (Software Testing LifeCycle)\n\n### 1. Перечислить результаты тестирования?\nСтратегия тестирования\nПлан тестирования\nОтчет об оценке усилий\nСценарии тестирования\nТестовые наборы/скрипты\nТестовые данные\nМатрица отслеживания требований (RTM)\nОтчет о дефектах/отчет об ошибке\nОтчет о выполнении теста\nГрафики и показатели\nСводный отчет теста\nОтчет об инциденте тестирования\n< li> Отчет о завершении тестирования\n\nПримечание к выпуску\nРуководство по установке/настройке\nРуководство пользователя\nОтчет о состоянии теста\nЕженедельный отчет о состоянии (от менеджера проекта к клиенту)\n\n### 2. Каковы задачи действий по завершению тестирования в тестировании программного обеспечения?\nДействия по завершению тестирования делятся на четыре основные группы.\n\nПроверка завершения теста: чтобы убедиться, что все тесты должны быть либо запущены, либо намеренно пропущены, а все известные дефекты должны быть либо исправлены, отложены для будущих выпусков, либо приняты как постоянное ограничение.\n\nПередача тестовых артефактов: тесты и тестирование среды должны быть переданы лицам, ответственным за техническое обслуживание. Известные дефекты, принятые или отложенные, должны быть задокументированы и доведены до сведения тех, кто будет использовать и поддерживать использование системы.\n\nИзвлеченные уроки: анализ извлеченных уроков для определения изменений, необходимых для будущих выпусков и проектов. На ретроспективных встречах устанавливаются планы, обеспечивающие хорошее\nметоды могут повторяться, а плохие практики не повторяться\n\nАрхивирование результатов, журналов, отчетов и других документов и рабочих продуктов в CMS (системе управления конфигурациями).\n\n### 3. Что такое закрытие теста?\nЗавершение тестирования — это примечание, подготовленное до того, как группа тестирования официально завершит процесс тестирования. Эта записка содержит общее количество тестовых случаев, всего кол-во выполненных тестовых случаев, всего кол-во обнаруженных дефектов, всего исправленных дефектов, всего ошибок не исправлено, всего нет отклоненных ошибок и т. д.\n\n### 4. Какова процедура ручного тестирования?\nРучное тестирование имеет решающее значение для более тщательного тестирования программных приложений. Процедура ручного тестирования состоит из следующего.\n1. Планирование и контроль\n2. Анализ и дизайн\n3. Реализация и исполнение\n4. Оценка и отчетность\n5. Действия по закрытию теста\n\n### 5. Что такое STLC (жизненный цикл тестирования программного обеспечения)?\nSTLC (жизненный цикл тестирования программного обеспечения) определяет, какие действия по тестированию следует выполнять и когда выполнять эти действия по тестированию. Несмотря на то, что тестирование в разных организациях различается, существует жизненный цикл тестирования. Щелкните здесь, чтобы узнать подробнее.\n\n### 6. Каковы этапы жизненного цикла тестирования программного обеспечения?\nНиже приведены этапы STLC.\n\n- Анализ требований\n- Планирование тестирования\n- Дизайн теста\n- Настройка тестовой среды\n- Выполнение теста\n- Завершение теста\n\n### 7. Когда прекратить тестирование? (Или) Как вы решаете, достаточно ли вы прошли тестирование?\nВ проектах реального времени существует множество факторов, которые определяют, когда следует прекратить тестирование.\n\n- Покрытие требований достигает определенной точки\n- Сроки тестирования или крайние сроки выпуска\n- Когда весь бюджет тестирования исчерпан.\n\n- Достигнув определенного процента успешных тестовых случаев.\n- Риск в проекте ниже допустимого предела.\n- Все исправлены ошибки с высоким приоритетом, блокировщики\n- При соблюдении критериев приемлемости\n- По окончании периода альфа- и бета-тестирования\n- Зависит от решения руководства\n\n### 8. Когда ты понимаешь, что настало время прекратить тестирование?\n\n### 9. Как анализируешь риски? Как это отображается на твоих тестах?\n\n### 10. Как ты оцениваешь, эффективен ли твой личный подход к тестированию? Как его меняешь, если видишь, что не очень эффективен?\n\n## Принципы тестирования, Agile принципы тестирования\n\n### 1. Каковы принципы тестирования программного обеспечения?\nТестирование показывает наличие дефектов.\nИсчерпывающее тестирование невозможно.\nРаннее тестирование\nКластеризация дефектов\nПарадокс пестицидов\nТестирование зависит от контекста\nОтсутствие ошибки в ошибке\nНажмите здесь подробнее.\n\n### 2. Что такое исчерпывающее тестирование?\nТестирование всех функций с использованием всех допустимых и недопустимых входных данных и предварительных условий известно как исчерпывающее тестирование.\n\n### 3. Что такое раннее тестирование?\nИсправление дефектов, обнаруженных на ранних этапах SDLC, обходится дешевле. Таким образом, проведение раннего тестирования снижает затраты на исправление дефектов.\n\n### 4. Что такое кластеризация дефектов?\nКластеризация дефектов при тестировании программного обеспечения означает, что небольшой модуль или функциональность содержит большинство ошибок или имеет наибольшее количество сбоев в работе.\n\n### 5. Что такое «парадокс пестицидов»?\nПарадокс пестицидов в тестировании программного обеспечения — это процесс повторения одних и тех же тестовых примеров снова и снова, в конце концов, одни и те же тестовые примеры больше не будут обнаруживать новые ошибки. Итак, чтобы преодолеть этот парадокс пестицидов, необходимо регулярно просматривать тестовые примеры и добавлять или обновлять их, чтобы найти больше дефектов.\n\n### 6. Что такое каскадирование дефектов при тестировании программного обеспечения?\nКаскадирование дефектов при тестировании программного обеспечения означает запуск других дефектов в приложении. Когда дефект не идентифицируется или остается незамеченным во время тестирования, он вызывает другие дефекты. Это приводит к множественным дефектам на более поздних этапах и приводит к увеличению количества дефектов в приложении.\n\nНапример, если есть дефект в системе бухгалтерского учета, связанный с отрицательным налогообложением, то отрицательный налоговый дефект влияет на бухгалтерскую книгу, которая, в свою очередь, влияет на другие отчеты, такие как баланс, прибыль и убытки; Убыток и т. Д.\n\n## Практики и подходы тестирования ???\n\n### 1. Что такое подход Big Bang?\nОбъединение всех модулей один раз и проверка функциональности после завершения тестирования отдельных модулей.\n\nСверху вниз и снизу вверх используются фиктивные модули, известные как заглушки и драйверы. Эти заглушки и драйверы используются для замены отсутствующих компонентов для имитации обмена данными между модулями.\n\n### 2. Что такое подход сверху вниз?\nТестирование происходит сверху вниз. Сначала тестируются модули высокого уровня, затем модули низкого уровня и, наконец, интеграция модулей низкого уровня на высокий уровень, чтобы гарантировать, что система работает должным образом. Заглушки используются как временный модуль, если модуль не готов к интеграционному тестированию.\n\n### 3. Что такое восходящий подход?\nЭто аналог подхода «сверху вниз». Тестирование происходит снизу вверх. Сначала тестируются модули самого низкого уровня, затем модули высокого уровня и, наконец, интеграция модулей высокого уровня на низкий уровень, чтобы гарантировать, что система работает должным образом. Драйверы используются как временный модуль для интеграционного тестирования.\n\n## Виды тестирования\n\n### 1. Что такое статическое тестирование?\n\nСтатическое тестирование включает в себя проверку документов для выявления дефектов на ранних этапах SDLC. При статическом тестировании мы проводим обзоры кода, пошаговые руководства, экспертные обзоры и статический анализ исходного кода с помощью таких инструментов, как StyleCop, ESLint и т. Д.\n\n### 2. Что такое функциональное тестирование?\nПроще говоря, на самом деле система выполняет функциональное тестирование. Чтобы убедиться, что каждая функция программного приложения ведет себя, как указано в документе с требованиями. Тестирование всех функций путем предоставления соответствующих входных данных, чтобы проверить, соответствует ли фактический выход ожидаемому или нет. Он подпадает под действие «черного ящика», и тестировщикам не нужно беспокоиться об исходном коде приложения.\n\n### 3. Что такое нефункциональное тестирование?\nПроще говоря, насколько хорошо работает система, — это нефункциональное тестирование. Нефункциональное тестирование относится к различным аспектам программного обеспечения, таким как производительность, нагрузка, стресс, масштабируемость, безопасность, совместимость и т. Д. Основное внимание уделяется улучшению взаимодействия с пользователем в зависимости от того, насколько быстро система реагирует на запрос.\n\n### 4. В чем разница между функциональным и нефункциональным тестированием?\n\n|Функциональное тестирование |\tНефункциональное тестирование |\n|----------------------------|--------------------------------|\n|На самом деле система выполняет функциональное тестирование|\tНасколько хорошо работает система, — это нефункциональное тестирование|\n|- Чтобы убедиться, что ваш продукт соответствует потребностям клиентов и бизнеса требований и не содержит серьезных ошибок\t<br>- Чтобы продукт соответствовал ожиданиям клиентов<br> - Чтобы проверить точность программного обеспечения в соответствии с ожидаемым результатом|\tЧтобы проверить поведение программного обеспечения при различных условиях загрузки|\n|Выполняется перед нефункциональным тестированием\t|Выполняется после функционального тестирования|\n\nПример функционального тестового примера — проверка функциональности входа\t\nПример нефункционального тестового примера — проверить, загружается ли домашняя страница менее чем за 2 секунды\n\nТипы тестирования:\n• Модульное тестирование\n• Дым тестирование\n• Принятие пользователями\n• Интеграционное тестирование\n• Регрессионное тестирование\n• Локализация\n• Глобализация\n• Совместимость\t\n\nТипы тестирования:\n• Тестирование производительности\n• Объемное тестирование\n• Масштабируемость\n• Тестирование удобства использования\n• Нагрузочное тестирование\n• Стресс-тестирование\n• Соответствие Тестирование\n• Тестирование переносимости\n• Тестирование аварийного восстановления\n\n### 5. Что такое приемочное тестирование?\nЭто также известно как предварительное тестирование. Это делается конечными пользователями вместе с тестировщиками для проверки функциональности приложения. После успешного приемочного тестирования. Официальное тестирование, проводимое для определения того, разработано ли приложение в соответствии с требованиями. Это позволяет клиенту принять или отклонить заявку. Типы приемочного тестирования: Alpha, Beta и amp; Гамма.\n\n### 6. На каком основании составляется приемочный план?\nПлан приемочных испытаний готовится с использованием следующих входных данных.\n\nДокумент с требованиями: В документе с требованиями указывается, что именно необходимо, а что не нужно в существующем проекте с точки зрения заказчика. .\nИнформация от клиента: Информация от клиента будет в формате официальных электронных писем, неформальных переговоров, обсуждений и т. д.\nПлан проекта: документ с планом проекта, подготовленный менеджером проекта.\nВсе три вышеупомянутых ввода служат хорошими исходными данными для подготовки плана приемочных испытаний.\n\n### 7. Что такое альфа-тестирование?\nАльфа-тестирование проводится штатными разработчиками (которые разработали программное обеспечение) и тестировщиками, прежде чем мы отправим программное обеспечение клиентам. Иногда альфа-тестирование выполняется заказчиком или аутсорсинговой командой в присутствии разработчиков или тестировщиков. Это часть пользовательского приемочного тестирования. Это делается для поиска ошибок до того, как клиенты начнут использовать программное обеспечение.\n\n### 8. Что такое бета-тестирование?\nБета-тестирование проводится ограниченным числом конечных пользователей перед доставкой. Это делается после альфа-тестирования. Обычно это делается на месте клиента. Узнайте больше о бета-тестировании здесь.\n\n### 9. Что такое гамма-тестирование?\nГамма-тестирование выполняется, когда программное обеспечение готово к выпуску с указанными требованиями. Делается на месте у клиента. Это делается напрямую, пропуская все действия по внутреннему тестированию.\n\n### 10. Что такое Smoke Testing?\nSmoke Testing проводится для того, чтобы убедиться, что сборка, полученная нами от команды разработчиков, тестируется или нет. Это также называется проверкой «День 0». Это делается на «уровне сборки». Это помогает не тратить время тестирования на простое тестирование всего приложения, когда ключевые функции не работают или ключевые ошибки еще не исправлены.\n\n### 11. Что такое проверка на вменяемость?\nТестирование работоспособности выполняется на этапе выпуска, чтобы проверить основные функции приложения, не углубляясь в него. Его также называют подмножеством регрессионного тестирования. Это делается на «уровне выпуска». Иногда из-за ограничений по времени выпуска невозможно провести тщательное регрессионное тестирование сборки, тестирование работоспособности выполняет эту часть, проверяя основные функции.\n\n### 12. В чем разница между проверкой на вменяемость и проверкой на дым? Sanity test vs Smoke test\nSmoke Testing проверяет все приложение от начала до конца\n\n|Smoke Test|\tSanity Testing |\n|---|---|\n|Smoke Test проводится, чтобы убедиться, что сборка, которую мы получили от команды разработчиков, тестируется или нет\t|Sanity Test выполняется на этапе выпуска для проверки основных функций приложение без углубления|\n|Дымовое тестирование выполняется как разработчиками, так и тестировщиками|\tТестирование на работоспособность выполняется только тестировщиками\nSanity Testing проверяет только определенный компонент всего приложения|\n|Дымовое тестирование, сборка может быть стабильной или нестабильной|\tПроверка работоспособности, сборка относительно стабильна|\n|Это выполняется на начальных сборках.|\tЭто делается в стабильных сборках.|\n|Это часть базового тестирования .\t|Это часть регрессионного тестирования.|\n|Обычно это делается каждый раз при выпуске новой сборки.\t|Это планируется, когда нет времени на углубленное тестирование.|\n\n### 13. Что такое повторное тестирование?\nЧтобы гарантировать, что дефекты, которые были обнаружены и опубликованы в предыдущей сборке, были исправлены или нет в текущей сборке. Скажем, вышла сборка 1.0. Команда тестирования обнаружила некоторые дефекты (идентификатор дефекта 1.0.1, 1.0.2) и разместила их. Была выпущена сборка 1.1, в настоящее время проводится повторное тестирование дефектов 1.0.1 и 1.0.2 в этой сборке.\n\n### 14. Что такое регрессионное тестирование?\nПовторное тестирование уже протестированной программы после модификации для обнаружения любых дефектов, появившихся или обнаруженных в результате изменений в тестируемом программном обеспечении или в другом связанном или несвязанные программные компоненты.\n\nОбычно мы проводим регрессионное тестирование в следующих случаях:\n\n- В приложение добавляются новые функции.\n- Изменение требований (в организациях мы называем это CR)\n- Исправление дефектов\n- Исправление проблем с производительностью\n- Изменение среды (например, обновление БД из MySQL в Oracle)\n\n### 15. Что вы подразумеваете под регрессионным и подтверждающим тестированием?\nРегрессионное тестирование: Команда тестирования повторно выполняет тесты для измененного приложения, чтобы убедиться, что измененный код нарушает что-либо, что работало ранее.\n\nПодтверждающее тестирование: обычно тестеры сообщают об ошибке при тестировании терпит неудачу. Команда разработчиков выпускает новую версию программного обеспечения после исправления дефекта. Теперь группа тестирования проведет повторное тестирование, чтобы убедиться, что обнаруженная ошибка действительно исправлена.\n\n### 16. Что такое тестирование графического интерфейса пользователя?\nТестирование графического интерфейса пользователя предназначено для тестирования интерфейса между приложением и конечным пользователем.\n\n### 17. Что такое тестирование восстановления?\nТестирование восстановления выполняется для того, чтобы определить, насколько быстро система может восстановиться после сбоя системы или отказа оборудования. Это относится к типу нефункционального тестирования.\n\n### 18. Что такое тестирование глобализации?\nГлобализация — это процесс разработки программного приложения, которое может быть адаптировано к различным языкам и регионам без каких-либо изменений.\n\n### 19. Что такое интернационализационное тестирование (тестирование I18N)?\nОбратитесь к тестированию глобализации.\n\n### 20. Что такое тестирование локализации (тестирование L10N)?\nЛокализация — это процесс адаптации программного обеспечения глобализации для определенного региона или языка путем добавления локальных компонентов.\n\n### 21. Что такое тестирование установки?\nОно предназначено для проверки того, успешно ли установлено приложение и работает ли оно должным образом после установки.\n\n### 22. Что такое формальное тестирование?\nЭто процесс, при котором тестировщики тестируют приложение, имея заранее спланированные процедуры и надлежащую документацию.\n\n### 23. Что такое тестирование на основе рисков?\nОпределите модули или функции, которые с наибольшей вероятностью вызывают сбои, и затем протестируйте эти функции.\n\n### 24. Что такое тестирование совместимости?\nОно предназначено для развертывания и проверки того, работает ли приложение должным образом в другой комбинации компонентов среды.\n\n### 25. Что такое исследовательское тестирование?\nОбычно этот процесс выполняется экспертами в предметной области. Они проводят тестирование, просто исследуя функциональные возможности приложения, не зная требований. Ознакомьтесь с нашим подробным руководством по исследовательскому тестированию, а также не пропустите эти популярные инструменты исследовательского тестирования.\n\n### 26. Что такое тестирование на обезьянах?\nУмышленно выполнить ненормальное действие с приложением, чтобы проверить его стабильность. Ознакомьтесь с нашим подробным руководством по тестированию на обезьянах.\n\n### 27. Что такое юзабилити-тестирование?\nЧтобы проверить, является ли приложение удобным для пользователя или нет и удобно ли им пользовался конечный пользователь. Основное внимание в этом тестировании уделяется проверке того, может ли конечный пользователь легко понять приложение и работать с ним. Приложение должно быть самоисследовательным и не должно требовать обучения для работы с ним. Изучите это руководство, чтобы узнать, как проводить тестирование удобства использования.\n\n### 28. Что такое тестирование безопасности?\nТестирование безопасности — это процесс, позволяющий определить, защищает ли система данные и поддерживает ли она функциональность, как задумано.\n\n### 29. Что такое испытание на впитывание?\nЗапуск системы при высокой нагрузке в течение длительного периода времени для выявления проблем с производительностью называется испытанием на выдержку.\n\n### 30. Что такое испытания на выносливость?\nТестирование на выносливость — это нефункциональный вид тестирования. Он также известен как испытание на впитывание. Обратитесь к тестированию на замачивание.\n\n### 31. Что такое тестирование производительности?\nЭтот тип тестирования определяет или проверяет характеристики скорости, масштабируемости и/или стабильности тестируемой системы или приложения. Производительность связана с достижением времени отклика, пропускной способности и уровней использования ресурсов, которые соответствуют целям производительности для проекта или продукта.\n\n### 32. Что такое нагрузочное тестирование?\nОно предназначено для проверки того, что система/приложение может обрабатывать ожидаемое количество транзакций, и для проверки поведения системы/приложения как при нормальной, так и при пиковой нагрузке.\n\n### 33. Что такое объемное тестирование?\nОно предназначено для проверки того, что система/приложение может обрабатывать большой объем данных\n\n### 34. Что такое стресс-тестирование?\nОн предназначен для проверки поведения системы, когда нагрузка превышает расчетную.\n\n### 35. Что такое тестирование масштабируемости?\nТестирование масштабируемости — это тип нефункционального тестирования. Он должен определить, как тестируемое приложение масштабируется с увеличением рабочей нагрузки.\n\n### 36. Что такое тестирование параллелизма?\nТестирование параллелизма означает одновременный доступ к приложению нескольких пользователей для обеспечения стабильности системы. В основном это используется для выявления проблем с взаимоблокировкой.\n\n### 37. Что такое Fuzz-тестирование?\nFuzz-тестирование используется для выявления ошибок кодирования и лазеек безопасности в приложении. Путем ввода огромного количества случайных данных в систему в попытке вызвать сбой, чтобы определить, не работает ли что-нибудь в приложении.\n\n### 38. Что такое специальное тестирование?\nСпециальное тестирование совершенно противоположно формальному тестированию. Это неформальный вид тестирования. При специальном тестировании тестировщики тестируют приложение случайным образом, не следуя каким-либо документам и методам разработки тестов. Это тестирование в первую очередь выполняется, если уровень знаний тестировщиков в тестируемом приложении очень высок. Тестировщики произвольно тестируют приложение без каких-либо тестовых примеров или каких-либо документов бизнес-требований.\n\n### 39. Что такое тестирование интерфейса?\nТестирование интерфейса проводится для оценки того, передают ли данные два предполагаемых модуля и правильно ли взаимодействуют друг с другом.\n\n### 40. Что такое тестирование надежности?\nВыполнять тестирование приложения непрерывно в течение длительного периода времени, чтобы проверить его стабильность\n\n### 41. Что такое периодическое тестирование?\nБакет-тестирование — это метод сравнения двух версий приложения друг с другом, чтобы определить, какая из них работает лучше.\n\n### 42. Что такое A/B-тестирование?\nОбратитесь к Bucket Testing.\n\n### 43. Что такое сплит-тестирование?\nРекомендуемое сегментное тестирование.\n\n### 44. Что такое тестирование API?\nТестирование API — это тип тестирования программного обеспечения, который включает в себя тестирование API напрямую, а также как часть интеграционного тестирования, чтобы проверить, соответствует ли API ожиданиям с точки зрения функциональности, надежности, производительности и безопасности приложения. В тестировании API основное внимание будет уделяться уровню бизнес-логики в архитектуре программного обеспечения. Тестирование API может выполняться в любой программной системе, содержащей несколько API. Тестирование API не будет концентрироваться на внешнем виде приложения. Тестирование API полностью отличается от тестирования GUI.\n\n### 45. Что такое случайное тестирование?\nСлучайное тестирование — это разновидность метода тестирования программного обеспечения с использованием черного ящика, при котором приложение тестирует, генерируя случайные данные.\n\n## Уровни тестирования\n\n### 1. Каковы уровни тестирования?\nВ тестировании программного обеспечения существует четыре уровня тестирования.\n\n- Модульное тестирование или тестирование на уровне компонентов\n- Интеграционное тестирование\n- Тестирование системы\n- Приемочные испытания\n\n### 2. Что такое модульное тестирование?\nМодульное тестирование также называется модульным тестированием или тестированием компонентов. Это делается для проверки правильности работы отдельного модуля или модуля исходного кода. Это делают разработчики в среде разработчика. Подробнее о модульном тестировании.\n\n### 3. Что такое интеграционное тестирование?\nИнтеграционное тестирование — это процесс тестирования интерфейса между двумя программными модулями. Интеграционное тестирование проводится тремя способами. Подход Большого Взрыва, подход сверху вниз, подход снизу вверх. Подробнее об интеграционном тестировании.\n\n### 4. Что такое системное тестирование?\nТестирование полностью интегрированного приложения для оценки соответствия системы указанным требованиям называется тестированием системы или сквозным тестированием. Проверка завершенной системы, чтобы убедиться, что приложение работает должным образом или нет.\n\n### 5. В чем разница между тестированием интеграции и тестированием системы?\nТестирование интеграции и тестирование системы\n\nТЕСТИРОВАНИЕ ИНТЕГРАЦИИ\tТЕСТИРОВАНИЕ СИСТЕМЫ\nЭто тестирование низкого уровня\tЭто тестирование высокого уровня\nЗа ним следует тестирование системы\tЗа ним следует приемочное тестирование\nВыполняется после модульного тестирования\tВыполняется после интеграции тестирование\nРазличные типы интеграционного тестирования:\n• Интеграционное тестирование сверху-снизу\n• Тестирование интеграции снизу вверх\n• Тестирование интеграции большого взрыва\n• Тестирование интеграции сэндвич\tРазличные типы тестирования системы:\n• Регрессионное тестирование\n• Тестирование работоспособности\n• Тестирование удобства использования\n• Повторное тестирование\n• Нагрузочное тестирование\n• Тестирование производительности\n• Техническое тестирование\n\nТестировщики выполняют функциональное тестирование для проверки взаимодействия двух модулей\tТестеры выполняют как функциональные, так и не- функциональное тестирование для оценки функциональности, удобства использования, тестирования производительности и т. д.\nВыполняется для проверки того, взаимодействуют ли два разных модуля эффективно друг с другом или нет\tВыполняется для проверки того, работает ли продукт в соответствии с ожиданиями пользователя и требуемыми спецификациями\nЭто может быть выполнено как тестировщиками, так и разработчиками\tВыполняется тестировщики\nТестирование происходит на интерфейсе двух отдельных модулей\tТестирование проводится для всего программного приложения\n\n### 6. Что такое сквозное тестирование?\nПроще говоря, сквозное тестирование — это процесс тестирования программного обеспечения от начала до конца. Ознакомьтесь с этим руководством по сквозному тестированию для получения дополнительной информации. Также см. Руководство по тестированию системы.\n\n## Техники тест-дизайна\n\n### 1. Что такое анализ граничных значений?\nАнализ граничных значений (BVA) основан на проверке граничных значений допустимых и недопустимых разделов. Поведение на краю каждого эквивалентного раздела с большей вероятностью будет неправильным, чем поведение внутри раздела, поэтому границы — это область, в которой тестирование может привести к дефектам. Каждый раздел имеет свои максимальные и минимальные значения, и эти максимальные и минимальные значения являются граничными значениями раздела. Граничное значение для допустимого раздела является допустимым граничным значением. Точно так же граничное значение для недопустимого раздела является недопустимым граничным значением. Щелкните здесь, чтобы узнать подробнее.\n\n### 2. Что такое разделение классов эквивалентности?\nРазделение эквивалентности также известно как разделение классов эквивалентности. При эквивалентном разбиении входные данные для программного обеспечения или системы делятся на группы, которые, как ожидается, будут демонстрировать аналогичное поведение, поэтому они, вероятно, будут предлагаться одинаково. Следовательно, выбор одного входа из каждой группы для разработки тестовых случаев. Щелкните здесь, чтобы узнать подробнее.\n\n### 3. Что такое тестирование таблицы решений?\nТаблица решений — это таблица причинно-следственных связей. Этот метод тестирования подходит для функций, которые имеют логические отношения между входами (логика if-else). В технике таблицы решений мы имеем дело с комбинациями входных данных. Чтобы идентифицировать тестовые случаи с таблицей решений, мы рассматриваем условия и действия. Мы принимаем условия как входы, а действия как выходы. Щелкните здесь, чтобы узнать подробнее.\n\n### 4. Что такое переход состояния?\nИспользуя тестирование перехода между состояниями, мы выбираем тестовые примеры из приложения, в котором нам нужно протестировать различные переходы системы. Мы можем применить это, когда приложение дает разные выходные данные для одного и того же входа, в зависимости от того, что произошло в более раннем состоянии. Щелкните здесь, чтобы узнать подробнее.\n\n121. Что такое критерии входа?\nПредварительные условия, которые должны быть выполнены перед началом процесса тестирования. Щелкните здесь, чтобы узнать подробнее.\n\n### 5. Что такое критерии выхода?\nУсловия, которые должны быть выполнены перед тестированием, должны быть завершены. Щелкните здесь, чтобы узнать подробнее.\n\n### 6. Что такое RTM?\nМатрица прослеживаемости требований (RTM) используется для отслеживания требований к тестам, которые необходимы для проверки выполнения требований. Мы должны убедиться, что для каждого требования есть хотя бы 1 тестовый пример. Матрица прослеживаемости требований AKA Матрица прослеживаемости или матрица перекрестных ссылок. Щелкните здесь, чтобы узнать подробнее.\n\n## Тестовая документация\n\n### 1. Каковы лучшие практики написания тестовых примеров?\nНапишите тестовые примеры с точки зрения конечных пользователей.\nНапишите шаги теста в простой форме, чтобы каждый мог следовать их легко\nСделать тестовые примеры многоразовыми\nУстановить приоритет\nПредоставить описание тестового примера, тестовые данные, ожидаемый результат, предварительное условие, постусловие.\nНапишите недопустимые тестовые примеры вместе с допустимыми тестами.\nСоблюдайте правила именования.\nРегулярно просматривайте тестовые примеры и при необходимости обновляйте их.\n\n### 2. Что такое тестовые данные?\nТестовые данные — это данные, которые используются тестировщиками для запуска тестовых случаев. Во время выполнения тестовых случаев тестировщикам необходимо ввести некоторые входные данные. Для этого тестировщики подготавливают тестовые данные. Его можно подготовить вручную, а также с помощью инструментов.\n\nНапример, чтобы протестировать базовую функциональность входа в систему с полями идентификатора пользователя и пароля. Нам нужно ввести некоторые данные в поля идентификатора пользователя и пароля. Итак, нам нужно собрать некоторые тестовые данные.\n\n### 3. Что такое тестовое покрытие?\nТестовое покрытие помогает измерить объем тестирования, выполняемого набором тестов.\nТестовое покрытие может выполняться как для функциональных, так и для нефункциональных действий. Он помогает тестировщикам создавать тесты, охватывающие отсутствующие области.\n\n### 4. Что такое покрытие кода?\nПокрытие кода отличается от покрытия тестом. Покрытие кода — это практика модульного тестирования, которая должна затрагивать все области кода хотя бы один раз. Обычно это делают разработчики или юнит-тестеры.\n\n### 5. Каковы наиболее распространенные компоненты отчета о дефектах?\nНаиболее распространенные компоненты формата отчета о дефектах включают следующее\n\n- Имя проекта\n- Имя модуля\n- Идентификатор дефекта\n- Дефект обнаружен\n- Дефект обнаружен\n- Приоритетом\n- Серьезность\n- Дефект устранен\n- Дефект устранен\n\n### 6. Какие тестовые примеры записываются первыми — белые ящики или черный ящик?\nПростой ответ — сначала записываются тестовые примеры черного ящика.\n\nДавайте посмотрим, почему тест черного ящика кейсы пишутся первыми по сравнению с тестовыми случаями белого ящика.\nНеобходимыми условиями для начала написания тестовых случаев для «черного ящика» являются документы с требованиями или проектные документы. Эти документы будут доступны до начала проекта.\nНеобходимыми условиями для начала написания тестовых примеров белого ящика является внутренняя архитектура приложения. Внутренняя архитектура приложения будет доступна в более поздней части проекта, т. Е. При проектировании.\n\n### 7. Какова концепция инструментальных средств в тестировании программного обеспечения?\nWorkbench — это практика документирования того, как должно выполняться конкретное действие. Это часто называют фазами, шагами и задачами.\n\nВ каждой рабочей среде будет пять задач, таких как ввод, выполнение, проверка, вывод и доработка.\n\n### 8. Что такое тестовые метрики?\nМетрики тестирования программного обеспечения предназначены для мониторинга и управления процессом и продуктом. Это помогает без отклонений продвигать проект к намеченным целям. Метрики отвечают на разные вопросы. Важно решить, на какие вопросы вы хотите получить ответы. Щелкните здесь, чтобы узнать подробнее.\n\n### 9. Когда выполняешь тесты, из каких этапов они состоят?\n\n### 10. Приходилось ли писать план тестирования? Опиши этапы в нем. \n\n### 11. Какие инструменты применял для выполнения? Какие для анализа результатов? \n\n### 12. Как приоретизируешь тесты? Что влияет на твои решения?\n\n## Практические вопросы\n\n1. [Как бы вы составили тест-кейсы для какого-то определенного функционала, как раз на таком вопросе и оцениваются ваши знания об техниках тест-дизайна и тестирования.](/testovaya-dokumentacziya/)\n\n2. Проанализировать особенности тестирования определенного программного обеспечения\n\n3. Тестирование калькулятора\n\nИ, собственно, дефекты, которые должны были найти соискатели.\n\n  1. Лишняя буква \"l\" в слове \"Wellcome\".\n  2. Недостающая буква \"r\" в слове \"corect\" внутри окна подтверждения.\n  Здесь мы смотрим на знание английского языка и умение кандидата работать с очепятками визуально. Первый дефект, к слову, находили, буквально, единицы.\n\n  3. Отсутствие кнопок \"0\", \"С\", \"+/-\" и других управляющих элементов функционала.\n  4. Неправильное расположение цифровых кнопок(Расположены инвертированно, относительно стандартной раскладке для калькулятора). \n  5. Отсутствие символа \".\"\n\n  Эти дефекты должны были дать понимание того, откуда кандидат черпает требования к качеству продукта в случае, если прямых требований нету. Есть официальные стандарты, есть индустриальные стандарты, есть продукты конкурентов, и глядя на это, можно было дать кучу правок и замечаний или, хотя бы, задать определенное кол-во вопросов по целесообразности данного инженерного решения. \n  С дефектом под номером 5 связан отдельный вопрос: \"Каким образом возможно видеть подобную цепочку действий, если точка в функционале отсутствует?\". Задавался он для того, чтобы понять, на каком уровне люди взаимодействуют с продуктом и исследуют ли они его достаточно, чтобы делать выводы. А ответ был очень простым - точку очень легко можно ввести с клавиатуры. \n\n  6. Неподходящее обозначение кнопки для умножения(mul). \n  По правде говоря, здесь этот дефект был своеобразной пасхалкой, так как утилита для мок-апов не умела по-человечески отрисовывать звёздочку, по этому было принято решение заменить ее на сокращение от multiplication и заодно проверить умение ребят мыслить аналитически. \n\n  7. Проблемы с расположением элементов. \n\n  Это очень обширная область, где каждый из соискателей мог дать волю своему внутреннему Джонни Айву и указать элементы, расположение которых не совсем удовлетворяет чувству прекрасного, обязательно присущему и нужному для тестировщика.\n\n  8. Неочевидные решения по функционалу элементов.\n\n  Опять-таки, в отсутствие прямых требований, включаем здравый смысл и принимаем решение, нужно ли нам окно подтверждения, нужен ли нам функционал выбора калькулятора в таком виде, в котором он представлен здесь, и так далее. \n\n  9. Инвертированное положение кнопок Yes и No в окне подтверждения. \n\n  Дефект этот задавался для того, чтобы понять, знаком ли человек с гайдлайнами для устоявшихся структурных единиц. Практика показала, что большинство замечавших просто привыкли к другому расположению, но не задавались вопросом, чем это продиктовано. \n\n  Наиболее запомнившиеся мне кандидаты были готовы завести от 10 до 18(рекорд) баг-репортов. \n  Некоторые обращали внимание на картинку, подозрительно напоминающую непрогрузившееся изображение и пустой URL(побочный эффект стандартного окна браузера в утилите для создания мок-апов). \n\n## Другие вопросы\n\n### 1. Что такое управление конфигурацией?\nУправление конфигурацией (CM) — это процесс системного проектирования для поддержания системных ресурсов, компьютерных систем, серверов, программного обеспечения и производительности продукта в согласованном состоянии. Это помогает записывать все изменения, внесенные в систему, и гарантирует, что система работает должным образом, даже если изменения вносятся с течением времени.\n\n### 2. Назовите несколько популярных инструментов управления конфигурацией?\nНекоторые из популярных инструментов управления конфигурацией — это Ansible, Chef, Puppet, Terraform, Saltstack и т. Д.\n\n### 3. Что такое запрос на изменение?\nЗапрос на изменение (MR) при разработке программного обеспечения используется клиентами для изменения существующей функциональности программного обеспечения.\n\n### 4. Что такое отчет об улучшении?\nОтчет об улучшении (ER) при разработке программного обеспечения используется клиентами для добавления новой функции в программное обеспечение.\n\n### 5. Что, если в программном обеспечении так много ошибок, что его вообще невозможно протестировать?\nЕсли в программном обеспечении так много ошибок, первое, что нам нужно сделать, это сообщить об ошибках и классифицировать их в зависимости от степени серьезности. Если ошибки являются критическими, это серьезно влияет на графики и указывает на более глубокие проблемы в процессе разработки программного обеспечения. Поэтому вам необходимо сообщить менеджеру об ошибках с соответствующей документацией в качестве доказательства.\n\n### 6. Что такое Test Harness?\nTest Harness — это набор программного обеспечения и тестовых данных, сконфигурированных для тестирования программного модуля путем его запуска в различных условиях, что включает мониторинг выходных данных с ожидаемыми выходными данными. .\n\nОн содержит механизм выполнения тестов &amp; Репозиторий тестовых скриптов\n\n### 7. Что такое Walk Through?\nПошаговое руководство — это неформальная встреча, которую проводят для изучения, понимания и поиска дефектов. Автор ведет встречу и разъясняет вопросы, поднятые коллегами на встрече.\n\n### 8. В чем разница между автономным приложением, клиент-серверным приложением и веб-приложением?\n\n**Автономное приложение:**  \nАвтономные приложения следуют одному — ярусная архитектура. Уровень представления, бизнеса и базы данных находятся в одной системе для одного пользователя.\n\n**Клиент-серверное приложение:**  \nКлиент-серверные приложения имеют двухуровневую архитектуру. Уровень представления и бизнеса находится в клиентской системе, а уровень базы данных — на другом сервере. Он работает в основном в интрасети.\n\n**Веб-приложение:**  \nВеб-серверные приложения следуют трехуровневой или многоуровневой архитектуре. Уровень представления находится в клиентской системе, уровень бизнеса — на сервере приложений, а уровень базы данных — на сервере базы данных. Работает как в интранете, так и в Интернете.\n\n### 9. Что такое HotFix?\nИсправление — это сборка, направленная на решение серьезной проблемы, обнаруженной в производственной среде.\n\nИногда сборка, выполняемая в производственной среде, имела критические ошибки, и ее производил откат. Теперь команда разработчиков отложила всю свою работу и сосредоточилась на немедленном исправлении этих ошибок и выпустила новую сборку, чтобы исправить это в производственной среде. Эта сборка называется исправлением.\n\nИсправления и исправления — это два разных типа обновлений программного обеспечения. Исправления доступны для всех, а исправления — нет.\n\nИсправления также известны как технические обновления с быстрым исправлением (обновления QFE)\n\n### 10. Что за исправление?\nИсправление — это сборка, направленная на устранение ошибки, обнаруженной тестировщиками в цикле тестирования.\n\n### 11. Что такое вознаграждение за обнаружение ошибок?\nПрограмма вознаграждения за обнаружение ошибок позволяет организации предлагать вознаграждение человеку, который обнаруживает ошибки в их программном обеспечении и сообщает о них.\n\nBug Bounty — это концепция, которая существует с момента создания Интернета. Компании начали понимать, насколько дорого для них нанимать экспертов по тестированию на проникновение каждый раз, когда они хотят найти уязвимости на своем веб-сайте или в приложении. Так недавно программы по поощрению ошибок стали широко распространенными.\n\nПервой компанией, которая подхватила эту концепцию, была Google. Он запустил свою «Программу вознаграждения за уязвимости» в 2010 году и с тех пор выплатил более 4 миллионов долларов.\n\n### 12. Каковы различные стратегии развертывания для конечных пользователей?\nПри развертывании любого проекта тестирования программного обеспечения необходимо следовать четырем стратегиям:\n\n- Пилотный\n- Постепенное внедрение\n- Поэтапное внедрение\n- Параллельная реализация\n\n### 13. Расскажи о своих недавних задачах. Расскажи, какие видел интересные баги.\n\n**Интересные баги:**\n\n- В самом начале работы Amazon покупатель мог заказать отрицательное количество книг. При этом на его банковскую карту зачислялась соответствующая сумма.\n- На заре становления интернет-магазинов в одном из них можно было вписать в графе «Количество товара» значение 0,1, что давало покупателю скидку в 90% (стоимость товара умножалась на те самые 0,1). \n- В другом для хранения аутентификационных данных использовался файл cookie, в котором можно было сменить ID и совершать покупки от чужого лица.\n- В 1991 году программист столкнулся с вирусом Sunday, который модифицирует исполняемый файл и в последний день недели запускается, чтобы уничтожить данные на диске. По какой-то причине этого не произошло, и программист решил разобраться — написал тестовый EXE-файл, скормил его вирусу и посмотрел, что будет. Оказалось, что авторы вируса при его разработке сделали так, что он должен запускаться в день номер 7, а нумерация дней идёт от 0 до 6, так что переменная никогда не принимала нужного значения.\n- «Проблема 2000 года». Разработчики ПО в XX веке часто использовали для обозначения года в датах две последние цифры вместо привычных четырёх. Например, 7 апреля 1994 года представлялось как «07.04.94».\n1 января 2000 по всему миру начали происходить локальные конфликты и сбои в системах. В некоторых городах даже начало пропадать электричество, отопление, часть вычислительных центров просто зависала. Всё это произошло из-за сокращения формата года. После 1999 года наступил 2000, но для машин этот год воспринимался как 1900 (у некоторых даже как 19100). Такая ошибка послужила причиной зависаний во многих системах.\n\n\n### 14. Приходилось ли автоматизировать тесты? Как это было? Расскажи об инструментах автоматизации.\n\n### 15. Какой любимый инструмент автоматизации? Объясни почему. Если его применять не получится, что другое выберешь, и почему?\n\n### 16. Как определяешь, какие тесты достойны автоматизации? Какие тесты не будешь автоматизировать? Почему?\n\n### 17. Вот тебе простой тестовый сценарий. Расскажи, как (и чем) будешь его выполнять.\n\n\n## Дополнительные материалы\n\n### Самоучитель\n\n- https://www.guru99.com/software-testing.html\n- https://github.com/VladislavEremeev/QA_bible\n- [Курс по тестированию ULearn](https://ulearn.me/Course/testing/Testirovanie_UI_e68eca26-6a60-45d8-bc8f-92943aff03a7)\n- [Курс по тестированию Stepik](https://stepik.org/course/16478/syllabus)\n- [Библиотека тестировщика](https://www.software-testing.ru/library/testing)\n\nhttps://www.youtube.com/playlist?list=PLrCZzMib1e9pDKLsabJYuODdVJrHYc4Jd\n\n### Вопросы на логику\n\nhttps://qa-academy.by/qaacademy/news/logicheskie-zadachi-na-sobesedovanii-testirovshhika/\n\n### Вопросы с собеседований\n\n[100 самых популярных вопросов и ответов на собеседовании по тестированию программного обеспечения - atesting.ru](https://atesting.ru/100-samyh-popyliarnyh-voprosov-i-otvetov-na-sobesedovanii-po-testirovaniu-programmnogo-obespecheniia/)\n\n[Вопросы и ответы для собеседования(тестирование ПО) Часть 1](https://medium.com/%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B-%D0%B8-%D0%BE%D1%82%D0%B2%D0%B5%D1%82%D1%8B-%D0%B4%D0%BB%D1%8F-%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BF%D0%BE/%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B-%D0%B8-%D0%BE%D1%82%D0%B2%D0%B5%D1%82%D1%8B-%D1%87%D0%B0%D1%81%D1%82%D1%8C-1-4fc596806d55)\n\n[Вопросы и ответы для собеседования(тестирование ПО) Часть 2](https://medium.com/%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B-%D0%B8-%D0%BE%D1%82%D0%B2%D0%B5%D1%82%D1%8B-%D0%B4%D0%BB%D1%8F-%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BF%D0%BE/%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B-%D0%B8-%D0%BE%D1%82%D0%B2%D0%B5%D1%82%D1%8B-%D1%87%D0%B0%D1%81%D1%82%D1%8C-2-ec8e224e3f98)\n\n[Вопросы и ответы для собеседования(тестирование ПО) Часть 3](https://medium.com/%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B-%D0%B8-%D0%BE%D1%82%D0%B2%D0%B5%D1%82%D1%8B-%D0%B4%D0%BB%D1%8F-%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BF%D0%BE/%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B-%D0%B8-%D0%BE%D1%82%D0%B2%D0%B5%D1%82%D1%8B-%D1%87%D0%B0%D1%81%D1%82%D1%8C-3-6194de0a8bd2)\n\n[Top 40 QA (Quality Assurance) Interview Questions & Answers (2022)](https://www.guru99.com/qa-interview-questions-answers.html)\n\n[101+ вопросов по автоматизации и тестированию вручную](http://getbug.ru/101-voprosov-po-avtomatizatsii-i-testirovaniyu-vruchnuyu/)\n\n[Собеседование тестировщиков: вопросы на собеседовании qa](https://automated-testing.info/t/sobesedovanie-testirovshhikov-voprosy-na-sobesedovanii-qa/10078)\n\n[Каких ответов я жду на собеседовании по тестированию](https://habr.com/ru/post/254209/)\n\n[Собеседование Junior Test Engineer](https://fulcrum.software/ua/interview-jun-test-engineer/)\n\n\n### Про систему управления тестированием Qase\n\n[Официальный сайт](https://qase.io/pricing)\n\n[Туда, не зная куда: каким мы увидели Qase](https://habr.com/ru/company/indriver/blog/666192/)\n\n### Testing Challenge\n\nhttps://qakrotov.com/\n\n[Разбор с примерами и ответами](https://qatalks.ru/testing-challenge-answers)\n\nhttps://www.youtube.com/watch?v=vpj5YDuH7ls\n\n### Разное\n\n[Тренажер по ISTQB](https://istqb-training.ru/Training)\n\n[Тесты по разным областям связанным с тестированием](https://www.guru99.com/tests.html)\n\n[Чек-лист тестирования требований](https://habr.com/ru/post/543340/)\n\n[Web Application Testing Checklist: Example Test Cases for Website](https://www.guru99.com/complete-web-application-testing-checklist.html#2)\n\n[Список книг по тестированию](https://radar4site.ru/blog/16-knigi-po-testirovaniyu.html)\n\nhttps://rocket-science.pro/#program\n\nhttps://www.softwaretestinghelp.com/basic-skills-that-every-tester-fresher-should-have/\n\n### YouTube уроки\n\nhttps://www.youtube.com/watch?v=l5cAeQ3BhjI\n\nhttps://www.youtube.com/watch?v=y6vZu6HKrDg\n\nhttps://www.youtube.com/watch?v=s9fH9yS9K8c\n\nhttps://www.youtube.com/watch?v=MmbVEwYnWTs&list=PLZqgWWF4O-zg03RGSZ2GpHLE3BmO8bjKo\n\n## Нагрузочное тестирование\n\n- Load testing vs Perfomance testing vs Volume vs Atress\n- Метрики нагрузочного тестирования\n- Инструменты нагрузочного тестирования\n- Администрирование с настройкой мониторинга\n- Работа со скриптами, прасерами и заглушками\n- Основные методики и отчеты\n- Понятие настройки генератора нагрузки\n\n\n**todo:**\n\n- Lee Copland!\n- Основы ISTQB","date":"2022-05-26T00:00:00.000Z","icon":"fas fa-bug","image":"null","path":"/teoreticheskaya-baza-po-testirovaniyu-spisok-voprosov/","order":3,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"}],"headings":[{"value":"Тестирование, Quality control, Quality assurance","anchor":"#тестирование-quality-control-quality-assurance"},{"value":"Понятие качества, международные стандарты качества ???","anchor":"#понятие-качества-международные-стандарты-качества-"},{"value":"Жизненный цикл дефекта","anchor":"#жизненный-цикл-дефекта"},{"value":"Жизненный цикл разработки ПО, SDLC (Software Development LifeCycle)","anchor":"#жизненный-цикл-разработки-по-sdlc-software-development-lifecycle"},{"value":"Модели разработки ПО","anchor":"#модели-разработки-по"},{"value":"Методологии разработки ПО: Scrum, Kanban, RUP, DSDM, RAD, XP","anchor":"#методологии-разработки-по-scrum-kanban-rup-dsdm-rad-xp"},{"value":"Жизненный цикл тестирования приложений, STLC (Software Testing LifeCycle)","anchor":"#жизненный-цикл-тестирования-приложений-stlc-software-testing-lifecycle"},{"value":"Принципы тестирования, Agile принципы тестирования","anchor":"#принципы-тестирования-agile-принципы-тестирования"},{"value":"Практики и подходы тестирования ???","anchor":"#практики-и-подходы-тестирования-"},{"value":"Виды тестирования","anchor":"#виды-тестирования"},{"value":"Уровни тестирования","anchor":"#уровни-тестирования"},{"value":"Техники тест-дизайна","anchor":"#техники-тест-дизайна"},{"value":"Тестовая документация","anchor":"#тестовая-документация"},{"value":"Практические вопросы","anchor":"#практические-вопросы"},{"value":"Другие вопросы","anchor":"#другие-вопросы"},{"value":"Дополнительные материалы","anchor":"#дополнительные-материалы"},{"value":"Нагрузочное тестирование","anchor":"#нагрузочное-тестирование"}]}},{"node":{"id":"3654d47de6821c30e1c8992c6fcf5550","title":"Подходы к автоматизации тестирования","content":"\n## Виды подходов\nВ автоматизированном тестировании выделяют следующие подходы:\n\n1. TDD (англ. Test Driven Development);\n2. BDD (англ. Behaviour Driven Development);\n3. KDT (англ. Keyword Driven Testing);\n4. DDT (англ. Data-driven testing).\n\n## Data-Driven Testing\nЭто тестирование, управляемое данными. При таком подходе тестовые данные хранятся отдельно от тест-кейсов, допустим, в файле либо в базе данных. Такое разделение логически упрощает тесты.\n\nData-Driven Testing используется в тех проектах, где нужно выполнить тестирование отдельных приложений в нескольких средах с большими наборами данных и стабильными test cases.\n\nОбычно при DDT выполняются следующие операции:\n- извлечение части тестовых данных из хранилища;\n- ввод данных в форму приложения;\n- проверка результатов;\n- продолжение тестирования со следующим набором входных данных.\n\nЧтобы проверка приложения была успешна, потребуются разные комбинации данных. \n\n## Keyword Driven Testing\nРечь идёт о тестах, управляемых ключевыми словами. Данный подход предполагает использование ключевых слов, описывающих набор действий, нужных для выполнения конкретного шага тестового сценария. \n\nПри таком подходе в первую очередь определяется набор ключевых слов, а только после этого ассоциируется функция либо действие, связанное с данным ключевым словом. Например, каждые шаги теста, такие как щелчок мышью, нажатие клавиши, открытие либо закрытие браузера описываются определёнными ключевыми словами («открыть» — openbrowser, «нажать» — click и т. п.).\n\nПри KDT-подходе вы можете создавать простые функциональные тесты на самых ранних этапах разработки и тестировать приложение по частям. \n\nЭтапы разработки KDT-тестов:\n\n1. Определяем ключевые слова.\n2. Реализуем ключевые слова как исполняемые файлы.\n3. Создаём тест-кейсы.\n4. Создаём скрипты.\n5. Выполняем автоматизированные сценарии.\n\nПлюсы подхода:\n\n1. функциональные тестировщики могут планировать автоматизацию тестирования до того, как приложение будет готово;\n2. тесты можно разработать без знаний программирования;\n3. подход не зависит от выбранного языка программирования. \n\n## Test Driven Development\nПодход разработки через тестирование (TDD) предполагает организацию автоматического тестирования посредством написания модульных, функциональных и интеграционных тестов, определяющих требования к коду перед написанием кода.\nТо есть в первую очередь пишется тест, проверяющий корректность работы ещё ненаписанного кода. Тест, само собой, не проходит. Далее программист пишет код, где выполняются действия, необходимые для прохождения теста. Когда тест будет успешно пройден, возможна доработка имеющегося кода.\n\nРазработка через тестирование — это больше, чем просто проверка корректности, так как она оказывает влияние и на дизайн программы. Если вы изначально сфокусированы на тестах, вам проще представить, какая именно функциональность нужна пользователю. В результате разработчик продумает детали интерфейса до его реализации. Это, в свою очередь, сократит время на разработку и отладку.\n\nКроме того, разработка через TDD сосредотачивается на тестировании отдельно взятых модулей, при этом используются заглушки (mock-объекты) для представления внешнего мира.\n\n## Behavior Driven Development\nПодход BDD — это разработка, основанная на поведении. По сути, BDD является разновидностью (расширением) TDD с той лишь разницей, что BDD-подход ориентирован на поведение сущности, которую вы тестируете (в TDD основной фокус идёт непосредственно на сам код). Суть BDD заключается в описании системы архитектуры приложения в терминах, понятных неспециалисту. Это даёт возможность ускорить процесс получения обратной связи, убрав традиционные барьеры. То есть описание пользовательских сценариев происходит на естественном языке — грубо говоря, на языке бизнеса.\n\n#### Источник информации:\n1. [Подходы к автоматизации тестирования веб-приложений](https://otus.ru/nest/post/1083/)","date":"2022-08-04T00:00:00.000Z","icon":"fas fa-robot","image":"null","path":"/podhody-k-avtomatizaczii-testirovaniya/","order":3,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"Автоматизация тестирования","path":"/tag/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"},{"title":"подходы к автоматизации","path":"/tag/%D0%BF%D0%BE%D0%B4%D1%85%D0%BE%D0%B4%D1%8B%20%D0%BA%20%D0%B0%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8/"}],"headings":[{"value":"Виды подходов","anchor":"#виды-подходов"},{"value":"Data-Driven Testing","anchor":"#data-driven-testing"},{"value":"Keyword Driven Testing","anchor":"#keyword-driven-testing"},{"value":"Test Driven Development","anchor":"#test-driven-development"},{"value":"Behavior Driven Development","anchor":"#behavior-driven-development"}]}},{"node":{"id":"88d572eb7ef5e159071648216897aa21","title":"Фреймворки автоматизации тестирования","content":"\nВ каждой команде разработки и поставки ПО группа QA отвечает за разработку, внедрение и выполнение тестов. Для каждого типа тестирования должен быть определён тестовый сценарий, принципы, правила и инструменты для проведения. Фреймворк тестирования — это набор этих руководств, инструментов и практик, который помогает инженерам-тестировщикам эффективно выполнять тестовые сценарии.\n\nСуществуют разные фреймворки для разных целей тестирования. Вот некоторые из самых популярных типов фреймворков для автоматизированного тестирования:\n\n## Модульный\nПриложение разделено на отдельные модули, и каждый модуль тестируется в изолированном состоянии;\n\n## Линейный\nСоставление и исполнение тестовых скриптов. Тестировщики пишут тестовые сценарии последовательно, выполняя их затем для каждого отдельного тест-кейса;\n\n## Библиотечная архитектура\nСоздан на основе модульного фреймворка тестирования, с той лишь разницей, что содержит функции для многократного использования;\n\n## Управляемое данными тестирование\nТестовые скрипты выполняются и верифицируются на основе данных, которые хранятся в центральном хранилище данных или базе данных (SQL, ODBC-ресурсы, csv или xls файлы);\n\n## Тестирование по ключевым словам\nВ данном фреймворке не обязательно иметь навыки программирования, поскольку ключевые слова, используемые при создании тестов, отделены от технического кода. \nТестировщику достаточно иметь представление о всём наборе действий, реализованных во фреймворке;\n\n## Гибридный\nКомбинация из различных фреймворков.\n\nГлавная цель всех команд разработчиков программного обеспечения — обеспечить быструю поставку качественного и надежного программного продукта. Чтобы обеспечить быстрый и эффективный процесс поставки, необходимо непрерывное тестирование. Автоматизация — ключ к тому, чтобы разрабатываемое ПО могло быстро пройти через все стадии конвейера разработки и предоставить клиентам свои функции. Однако, это не означает, что команды должны вкладывать всё свое время и ресурсы в автоматизацию тестирования. Команды должны понимать, что можно и нужно автоматизировать, а что не стóит. Правильный выбор охвата тестов на ранних этапах разработки имеет большое значение.","date":"2022-08-04T00:00:00.000Z","icon":"fas fa-robot","image":"null","path":"/frejmvorki-avtomatizaczii-testirovaniya/","order":4,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"Автоматизация тестирования","path":"/tag/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"},{"title":"фреймворки автоматизации","path":"/tag/%D1%84%D1%80%D0%B5%D0%B9%D0%BC%D0%B2%D0%BE%D1%80%D0%BA%D0%B8%20%D0%B0%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8/"}],"headings":[{"value":"Модульный","anchor":"#модульный"},{"value":"Линейный","anchor":"#линейный"},{"value":"Библиотечная архитектура","anchor":"#библиотечная-архитектура"},{"value":"Управляемое данными тестирование","anchor":"#управляемое-данными-тестирование"},{"value":"Тестирование по ключевым словам","anchor":"#тестирование-по-ключевым-словам"},{"value":"Гибридный","anchor":"#гибридный"}]}},{"node":{"id":"223b955029c664acea8a15873cc80f7f","title":"Теоретическая база по автоматизации","content":"\nhttps://devsday.ru/blog/details/763\n\ntodo \nизучить https://drill4j.github.io/\n\nhttps://ru.education-wiki.com/8998094-automation-testing-interview-questions\n\nhttps://www.toolsqa.com/\nhttps://coderlessons.com/tutorials/kachestvo-programmnogo-obespecheniia/uchebnik-selenium/uchebnik-selenium\n\nhttps://jsehelper.blogspot.com/2016/01/junit.html\n\nhttps://coderlessons.com/tutorials/kachestvo-programmnogo-obespecheniia/ruchnoe-testirovanie/interviu-po-avtomatizatsii-testirovaniia-q-a\n\nhttps://aqa-topics.herokuapp.com/\n\nhttps://sites.google.com/view/aqa-interview\n\nhttps://www.youtube.com/watch?v=fBTQ3v0i9ic\n\nhttps://www.youtube.com/watch?v=d7aq0aXYEss\n\nhttps://www.youtube.com/watch?v=lWhvKId7IYY\n\nhttps://www.youtube.com/watch?v=gm3lcdcNvMs\n\nhttps://www.youtube.com/watch?v=9kaHs4wCKFc\n\nhttps://www.youtube.com/watch?v=uSVI6Hzu2JM\n\nhttps://atesting.ru/kak-obiasnit-intervuery-stryktyry-avtomatizacii-testirovaniia/\n\nhttp://getbug.ru/101-voprosov-po-avtomatizatsii-i-testirovaniyu-vruchnuyu/\n\n## Test NG\n\nhttps://ru.lambdageeks.com/testng-interview-questions-and-answers/\nhttps://xwizard-test.blogspot.com/2017/02/qa-interview-qa-automation-python-linux.html\n\nhttps://habr.com/ru/company/sbermarket/blog/665260/\n\nhttps://www.conventionalcommits.org/ru/v1.0.0/\n\nhttps://telegra.ph/Ne-avtomatizirujte-test-cases-02-21\n\nЯ больше по java.\nНаписать прогу FizzBuzz.\nФункцию для нахождения факториала.\nРеализация любого алгоритма сортировки.\nSelenium: Explicit/Implicit wait, что лучше, когда какой лучше применять, что это вообще такое.\nВиды селекторов , какие быстрее. и т.д.\nJava: В основном вопросы как по учебнику. Бывает иногда что то необычное - как изменяется размер hashmap, как ведет себя ArrayList при добавлении или удалении элементов.\nStream, lambda, default method, опять же довольно стандартно.\nSQL: Joins, Unions, Delete/Truncate, Having, ну может попросят какой то простенький запрос набросать\n\n\nРаспарсить строку - вытащить все инты, раскидать их по двум массивам - в одном четные по возрастанию, в другом нечетные по убыванию\n\nВиды тестирования, разница между Load и Perfomance testing.\nУровни тестирования.\nКак будешь тестировать апп, когда требований нет , аппликейшен готов, и есть неделя до релиза.\nКак поведешь себя в ситуации нескольких проектов одновременно.\nКак будешь разрабатывать automation framework, который можно применять более чем в одном проекте.\nТехники тестирования и их применение.\n\n\nCI tools - Jenkins - тут зависит от вашего опыта. Я больше по созданию джоб и навинчиванию плагинов на уже существующий каркас.\nМетодологии разработки.\nSoftware development life cycle, аналогично для тестирования.\nSeverity/Priority\n\nУмеешь ли писать framework с нуля.\nxpath: contains, text, or/and.\nКак написать общий xtype для элементов разного типа, но с одним class.\nАналогичный вопрос для CSS selectors.\n\nКак смержить два массива - алгоритм и реализация.\nКак из 4-х чисел получить максимальное время в 24-ом формате.\nАлгоритм, как такое тестировать будешь.\nJunit и TestNg - различия, что лучше и почему.\nData providers.\n\n\nava:\n\nТеория:\n\n1)Принципы ООП\n2)Объяснить своими словами каждый принцип.\n3)Модификаторы доступа. Какие знаете? Зачем используются?\n4)Переопределение, перегрузка - что это ? Цели применения?\n5)Наследование и композиция - что это ? Цели применения?\n6)Зачем нужен интерфейс, абстрактный класс, enum?\n7)Паттерны программирования: Singleton (Одиночка), Abstract factory (Абстрактная фабрика), Decorator(Декоратор).\n\nАвтоматизация:\n\n1)Что такое Selenium?\nЗачем нужен webdriver?\nЗачем нужен selenium-server?\n\n2)Что такое Junit? TestNG? Как запускаете тесты?\n3)Maven. Зачем используется?\n4)Jenkins, TeamCity что это? Какой и как использовали?\n5)Использовали ли Selenide, Allure. Что это за библиотеки и зачем используются?\n6)Паттерн PageObject. Объяснить в теории его смысл.\n\n\nОтносительно недавно, вновь прошел через данную полосу препятствий.\nСобеседовался на QA Automation Lead/Senior и SDET.\nПрактически, никто не задавал вопросов по теории тестирования. В основном, фокус на стратегии, и как внедрять процесс автоматизации. Разве, что классический вопрос про, как тестировать, когда время поджимает.\n\nПро классику, типо, что такое селениум, пейджобджект, кукумбер не буду писать.\n\nСобственно вопросы( идут как попало):\n1. Java - все по классике. Но теперь добавились вопросы по stream/optional, анонимные классы, функциональные интерфейсы, лямбда, предикаты.\n2. Задачки : сортировку никто не отменял. Пузырек, quick sort, merge, selection. И их математическая сложность.\nКак написать простенький rest request с какому то урлу и как расспарсить ответ.\nКак реализовать интерфейс итератор. Развернуть строку, как проверить на палиндром, факториал, фиббоначи. Как найти цикл в связном списке.\nКак удалить дубликаты из списка, как проверить что дубликаты удалены.\nРасспросить строку в зависимости от условий.\n\nКак схлопывать массивы.. Например:\nInput: [2,5],[7,8],[4,5]\nOutput: [2,5],[7,8]\n\nМогут попросить реализовать класс с какой то логикой.\n\nЯ заметил, что лично меня стали спрашивать с уклоном в программирование. На последнем собеседовании было много алгоритмов и вопросов по ним.\n\nПару раз попадал на system design interview.\nОдин раз просили задизайнить твиттер, а потом нетфликс. Это дико круто и интересно.. Но без практики это вообще труба.\nТут просто гугл в помощь и миллион вопросов к тем, кто ставит перед вами эту задачу. Вы должны спрашивать, и использовать ответы на ваши вопросы в построении ответов.\n\n3. Jenkins/teamcity - что это, с чем едят, зачем нужно, как использовать.\nЧто есть CI/CD зачем надо, в чем плюсы.\n4. Docker - что это. Зачем?\nВ чем отличие от VM Docker file vs container vs image. Что такое Docker layer.\nКак двум контейнерам увидеть друг друга.\nЧто такое service. Что такое commit.\n5. SOLID -что это, как расшифровывается.\n6. Уделите внимания структурам данных : hash table, list, set, tree, queue.\n7. Git: cherry pick, merge, rebase.\n\nhttp://infobase.athn.ru/program/2017/11/junior-automation-qa-voprosyi-na-sobesedovanii/\n\nhttps://ru.bitdegree.org/rukovodstvo/selenium/\n\nhttps://habr.com/ru/company/otus/blog/350368/\n\nhttps://www.youtube.com/watch?v=C8Z-N0y6Sqo&list=PLMrFx1ncacK7qZFZB9oePwIi_oFPqHHKM&index=6\n\nhttps://www.youtube.com/watch?v=C8Z-N0y6Sqo&list=PLMrFx1ncacK7qZFZB9oePwIi_oFPqHHKM&index=6\n\nhttps://www.youtube.com/watch?v=ZWI7Khx6UpE&t=367s\n\n\nПо Selenium я бы также советовал подготовиться. Примеры вопросов есть тут и тут.\n\nТакже могут спросить про CSS/XPath-локаторы. Я разобрался в них достаточно глубоко, так как понимал, что на такой должности буду пользоваться этой информацией и навыками довольно часто.\n\nнастройка Selenium/Selenoid, какие браузеры использовать, как правильно подбирать CSS локаторы","date":"2022-05-26T00:00:00.000Z","icon":"fas fa-robot","image":"null","path":"/teoreticheskaya-baza-po-avtomatizaczii/","order":4,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"собеседование","path":"/tag/%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"},{"title":"interview","path":"/tag/interview/"}],"headings":[{"value":"Test NG","anchor":"#test-ng"}]}},{"node":{"id":"09744d88b447518239c928939357dd85","title":"Теоретическая база по программированию","content":"\n\nТут уже посерьезнее и нужно будет готовить вопросы о типах данных, переменных, циклах, массивах, ООП, исключениях, коллекциях, строках, паттернах проектирования (Singleton/PageObject/PageFactory/Builder и прочее). Ознакомиться с примерными вопросами, в данном случае — Java, можно тут.\n\nС практической точки зрения на самом собеседовании могут попросить написать алгоритм сортировки либо что-то связанное с объектами.\n\nНе всем кандидатам подобного собеседования нравиться, когда их просят написать тестовый код, аргументируя это тем, что в действительности это вовсе не нужно для работы.\n\nКонечно, в этом есть доля правды, но делается это все для того, чтобы узнать с какими фреймворками кандидат может работать, а с какими, банально, не знаком.\n\nЧаще всего, если человек действительно умеет и любит писать код, он запросто справится с тестовым заданием. Особенно если у него имеется опыт работы на специфических задачах (использование циклов, ветвей, работа с массивами и хеш-картами).\n\nОбязательно будет пару вопросов касательно ООП — понятие класса и экземпляра класса, термин инкапсуляции, разновидности модификаторов доступа и другое.\n\nДополнительно могут начать интересоваться вашими познаниями в паттернах программирования. Здесь нужно ориентироваться в PageFactory, Factory, Builder и PageObject. Можно заранее подучить принципы разработки SRP, KISS, SOLID и DRY.\n\n## Java\n\nключевые изменения в java начиная с 9ой версии\n\nСамоучитель\nhttps://metanit.com/java/tutorial/\nhttp://proglang.su/java\nhttps://howtodoinjava.com/java/\n\n## паттерны проектирования\n\n- https://refactoring.guru/ru/design-patterns/catalog\n\nhttps://atesting.ru/top-40-voprosov-i-otvetov-na-sobesedovanii-po-java-v-2021-gody/\n\n\n## GIT\nhttps://atesting.ru/60-voprosov-dlia-sobesedovanii-po-git-kotorye-vam-nyjno-podgotovit-v-2021-gody/\n\nhttps://www.hackerrank.com/\n\nhttps://www.codewars.com/\n\n\nhttps://leetcode.com/  \nhttps://www.codewars.com/","date":"2022-05-26T00:00:00.000Z","icon":"fas fa-bug","image":"null","path":"/teoreticheskaya-baza-po-programmirovaniyu/","order":5,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"собеседование","path":"/tag/%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"},{"title":"interview","path":"/tag/interview/"}],"headings":[{"value":"Java","anchor":"#java"},{"value":"паттерны проектирования","anchor":"#паттерны-проектирования"},{"value":"GIT","anchor":"#git"}]}},{"node":{"id":"1c91dbf0eb6c3d54b9ff3616da82f872","title":"Теоретическая база по TestOps","content":"\n\nВ этом блоке могут поинтересоваться знаниями работы с CI-системой, а именно с чем вы предпочитаете работать. Могут спросить касательно опыта работы с bash: знаете ли вы команды mv, cd, ps, ls.\n\nМогут спрашивать о Docker — понятие образа, как правильно запускать контейнер, как выполнить установку директории host-машины и прочее.\n\nВ конце, вероятнее всего, спросят касательно знаний о системах контроля версий — от принципов работы git до вариантов решения конфликтов при Merge Request.\n\nhttps://habr.com/ru/company/maxilect/blog/548876/\n\n## Системы контроля версий\n- Что такое система контроля версий, цель и виды\n- Основные команды GIT\n- Есть удаленный репозиторий по ссылке http://1.2.6.192/test.git. Какие шаги нужно выполнить для того, чтобы подтянуть этот репозиторий локально? \nТут всё просто. Проверяем умение человека работать с системами контроля версий. Как ни странно, этот вопрос тоже оказался неподъемным для большинства кандидатов. \nКакого ответа я жду: \n1. Проверить, установлен ли git локально(мы же тестировщики, помните?)\n2. Проверить, есть ли у нас права на доступ к этому репозиторию.\n3. Сделать git init/checkout/pull ИЛИ git clone для репозитория, если предыдущие два шага не выявили проблем. \n- Работа с тегами\n- Просмотр коммитов\n- Ветвление в Git и работа с ветками\n- Установка GIT на сервер\n\n\nКак работает Интернет\nhttps://developer.mozilla.org/ru/docs/Learn/Common_questions/How_does_the_Internet_work\nhttps://developer.mozilla.org/ru/docs/Learn/Common_questions/Pages_sites_servers_and_search_engines\nhttps://developer.mozilla.org/ru/docs/Learn/Common_questions/What_is_a_domain_name\nЭта статья о том, что такое Интернет, и как он работает.\n\nНеобходимые знания:\tОтсутствуют, но мы будем признательны, если вы сначала прочтёте Материал о там как начать разрабатывать свой сайт\nЦель:\t\nВы изучите основы технической инфраструктуры Веба и поймёте разницу между Вебом и интернетом. \n\nРезюме\nИнтернет является основой сети (the Web), технической инфраструктурой, благодаря которой и существует Всемирная Паутина. По своей сути, интернет - очень большая сеть компьютеров, которые могут взаимодействовать друг с другом.\n\nИстория интернета не до конца ясна. Проект по созданию интернета был начат в 60-х годах как исследовательский проект при поддержке министерства обороны США, но уже в 80-е годы вырос в сеть, которую поддерживали и развивали множество университетов и частных компаний. Технологии, лежащие в основе интернета, также продолжали развиваться со временем, но основной принцип работы не сильно изменился: Интернет - это способ подключить компьютеры в единую сеть и убедиться, что даже при серьёзных сбоях, они всё равно найдут способ связаться друг с другом.\n\nАктивное изучение\nКак работает интернет за 5 минут: 5-минутный видеоролик поможет вам понять базовые принципы работы интернета (автор Aaron Titus).\nПогружаемся глубже\nПростая сеть\nКогда нужно связать между собой два компьютера, вы должны связать их в сеть либо проводным (обычно с помощью Ethernet кабеля), либо беспроводным способом (например, с помощью WiFi или Bluetooth). Современные компьютеры поддерживают любой из этих способов связи.\n\nПримечание: До конца этой статьи мы будем говорить только о физическом (проводном) способе подключения, но беспроводные сети работают аналогичным образом.\n\nTwo computers linked together\n\nТаким способом вы можете подключить более двух компьютеров, но с каждым новым это становится все сложнее. Если хочется подключить, скажем, 10 компьютеров, вам понадобится 45 кабелей и 9 сетевых плат в каждом компьютере!\n\nTen computers all together\n\nЧтобы решить эту проблему, каждый компьютер в сети подключается к специальному маленькому компьютеру. Этот компьютер называют маршрутизатором. Маршрутизатор исполняет только одну роль: как сигнальщик на железной дороге он следит за тем, чтобы пакет, отправленный одним компьютером — источником — достиг пункта назначения. Чтобы отправить сообщение компьютеру B, компьютер A сначала должен отправить его маршрутизатору, который перенаправит его компьютеру B и проконтролирует, чтобы данные не попали компьютеру C.\n\nС добавлением маршрутизатора наша сеть здорово упрощается: чтобы соединить 10 компьютеров нам требуется только 10 кабелей (каждый кабель соединяет маршрутизатор с одним из компьютеров).\n\nTen computers with a router\n\nСеть сетей\nПока все нормально. Но что нам делать, если нужно объединить в сеть сотни, тысячи или миллиарды компьютеров? Конечно, один маршрутизатор не справится с этой задачей, но если вы внимательно читали, то помните, что маршрутизатор — это обычный компьютер, и ничто не мешает нам соединить друг с другом 2 маршрутизатора. Давайте сделаем это.\n\nTwo routers linked together\n\nПодключая компьютеры к маршрутизатору, а затем — маршрутизатор к другому маршрутизатору, мы можем увеличивать нашу сеть до сколь угодно больших размеров.\n\nRouters linked to routers\n\nТакая сеть уже очень похожа на то, что мы называем интернетом, но мы что-то упустили. Наша сеть построена для решения только наших задач. Но кроме неё есть и другие сети: наши друзья, соседи — кто угодно может создать свою сеть. Как же нам их объединить? Мы не можем протянуть кабели между нашим домом и всеми остальными сетями в мире. Чтобы решить эту проблему, мы можем воспользоваться уже существующими кабельными сетями. Ведь у нас дома уже есть кабели, например, электрические или телефонные. Телефонный провод уже соединяет ваш дом со всем остальным миром, так что он идеально подходит для решения нашей задачи. Чтобы подключить нашу сеть к глобальной сети с помощью телефонного провода, нам понадобится специальное оборудование, которое называется модем. Модем перекодирует информацию, поступающую из нашей сети в формат, который можно передавать через телефонную сеть, и наоборот, декодируют информацию из телефонной сети в формат, который распознают наши компьютеры.\n\nA router linked to a modem\n\nИтак, мы подключились к телефонной сети. Следующий шаг — передать сообщение из нашей сети в сеть, с которой мы хотим связаться. Чтобы сделать это, мы должны подключить нашу сеть к провайдеру услуг интернета (Internet Service Provider (ISP)). Провайдер — компания, которая обслуживает специальные маршрутизаторы, которые не только подключены друг к другу (объединяют в единую сеть всех клиентов провайдера), но также связаны с маршрутизаторами других провайдеров. Таким образом, наше сообщение, пройдя транзитом через сеть нескольких провайдеров, достигнет сеть назначения. Интернет — это сеть сетей, которая объединяет в себе всю вышеперечисленную инфраструктуру.\n\nFull Internet stack\n\nПоиск компьютера\nЧтобы послать сообщение какому-то компьютеру, необходимо как-то обратиться к нему, выделить среди других. Поэтому каждый компьютер, подключённый к сети, имеет свой уникальный адрес для связи: этот адрес называют IP-адресом (IP — сокращение для Internet Protocol, протокол интернета). В зависимости от версии протокола IP этот адрес может записываться по-разному. Самая широко используемая версия интернет-протокола — версия 4. Адреса IPv4 обычно записываются в виде четырёх чисел, разделённых точками, например: 192.168.2.10.\n\nТакие адреса отлично подходят для компьютеров, но людям очень сложно их запоминать. Чтобы упростить себе жизнь, мы можем присвоить каждому IP-адресу псевдоним с понятным для человека именем. Такой псевдоним называют доменным именем. Например, google.com — доменное имя, которое является псевдонимом IP-адреса 173.194.121.32. Использование доменного имени — самый простой способ обратиться к компьютеру в интернете.\n\nShow how a domain name can alias an IP address\n\nИнтернет и веб\nКак вы уже заметили, когда мы просматриваем Веб с помощью браузера, обычно мы используем доменное имя, чтобы обратиться к веб-сайту. Означает ли это, что Интернет и Веб — это одно и то же? Ответ не так прост. Мы уже знаем, что Интернет — это техническая основа, которая позволяет миллиардам компьютеров связываться друг с другом. Среди этих компьютеров есть небольшая группа (называемая веб-серверами), которые могут отправлять сообщения, распознаваемые браузерами. Интернет —  это инфраструктура, а Веб — это сервис, построенный на основе этой инфраструктуры. Стоит отметить, что кроме Веба есть и другие сервисы, построенные на базе Интернета. Например, электронная почта или IRC (en-US).","date":"2022-05-26T00:00:00.000Z","icon":"fas fa-bug","image":"null","path":"/teoreticheskaya-baza-po-test-ops/","order":6,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"собеседование","path":"/tag/%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"},{"title":"interview","path":"/tag/interview/"}],"headings":[{"value":"Системы контроля версий","anchor":"#системы-контроля-версий"}]}},{"node":{"id":"54c48691fab0f00f74bb7b7545fbca72","title":"WEB тестирование. Список вопросов","content":"\n\n\n\nКак работает Веб\nНазад\nОбзор: Getting started with the web\nКак работает Веб даст упрощённое представление о том, что происходит при просмотре веб-страницы в браузере на вашем компьютере или телефоне.\n\nЭта теория не так важна для написания веб-кода в краткосрочной перспективе, но в скором времени вы действительно начнёте извлекать выгоду из понимания того, что происходит в фоновом режиме.\n\nКлиенты и серверы\nКомпьютеры, подключённые к сети называются клиентами и серверами. Упрощённая схема того, как они взаимодействуют, может выглядеть следующим образом:\n\n\n\nКлиенты являются обычными пользователями, подключёнными к Интернету посредством устройств (например, компьютер подключён к Wi-Fi, или ваш телефон подключён к мобильной сети) и программного обеспечения, доступного на этих устройствах (как правило, браузер, например, Firefox или Chrome).\nСерверы - это компьютеры, которые хранят веб-страницы, сайты или приложения. Когда клиентское устройство пытается получить доступ к веб-странице, копия страницы загружается с сервера на клиентский компьютер для отображения в браузере пользователя.\nОстальные части панели инструментов\nКлиент и сервер, о которых мы рассказали выше, не раскрывают всю суть. Есть много других компонентов, и мы опишем их ниже.\n\nА сейчас давайте представим, что Веб - это дорога. Одна сторона дороги является клиентом, который представляет собой ваш дом. Другая сторона дороги является сервером, который представляет собой магазин. Вы хотите что-то купить в нём.\n\n\n\nПомимо клиента и сервера, мы также должны уделить внимание:\n\nВаше Интернет-подключение: Позволяет отправлять и принимать данные по сети. Оно подобно улице между домом и магазином.\nTCP/IP: Протокол Управления Передачей и Интернет Протокол являются коммуникационными протоколами, которые определяют, каким образом данные должны передаваться по сети. Они как транспортные средства, которые позволяют сделать заказ, пойти в магазин и купить ваши товары. В нашем примере, это как автомобиль или велосипед (или собственные ноги).\nDNS: Система Доменных Имён напоминает записную книжку для веб-сайтов. Когда вы вводите веб-адрес в своём браузере, браузер обращается к DNS, чтобы найти реальный адрес веб-сайта, прежде чем он сможет его получить. Браузеру необходимо выяснить, на каком сервере живёт сайт, поэтому он может отправлять HTTP-сообщения в нужное место (см. Ниже). Это похоже на поиск адреса магазина, чтобы вы могли попасть в него.\nHTTP: Протокол Передачи Гипертекста - это протокол, который определяет язык для клиентов и серверов, чтобы общаться друг с другом. Он, как язык, который вы используете, чтобы заказать ваш товар.\nФайлы компонентов: сайт состоит из нескольких различных файлов, которые подобны различным отделам с товарами в магазине. Эти файлы бывают двух основных типов:\nФайлы кода: сайты построены преимущественно на HTML, CSS и JavaScript, хотя вы познакомитесь с другими технологиями чуть позже.\nМатериалы: это собирательное название для всех других вещей, составляющих сайт, такие как изображения, музыка, видео, документы Word и PDF.\nЧто же на самом деле происходит?\nКогда вы вводите веб-адрес в свой браузер (для нашей аналогии - посещаете магазин):\n\nБраузер обращается к DNS серверу и находит реальный адрес сервера, на котором \"живёт\" сайт (Вы находите адрес магазина).\nБраузер посылает HTTP запрос к серверу, запрашивая его отправить копию сайта для клиента (Вы идёте в магазин и заказываете товар). Это сообщение и все остальные данные, передаваемые между клиентом и сервером, передаются по интернет-соединению с использованием протокола TCP/IP.\nЕсли сервер одобряет запрос клиента, сервер отправляет клиенту статус \"200 ОК\", который означает: \"Конечно, вы можете посмотреть на этот сайт! Вот он\", а затем начинает отправку файлов сайта в браузер в виде небольших порций, называемых пакетными данными (магазин выдаёт вам ваш товар или вам привозят его домой).\nБраузер собирает маленькие куски в полноценный сайт и показывает его вам (товар прибывает к вашей двери — новые вещи, потрясающе!).\nDNS\nРеальные веб-адреса - неудобные, незапоминающиеся строки, которые вы вводите в адресную строку, чтобы найти ваши любимые веб-сайты. Эти строки состоят из чисел, например: 63.245.215.20.\n\nТакой набор чисел называется IP-адресом и представляет собой уникальное местоположение в Интернете. Впрочем, его не очень легко запомнить, правда? Вот почему изобрели DNS. Это специальные сервера, которые связывают веб-адрес, который вы вводите в браузере (например, \"mozilla.org\"), с реальным IP-адресом сайта.\n\nСайты можно найти непосредственно через их IP-адреса. Вы можете найти IP-адрес веб-сайта, введя его домен в инструмент, как IP Checker.\n\nПакеты\nРанее мы использовали термин \"пакеты\", чтобы описать формат, в котором данные передаются от сервера к клиенту. Что мы имеем в виду? В основном, когда данные передаются через Интернет, они отправляются в виде тысячи мелких кусочков, так что множество разных пользователей могут скачивать один и тот же сайт одновременно. Если бы сайты отправлялись одним большим куском, тогда бы только один пользователь мог скачать его за один раз, и это, очевидно, сделало бы пользование интернетом не эффективным и не очень радостным.\n\n\n\n- Веб формы и веб сервера\n## UI/UX и Pixel Perfect\n\n\n- Тестирование верстки, JS ошибок\n- Тестирование мобильной верстки\n- Тестирование функциональной безопасности SSL\n- Работа с Dev Tool\n- Подходы к тестированию веб приложений\n- Тестирование кросбраузерности, масштабируемости\n- Тестирование кодировок\n- Тестирование локализации, интернационализации\n- Конфигурационное тестирование\n- Работа с Cookie\n\n\n## особенности веб-тестирования\nhttps://www.softwaretestinghelp.com/web-application-testing/\n\n\nhttps://www.youtube.com/watch?v=-AqjiEfSrDE\n\nhttps://www.youtube.com/watch?v=WMjrSyUiXNA\n\nhttps://www.youtube.com/watch?v=7moC23y6G1Q","date":"2022-05-26T00:00:00.000Z","icon":"fas fa-bug","image":"null","path":"/web-testirovanie-spisok-voprosov/","order":7,"category":{"title":"interview","path":"/category/interview/"},"tags":[{"title":"qa","path":"/tag/qa/"},{"title":"собеседование","path":"/tag/%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"},{"title":"interview","path":"/tag/interview/"}],"headings":[{"value":"UI/UX и Pixel Perfect","anchor":"#uiux-и-pixel-perfect"},{"value":"особенности веб-тестирования","anchor":"#особенности-веб-тестирования"}]}}]}},"relatedCategory":{"id":"2585951235722f2f34ee70725f785e38","title":"interview","path":"/category/interview/","related":[{"id":"manual","path":"/category/manual/","title":"manual"},{"id":"automation","path":"/category/automation/","title":"automation"}]}},"context":{}}