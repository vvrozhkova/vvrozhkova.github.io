{"hash":"7ce6058f470c3851afaa44882541a7f3d1089ffc","data":{"post":{"title":"JUnit vs TestNG","content":"\n## Добавление метаинформации\n\n### Обозначение тестового метода \n\n- TestNG\n\n```java\n@Test\npublic void regularTest(){\n\n}\n```\n\n- JUnit\n\n> Все импорты без \\*, потому что * в импортах, это не очень хорошо. \nНапример, при review человеку сложно понять, что именно пришло из заимпорченного класса.\n\nВ аннотацию Test не добавляется ничего, там нет дополнительных опций.\n\n```java\n@Test\npublic void regularTest(){\n\n}\n```\n\n### Добавление описания к тесту\n\n- TestNG\n\n```java\n@Test(description = \"Test description\")\npublic void displayNameTest(){\n\n}\n```\n\n- JUnit\n\n```java\n@Test\n@DisplayName(\"Test description\")\npublic void displayNameTest(){\n\n}\n```\n\n### Способ игнорировать тесты\n\n- TestNG\n\n```java\n@Test(enabled = false)\npublic void ignoredTest(){\n\n}\n```\n\n- JUnit\n\nБудет выброшен exception с указанным описанием. В описание также можно указать номер задачи на исправление.\n\n```java\n@Test\n@Disabled(\"Bad test!!! AE-1\")\npublic void ignoredTest(){\n\n}\n```\n\n### Запуск тестов по группам\n\n> в группу можно добавлять номер issue и тогда можно запускать проверку по задаче\n\n- TestNG\n\n```java\n@Test(groups = {\"web\", \"critical\"})\npublic void taggedTest(){\n\n}\n```\n\n- JUnit\n\n```java\n@Test\n@Tags({@Tag(\"web\"), @Tag(\"criticla\")})\npublic void taggedTest(){\n\n}\n```\n\n### Тест будет падать, если он идет дольше указанного времени\n\n- TestNG\n\n```java\n@Test(timeOut = 2)\npublic void timeoutTest(){\n\n}\n```\n\n- JUnit\n\n```java\n@Test\n@Timeout(value = 2, unit = TimeUnit.MINUTES)\npublic void timeoutTest(){\n\n}\n```\n\n### Тест запускается несколько раз\n\n- создавать нагрузку :))\n- запуск теста с рандомными данными, при каждом запуске используются новые данные\n\n- TestNG\n\n```java\n@Test(invocationCount = 10)\npublic void repeatedTest(){\n\n}\n```\n\n- JUnit\n\n```java\n@RepeatedTest(10)\npublic void repeatedTest(){\n\n}\n```\n\n### Custom Annotations (JUnit)\n\nМожно создать свою аннотацию для которой задать поределенные параметры и этой аннотацией обозначать нужные тесты.\n\n> Можно изначально добавить свою аннотацию и использовать ее везде, тк в случае добаления каких то опции всем тестам достаточно будет добавить их только для одной кастомной аннотации.\n\n```java\nimport org.junit.jupiter.api.Tag;\nimport org.junit.jupiter.api.Test;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\npublic class AnnotationsCustomTest{\n\n    @FastTest\n    public void customTagTest(){\n    }\n    \n    @Test\n    @Tag((\"fast\"))\n    @Target({ElementType.TYPE, ElementType.METHOD})\n    @Retention(RetentionPolicy.RUNTIME)\n    public @interface FastTest{\n    }\n}\n```\n\n## Параметризованные тесты \n\n- TestNG\n\n```java\nimport org.testng.annotations.DataProvider;\nimport org.testng.annotations.Test;\nimport org.testng.util.Strings;\n\nimport static org.testng.Assert.assertEquals;\n\npublic class ParamsTest {\n    @DataProvider(name = \"test1\")\n    public static Object[][] primeNumbers(){\n        return new Object[][]{\n            {null, true},\n            {\"\", true},\n            {\" \", true},\n            {\"not blank\", false} \n        };\n    }\n\n    @Test(dataProvider = \"test1\")\n    public void testBlankString(String input, boolean expected){\n        essertEquals(expected, Strings.isNullOrEmpty(input));\n    }\n}\n```\n\n- JUnit\n\nАналог TestNG\n\n```java\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\nimport org.junit.platform.commons.util.StringUtils;\n\nimport java.util.stream.Stream;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class ParamsTest {\n\n    private static Stream<Arguments> blankStringParameters() {\n        return Stream.of(\n                Arguments.of(null, true),\n                Arguments.of(\"\", true),\n                Arguments.of(\" \", true),\n                Arguments.of(\"not blank\", false)\n        );\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"blankStringParameters\")\n    void testBlankString(String input, boolean expected) {\n        assertEquals(expected, StringUtils.isBlank(input));\n    }\n}\n```\n\nи есть другой способ\n\n```java\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.CsvSource;\nimport org.junit.jupiter.params.provider.EnumSource;\nimport org.junit.jupiter.params.provider.NullAndEmptySource;\nimport org.junit.jupiter.params.provider.ValueSource;\nimport org.junit.platform.commons.util.StringUtils;\n\nimport java.time.Month;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class ParamsTest {\n\n    @ParameterizedTest\n    @NullAndEmptySource\n    @ValueSource(strings = {\" \", \"\\t\", \"\\n\"})\n    void isBlank_ShouldReturnTrueForAllTypesOfBlankStrings(String input){\n        assertTrue(StringUtils.isBlank(input));\n    }\n\n    @ParameterizedTest\n    @EnumSource(value = Month.class,  names = {\"APRIL\", \"JUNE\", \"JULY\"})\n    void someMonths_Are30DaysLong(Month month) {\n        final boolean isALeapYear = false;\n        assertEquals(30, month.length(isALeapYear));\n    }\n    \n    @ParameterizedTest\n    @CsvSource({\"test,TEST\", \"tEst,TEST\", \"Java,JAVA\"})\n    void toUpperCase_ShouldGenerateTheExpectedUppercaseValue(String input, String expected){\n        String actualValue = input.toUpperCase();\n        assertEquals(expected, actualValue);\n    }\n}\n```\n\n## Параметризация через класс\n\n- TestNg\n\n```java\n@Test(dataProvider = \"user\",\n    dataProviderClass = UserDataProvider.class)\npublic void register(User user){\n    assert user.getName().equals(\"Ivan\"); \n}\n```\n\nЛибо через IAnnotationTransformer;\n\n- JUnit\n\n```java\nimport org.junit.jupiter.api.extension.ExtensionContext;\nimport org.junit.jupiter.api.extension.ParameterContext;\nimport org.junit.jupiter.api.extension.ParameterResolver;\n\npublic class UserParameterResolver implements ParameterResolver {\n\n\n    @Override\n    public boolean supportsParameter(ParameterContext parameterContext, \n                                     ExtensionContext extensionContext) {\n        return parameterContext.getParameter().getType().equals(User.class);\n    }\n\n    @Override\n    public Object resolveParameter(ParameterContext parameterContext,\n                                   ExtensionContext extensionContext) {\n        return new User(\"Ivan\");\n    }\n}\n```\n\n```java\n\n@ExtendWith(UserParameterResolver.class)\nclass Parametrized{\n    \n    @Test\n    void canRegister(User user){\n        \n    }\n}\n```\n\n## Проверка exception\n\nПроверить, что тест выбрасывает Exception(негативный сценарий);\n\n- TestNG\n\n```java\n@Test(expectedEceptions = ArithmeticException.class)\npublic void divisionWithException(){\n    int i = 1/0;\n}\n```\n\n- JUnit\n\nМетод assertThrows кроме проверки также возвращает сам exception и можно далее с ним делать какие нибудь другие проверки.\n\n```java\n@Test\nvoid exceptionTest(){\n    final Object nullable = null;\n    final NullPointerException exeption =  assertThrows(\n                NullPointerException.class,\n                () -> nullable.toString(),\n                \"Expected toString() to throw, but it didn't\");\n}\n```\n\n## Before/After методы\n\n- TestNG\n\nИмеются аннотации: BeforeSuite, BeforeClass, BeforeTest, BeforeGroup, BeforeMethod, AfterClass, AfterTest, afterGroup, AfterMethod, AfterSuite.\n\n- JUnit \n\nАннотации: BeforeAll, BeforeEach, AfterEach, AfterAll.\n\n## Зависимые тесты и порядок запуска тестов\n\ndependsOnGroups - зависимость от прохождения тестов определенной группы, \ndependsOnMethod - зависимость от определенного тестового метода\n\n```java\n@Test(dependsOnGroups = \"ololo\")\npublic void firstTest(){\n\n}\n\n@Test(dependsOnMethod = \"firstTest\")\npublic void secondTest(){\n\n}\n```\n\n- JUnit\n\nЗапрещает делать зависимые тесты.\n\nМожно задавать порядок тестов:\n\n```java\nimport org.junit.jupiter.api.MethodOrderer;\nimport org.junit.jupiter.api.Order;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestMethodOrder;\n\n@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\npublic class OrderedTest {\n    \n    @Test\n    @Order(1)\n    void firstTest(){}\n    \n    @Test\n    @Order(2)\n    void secondTest(){}\n}\n```\n\nМожно указываеть зависимость от определенных параметров:\n\n```java\nimport org.junit.jupiter.api.MethodOrderer;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestMethodOrder;\nimport org.junit.jupiter.api.condition.*;\n\n@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\npublic class ConditionalTest {\n\n    @Test\n    @EnabledOnOs(OS.MAC)\n    void onlyOnMacOS(){}\n\n    @Test\n    @EnabledForJreRange(min = JRE.JAVA_9)\n    void fromJava9toCurrentJavaFeatureNumber(){}\n    \n    @Test\n    @EnabledIfSystemProperty(named = \"os.arch\", matches = \".*64.*\")\n    void onlyOn64BitArchitectures(){}\n}\n```\n\n## Слушатели (Listeners)\n\n- TestNG\n\nМожно создать свой класс Listener который имплементит заданные интерфейсы, например, ISuiteListener\nи задавать выполнение определенной логика до, после теста и т.д. не используя специальные аннотации.\n\n- JUnit\n\nИспользуются Extensions. Все Extensions имплементируют класс Extension можно в него перейти и посмотреть все что его имплементит, чтобы найти нужный.\n\n```java\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.AfterEachCallback;\nimport org.junit.jupiter.api.extension.BeforeEachCallback;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.junit.jupiter.api.extension.ExtensionContext;\n\npublic class ExtensionsTest {\n\n    @Test\n    @ExtendWith(ResourceExtension.class)\n    public void extensionTest(){\n        \n    }\n    \n    public static class ResourceExtension implements BeforeEachCallback, AfterEachCallback{\n        @Override\n        public void beforeEach(ExtensionContext context) throws Exception{\n            System.out.println(\"Starting database...\");\n        }\n        \n        @Override\n        public void afterEach(ExtensionContext context) throws Exception{\n            System.out.println(\"Stopping database...\");\n        }\n    }\n}\n```\n\n## Параллельные тесты\n\n- TestNG\n\nМожно задать в xml параметр parallel = \"methods|tests|classes|instances\" и thread-count=\"5\". \n\n- JUnit \n\nМожно воспользоваться опцией Gradle. Можно распараллелить тесты по агентам. ???\n\n## Soft Assertions\n\n- TestNG\n\n```java\nprivate SoftAssert softAssert = new SoftAssert();\n\n@Test\npublic void testForSoftAssertionsFailure(){\n    softAssert.assertTrue(false);\n    softAssert.assertEquals(1, 2);\n    softAssert.assertAll();\n}\n```\n\n- JUnit\n\nИспользуется метод assertAll;\n\n```java\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SoftAssertionsTest {\n    \n    @Test\n    void testWithSoftAssert(){\n        assertAll(\n                () -> assertTrue(false),\n                () -> assertEquals(1, 2)\n        );\n    }\n}\n```\n\n## Источник информации \n\n❗ [#6 Recheck, Karate, JetBrains Academy. Сравнение TestNG и JUnit 5](https://www.youtube.com/watch?v=_sN6JpVpQ-c)\n\n❗ [TestNG vs JUnit 5 battle (Sergey Pirogov, Ukraine)](https://www.youtube.com/watch?v=vRmVZV0fjK8)","description":"JUnit vs TestNG","image":"null","category":{"id":"automation","title":"automation","path":"/category/automation/"},"date":"18/06/2022","path":"/j-unit-vs-test-ng/","links":[{"title":"","items":[{"title":"Моя подготовка","link":"/moya-podgotovka/"},{"title":"Курс по автоматизации тестирования Java","link":"/kurs-po-avtomatizaczii-testirovaniya-java/"},{"title":"Профессионально работаем с IntelliJ IDEA","link":"/professionalno-rabotaem-s-intelli-j-idea/"},{"title":"Что такое Selenium?","link":"/chto-takoe-selenium/"},{"title":"Инфраструктура проекта автотестирования","link":"/infrastruktura-proekta-avtotestirovaniya/"},{"title":"Основы Java","link":"/osnovy-java/"},{"title":"Система сборки. Ant, Maven, Gradle","link":"/sistema-sborki-ant-maven-gradle/"},{"title":"JUnit 5","link":"/j-unit-5/"}]}],"headings":[{"value":"Добавление метаинформации","anchor":"#добавление-метаинформации"},{"value":"Параметризованные тесты","anchor":"#параметризованные-тесты"},{"value":"Параметризация через класс","anchor":"#параметризация-через-класс"},{"value":"Проверка exception","anchor":"#проверка-exception"},{"value":"Before/After методы","anchor":"#beforeafter-методы"},{"value":"Зависимые тесты и порядок запуска тестов","anchor":"#зависимые-тесты-и-порядок-запуска-тестов"},{"value":"Слушатели (Listeners)","anchor":"#слушатели-listeners"},{"value":"Параллельные тесты","anchor":"#параллельные-тесты"},{"value":"Soft Assertions","anchor":"#soft-assertions"},{"value":"Источник информации","anchor":"#источник-информации"}],"subtitles":[{"depth":2,"value":"Добавление метаинформации","anchor":"#добавление-метаинформации"},{"depth":3,"value":"Обозначение тестового метода","anchor":"#обозначение-тестового-метода"},{"depth":3,"value":"Добавление описания к тесту","anchor":"#добавление-описания-к-тесту"},{"depth":3,"value":"Способ игнорировать тесты","anchor":"#способ-игнорировать-тесты"},{"depth":3,"value":"Запуск тестов по группам","anchor":"#запуск-тестов-по-группам"},{"depth":3,"value":"Тест будет падать, если он идет дольше указанного времени","anchor":"#тест-будет-падать-если-он-идет-дольше-указанного-времени"},{"depth":3,"value":"Тест запускается несколько раз","anchor":"#тест-запускается-несколько-раз"},{"depth":3,"value":"Custom Annotations (JUnit)","anchor":"#custom-annotations-junit"},{"depth":2,"value":"Параметризованные тесты","anchor":"#параметризованные-тесты"},{"depth":2,"value":"Параметризация через класс","anchor":"#параметризация-через-класс"},{"depth":2,"value":"Проверка exception","anchor":"#проверка-exception"},{"depth":2,"value":"Before/After методы","anchor":"#beforeafter-методы"},{"depth":2,"value":"Зависимые тесты и порядок запуска тестов","anchor":"#зависимые-тесты-и-порядок-запуска-тестов"},{"depth":2,"value":"Слушатели (Listeners)","anchor":"#слушатели-listeners"},{"depth":2,"value":"Параллельные тесты","anchor":"#параллельные-тесты"},{"depth":2,"value":"Soft Assertions","anchor":"#soft-assertions"},{"depth":2,"value":"Источник информации","anchor":"#источник-информации"}],"tags":[{"id":"Автоматизация тестирования","title":"Автоматизация тестирования","path":"/tag/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}]},"comments":{"edges":[]}},"context":{}}