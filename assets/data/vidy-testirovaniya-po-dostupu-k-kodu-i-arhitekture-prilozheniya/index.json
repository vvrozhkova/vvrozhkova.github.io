{"hash":"7ef89d9cd3f6579eddc6e6b2d3ffbd18a73c2491","data":{"post":{"title":"Виды тестирования по доступу к коду и архитектуре приложения","content":"\n## Метод белого ящика (White box testing, open box testing, clear box testing, glass box testing)\n\nУ тестировщика есть доступ к внутренней структуре и коду приложения, а также есть достаточно знаний для понимания увиденного. \n\nВыделяют даже сопутствующую тестированию по методу белого ящика глобальную технику — тестирование на основе дизайна (design-based testing). Для более глубокого изучения сути метода белого ящика рекомендуется ознакомиться с техниками исследования потока управления или потока данных, использования диаграмм состояний. \n\nНекоторые авторы склонны жёстко связывать этот метод со статическим тестированием, но ничто не мешает тестировщику запустить код на выполнение и при этом периодически обращаться к самому коду (а модульное тестирование и вовсе предполагает запуск кода на исполнение и при этом работу именно с кодом, а не с «приложением целиком»).\n\n### Преимущества\n- Показывает скрытые проблемы и упрощает их диагностику.\n- Допускает достаточно простую автоматизацию тест-кейсов и их выполнение на самых ранних стадиях развития проекта.\n- Обладает развитой системой метрик, сбор и анализ которых легко автоматизируется.\n- Стимулирует разработчиков к написанию качественного кода.\n- Многие техники этого метода являются проверенными, хорошо себя зарекомендовавшими решениями, базирующимися на строгом техническом подходе.\n\n### Недостатки\n- Не может выполняться тестировщиками, не обладающими достаточными знаниями в области программирования.\n- Тестирование сфокусировано на реализованной функциональности, что повышает вероятность пропуска нереализованных требований.\n- Поведение приложения исследуется в отрыве от реальной среды выполнения и не учитывает её влияние.\n- Поведение приложения исследуется в отрыве от реальных пользовательских сценариев.\n\n## Метод чёрного ящика (black box testing, closed box testing, specification-based testing)\n\nУ тестировщика либо нет доступа к внутренней структуре и коду приложения, либо недостаточно знаний для их понимания, либо он сознательно не обращается к ним в процессе тестирования. При этом абсолютное большинство видов тестирования работают по методу чёрного ящика, идею которого в альтернативном определении можно сформулировать так: тестировщик оказывает на приложение воздействия (и проверяет реакцию) тем же способом, каким при реальной эксплуатации приложения на него воздействовали бы пользователи или другие приложения. \n\nВ рамках тестирования по методу чёрного ящика основной информацией для создания тест-кейсов выступает документация (особенно — требования (requirements-based testing)) и общий здравый смысл (для случаев, когда поведение приложения в некоторой ситуации не регламентировано явно; иногда это называют «тестированием на основе неявных требований», но канонического определения у этого подхода нет).\n\n### Преимущества\n- Тестировщик не обязан обладать (глубокими) знаниями в области программирования.\n- Поведение приложения исследуется в контексте реальной среды выполнения и учитывает её влияние.\n- Поведение приложения исследуется в контексте реальных пользовательских сценариев.\n- Тест-кейсы можно создавать уже на стадии появления стабильных требований.\n- Процесс создания тест-кейсов позволяет выявить дефекты в требованиях.\n- Допускает создание тест-кейсов, которые можно многократно использовать на разных проектах.\n\n### Недостатки\n- Возможно повторение части тест-кейсов, уже выполненных разработчиками.\n- Высока вероятность того,что часть возможных вариантов поведения приложения останется непротестированной.\n- Для разработки высокоэффективных тест-кейсов необходима качественная\nдокументация.\n- Диагностика обнаруженных дефектов более сложна в сравнении с техниками метода белого ящика.\n- В связи с широким выбором техник и подходов затрудняется планирование и оценка трудозатрат.\n- В случае автоматизации могут потребоваться сложные дорогостоящие инструментальные средства.\n\n## Метод серого ящика (gray box testing) \n\nКомбинация методов белого ящика и чёрного ящика, состоящая в том, что к части кода и архитектуры у тестировщика доступ есть, а к части — нет. Обычно говорят о методах белого или чёрного ящика в применении к тем или иным частям приложения, при этом понимая, что «приложение целиком» тестируется по методу серого ящика.\n\nНекоторые авторы определяют метод серого ящика как противопоставление методам белого и чёрного ящика, особо подчёркивая, что при работе по методу серого ящика внутренняя структура тестируемого объекта известна частично и выясняется по мере исследования. Этот подход, бесспорно, имеет право на существование, но в своём предельном случае он вырождается до состояния «часть системы мы знаем, часть — не знаем», т. е. до всё той же комбинации белого и чёрного ящиков.\n\nСочетает преимущества и недостатки методов белого и чёрного ящика.\n\n\n\n|Вид тестирования (русскоязычное название)| Вид тестирования (англоязычное название)|Белый ящик|Чёрный ящик|\n|---|---|---|---|   \n|Статическое тестирование|Static testing|Да|Нет|\n|Динамическое тестирование|Dynamic testing|Изредка|Да|\n|Ручное тестирование|Manual testing|Мало|Да|\n|Автоматизированное тестирование|Automated testing|Да|Да|\n|Модульное (компонентное) тестирование|Unit testing, Module testing, Component testing|Да|Нет|\n|Интеграционное тестирование|Integration testing|Да|Да|\n|Системное тестирование|System testing|Мало|Да|\n|Дымовое тестирование|Smoke test, Intake test, Build verification test|Мало|Да|\n|Тестирование критического пути|Critical path test|Мало|Да|\n|Расширенное тестирование|Extended test|Мало|Да|\n|Позитивное тестирование|Positive testing|Да|Да|\n|Негативное тестирование|Negative testing, Invalid testing|Да|Да|\n|Тестирование веб-приложений|Web-applications testing|Да|Да|\n|Тестирование мобильных приложений|Mobile applications testing|Да|Да|\n|Тестирование настольных приложений|Desktop applications testing|Да|Да|\n|Тестирование уровня представления|Presentation tier testing|Мало| Да|\n|Тестирование уровня бизнес-логики|Business logic tier testing|Да |Да|\n|Тестирование уровня данных|Data tier testing|Да |Мало|\n|Альфа-тестирование|Alpha testing|Мало |Да|\n|Бета-тестирование|Beta testing|Почти никогда |Да|\n|Гамма-тестирование|Gamma testing|Почти никогда |Да|\n|Тестирование на основе тест-кейсов|Scripted testing, Test case based testing|Да |Да|\n|Исследовательское тестирование|Exploratory testing|Нет |Да|\n|Свободное (интуитивное) тестирование|Ad hoc testing|Нет |Да|\n|Функциональное тестирование|Functional testing|Да |Да|\n|Нефункциональное тестирование|Non-functional testing|Да |Да|\n|Инсталляционное тестирование|Installation testing|Изредка |Да|\n|Регрессионное тестирование|Regression testing|Да| Да|\n|Повторное тестирование|Re-testing, Confirmation testing|Да |Да|\n|Приёмочное тестирование|Acceptance testing|Крайне редко |Да|\n|Операционное тестирование|Operational testing|Крайне редко |Да|\n|Тестирование удобства использования|Usability testing|Крайне редко|Да|\n|Тестирование доступности|Accessibility testing|Крайне редко |Да|\n|Тестирование интерфейса|Interface testing|Да| Да|\n|Тестирование безопасности|Security testing|Да |Да|\n|Тестирование интернационализации|Internationalization testing|Мало|Да|\n|Тестирование локализации|Localization testing|Мало| Да|\n|Тестирование совместимости|Compatibility testing|Мало |Да|\n|Конфигурационное тестирование|Configuration testing|Мало| Да|\n|Кросс-браузерное тестирование|Cross-browser testing|Мало |Да|\n|Тестирование данных и баз данных|Data quality testing and Database integrity testing|Да |Мало|\n|Тестирование использования ресурсов|Resource utilization testing|Крайне редко |Да|\n|Сравнительное тестирование|Comparison testing|Нет| Да|\n|Демонстрационное тестирование|Qualification testing|Нет| Да|\n|Избыточное тестирование|Exhaustive testing|Крайне редко| Нет|\n|Тестирование надёжности|Reliability testing|Крайне редко|Да|\n|Тестирование восстанавливаемости|Recoverability testing|Крайне редко|Да|\n|Тестирование отказоустойчивости|Failover testing|Крайне редко|Да|\n|Тестирование производительности|Performance testing|Крайне редко|Да|\n|Нагрузочное тестирование|Load testing, Capacity testing|Крайне редко|Да|\n|Тестирование масштабируемости|Scalability testing|Крайне редко|Да|\n|Объёмное тестирование|Volume testing|Крайне редко|Да|\n|Стрессовое тестирование|Stress testing|Крайне редко|Да|\n|Конкурентное тестирование|Concurrency testing|Крайне редко|Да|\n|Инвазивное тестирование|Intrusive testing|Да|Да|\n|Неинвазивное тестирование|Nonintrusive testing|Да|Да|\n|Тестирование под управлением данными|Data-driven testing|Да|Да|\n|Тестирование под управлением ключевыми словами|Keyword-driven testing|Да|Да|\n|Тестирование предугадыванием ошибок|Error guessing|Крайне редко|Да|\n|Эвристическая оценка|Heuristic evaluation|Нет|Да|\n|Мутационное тестирование|Mutation testing|Да|Да|\n|Тестирование добавлением ошибок|Error seeding|Да|Да|\n|Доменное тестирование|Domain testing, Domain analysis|Да|Да|\n|Попарное тестирование|Pairwise testing|Да|Да|\n|Тестирование в процессе разработки|Development testing|Да|Да|\n|Тестирование на основе классов эквивалентности|Equivalence partitioning|Да|Да|\n|Тестирование на основе граничных условий|Boundary value analysis|Да|Да|\n|Тестирование на основе ортогональных массивов|Orthogonal array testing|Да|Да|\n|Тестирование по потоку управления|Control flow testing|Да|Нет|\n|Тестирование по потоку данных|Data flow testing|Да|Нет|\n|Тестирование по диаграмме или таблице состояний|State transition testing|Да|Нет|\n|Инспекция (аудит) кода|Code review, code inspection|Да|Нет|\n|Тестирование на основе выражений|Statement testing|Да|Нет|\n|Тестирование на основе ветвей|Branch testing|Да|Нет|\n|Тестирование на основе условий|Condition testing|Да|Нет|\n|Тестирование на основе комбинаций условий|Multiple condition testing|Да|Нет|\n|Тестирование на основе отдельных условий, порождающих ветвление («решающих условий»)|Modified condition decision coverage testing|Да|Нет|\n|Тестирование на основе решений|Decision testing|Да|Нет|\n|Тестирование на основе путей|Path testing|Да|Нет|\n|Тестирование по таблице принятия решений|Decision table testing|Да|Да|\n|Тестирование по моделям поведения приложения|Model-based testing|Да|Да|\n|Тестирование на основе вариантов использования|Use case testing|Да|Да|\n|Параллельное тестирование|Parallel testing|Да|Да|\n|Тестирование на основе случайных данных|Random testing|Да|Да|\n|A/B-тестирование|A/B testing, Split testing|Нет|Да|\n|Восходящее тестирование|Bottom-up testing|Да|Да|\n|Нисходящее тестирование|Top-down testing|Да|Да|\n|Гибридное тестирование|Hybrid testing|Да|Да|\n|Тестирование на основе дерева классификаций|Classification tree method|Да|Да|\n|Тестирование на основе синтаксиса|Syntax testing|Да|Да|\n|Комбинаторные техники (комбинаторное тестирование)|Combinatorial testing|Да|Да|\n|Тестирование всех комбинаций|All combinations testing|Да|Нет|\n|Тестирование с выбором значений-представителей|Each choice testing|Да|Нет|\n|Тестирование с выбором базового набора значений|Base choice testing|Да|Нет|\n|Тестирование по графу причинно-следственных связей|Cause-effect graphing|Мало|Да|\n|Проверка использования всех объявлений|All-definitions testing|Да|Нет|\n|Проверка всех вычислений на основе всех объявлений|All-c-uses testing|Да|Нет|\n|Проверка всех ветвлений на основе всех объявлений|All-p-uses testing|Да|Нет|\n|Проверка всех вычислений и ветвлений на основе всех объявлений|All-uses testing|Да|Нет|\n|Проверка использования всех объявлений и всех путей без переобъявлений (без циклов или с однократными повторениями циклов)|All-du-paths testing|Да|Нет|","description":"Виды тестирования по доступу к коду и архитектуре приложения","image":"null","category":{"id":"manual","title":"manual","path":"/category/manual/"},"date":"16/05/2022","path":"/vidy-testirovaniya-po-dostupu-k-kodu-i-arhitekture-prilozheniya/","links":[{"title":"","items":[{"title":"10. Виды тестирования","link":"/vidy-testirovaniya/"},{"title":"Классификация по запуску кода на исполнение","link":"/vidy-testirovaniya-po-zapusku-koda-na-ispolnenie/"},{"title":"Классификация по доступу к коду и архитектуре приложения","link":"/vidy-testirovaniya-po-dostupu-k-kodu-i-arhitekture-prilozheniya/"},{"title":"Классификация по степени автоматизации","link":"/vidy-testirovaniya-po-stepeni-avtomatizaczii/"},{"title":"Классификация по уровню деталиции приложения (по уровню тестирования)","link":"//vidy-testirovaniya-po-urovnyu-detaliczii-prilozheniya-po-urovnyu-testirovaniya/"},{"title":"Классификация по (убыванию) степени важности тестируемых функций (по уровню функционального тестирования)","link":"/vidy-testirovaniya-po-ubyvaniyu-stepeni-vazhnosti-testiruemyh-funkczij-po-urovnyu-funkczionalnogo-testirovaniya/"},{"title":"Классификация по принципам работы с приложением","link":"/vidy-testirovaniya-po-princzipam-raboty-s-prilozheniem/)"},{"title":"Классифкация по природе приложения","link":"/vidy-testirovaniya-po-prirode-prilozheniya/"},{"title":"Классификация по фокусировке на уровне архитектуры приложения","link":"/vidy-testirovaniya-po-fokusirovke-na-urovne-arhitektury-prilozheniya/"},{"title":"Классификация по привлечению конечных пользователей","link":"/vidy-testirovaniya-po-privlecheniyu-konechnyh-polzovatelej/"},{"title":"Классификация по степени формализации","link":"/vidy-testirovaniya-po-stepeni-formalizaczii/"},{"title":"Классификация по целям и задачам","link":"/vidy-testirovaniya-po-czelyam-i-zadacham/"},{"title":"Классификация по техникам и подходам","link":"/vidy-testirovaniya-po-tehnikam-i-podhodam/"},{"title":"Классификация по моменту выполнения (хронологии)","link":"/vidy-testirovaniya-po-momentu-vypolneniya-hronologii/"},{"title":"Другие виды тестирования","link":"/drugie-vidy-testirovaniya/"}]}],"headings":[{"value":"Метод белого ящика (White box testing, open box testing, clear box testing, glass box testing)","anchor":"#метод-белого-ящика-white-box-testing-open-box-testing-clear-box-testing-glass-box-testing"},{"value":"Метод чёрного ящика (black box testing, closed box testing, specification-based testing)","anchor":"#метод-чёрного-ящика-black-box-testing-closed-box-testing-specification-based-testing"},{"value":"Метод серого ящика (gray box testing)","anchor":"#метод-серого-ящика-gray-box-testing"}],"subtitles":[{"depth":2,"value":"Метод белого ящика (White box testing, open box testing, clear box testing, glass box testing)","anchor":"#метод-белого-ящика-white-box-testing-open-box-testing-clear-box-testing-glass-box-testing"},{"depth":3,"value":"Преимущества","anchor":"#преимущества"},{"depth":3,"value":"Недостатки","anchor":"#недостатки"},{"depth":2,"value":"Метод чёрного ящика (black box testing, closed box testing, specification-based testing)","anchor":"#метод-чёрного-ящика-black-box-testing-closed-box-testing-specification-based-testing"},{"depth":3,"value":"Преимущества","anchor":"#преимущества-1"},{"depth":3,"value":"Недостатки","anchor":"#недостатки-1"},{"depth":2,"value":"Метод серого ящика (gray box testing)","anchor":"#метод-серого-ящика-gray-box-testing"}],"tags":[{"id":"Виды тестирования","title":"Виды тестирования","path":"/tag/%D0%92%D0%B8%D0%B4%D1%8B%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}]},"comments":{"edges":[]}},"context":{}}