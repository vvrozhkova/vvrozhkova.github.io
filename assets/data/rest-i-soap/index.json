{"hash":"02799b688b4cb7ace869e49ff69fbf95eb6f42e6","data":{"post":{"title":"REST и SOAP","content":"\n## API\nAPI - это контракт, который предоставляет программа: какие операции можно выполнять.\n\nAPI включает:\n- операции которые можно проводить\n- данные которые подаются на вход\n- данные которые предоставляются на выходе\n\nAPI - набор функций. \n\nAPI  входа, API отчетности, API платежек и тд\nили одно общее API.\n\nНа каждое API есть контракт который говорит какие функции можно выполнять.\n\nДля SOAP таким контрактом является wsdl, для REST - wadl.\n\nОписание функций которые мы можем использовать. Одни и теже функции можно использовать в разных API.\n\nВызвать API можно напрямую или косвенно.\n\nНапрямую:\n- система вызывает функции внутри себя;\n- одна система вызывает метод другой системы;\n- в автотестах;\n\nКосвенно:\n- пользователь работает с GUI;\n\nТестирование (через) API\n\nКогда одна система общается с другой по протоколу(HTTP, GMS) передачи данных - это называется remote API(общение по сети).\nЕсть еще shared memory API - это когда программа общается в одной виртуальной памяти\n\nSOAP\nПередает сообщение в xml формате. \nWSDL - это список всех методов которые нам доступны через SOAP.\n\n## REST и SOAP\n\nREST и SOAP на самом деле не сопоставимы. REST — это архитектурный стиль. SOAP — это формат обмена сообщениями. Давайте сравним популярные реализации стилей REST и SOAP.\n\nREST означает REpresentational State Transfer (Википедия: «передача состояния представления»). Это популярный архитектурный подход для создания API в современном мире.\n\nПример реализации RESTful: JSON через HTTP;  \nПример реализации SOAP: XML поверх SOAP через HTTP;\n\nНа верхнем уровне SOAP ограничивает структуры ваших сообщений, тогда как REST — это архитектурный подход, ориентированный на использование HTTP в качестве транспортного протокола.\n\nСпецифика SOAP — это формат обмена данными. С SOAP это всегда SOAP-XML, который представляет собой XML, включающий:\n- Envelope (конверт) – корневой элемент, который определяет сообщение и пространство имен, использованное в документе,\n- Header (заголовок) – содержит атрибуты сообщения, например: информация о безопасности или о сетевой маршрутизации,\n- Body (тело) – содержит сообщение, которым обмениваются приложения,\n- Fault – необязательный элемент, который предоставляет информацию об ошибках, которые произошли при обработке сообщений. И запрос, и ответ должны соответствовать структуре SOAP.\n\nСпецифика REST — использование HTTP в качестве транспортного протокола. Он подразумевает наилучшее использование функций, предоставляемых HTTP - методы запросов, заголовки запросов, ответы, заголовки ответов и т. д.\n\n### Формат обмена сообщениями\n\nВ SOAP вы используете формат SOAP XML для запросов и ответов.\nВ REST такого фиксированного формата нет. Вы можете обмениваться сообщениями на основе XML, JSON или любого другого удобного формата. JSON является самым популярным среди используемых форматов.\n\n### Определения услуг\n\nSOAP использует WSDL (Web Services Description Language) — язык описания веб-сервисов и доступа к ним, основанный на языке XML.\nREST не имеет стандартного языка определения сервиса. Несмотря на то, что WADL был одним из первых предложенных стандартов, он не очень популярен. Более популярно использование Swagger или Open API.\n\n### Транспорт\n\nSOAP не накладывает никаких ограничений на тип транспортного протокола. Вы можете использовать либо Web протокол HTTP, либо MQ.\n\nREST подразумевает наилучшее использование транспортного протокола HTTP\n\nПростота реализации\n\nRESTFful веб-сервисы, как правило, гораздо проще реализовать, чем веб-сервисы на основе SOAP.\n\nREST обычно использует JSON, который легче анализировать и обрабатывать. В дополнение к этому, REST не требует наличия определения службы для предоставления веб-службы.\nОднако в случае SOAP вам необходимо определить свой сервис с использованием WSDL, и при обработке и анализе сообщений SOAP-XML возникают большие накладные расходы.\n\n## Типы запросов\n\n### Метод GET\nМетод GET - используется для получения информации о ресурсе.\n\n### Метод POST\nМетод POST предназначен для создания новых ресурсов и передачи данных.\n\n### Метод PUT\nДля обновления информации уже существующего объекта часто используется метод PUT. Также этой цели может служить метод PATCH, но принципы их работы различаются.\n\nМетод PUT обновляет ресурс полностью, в то время как метод PATCH вносит частичные изменения в существующем ресурсе, затрагивая только указанные поля, переданные в теле запроса.\n\nМетод PUT является идемпотентным. Это означает, что если мы отправим один и тот же запрос PUT десять раз, результат будет одинаковым. При первом вызове PUT внесет изменение в базу данных, а последующие вызовы будут заменять тот же объект теми же данными.\n\n### Метод PATCH\nС другой стороны, метод PATCH может использоваться не только для обновления, но и для добавления данных. В случае многократного вызова одинакового запроса метод PATCH приведет к внесению соответствующего количества изменений в базу данных.\n\n\n### Метод DELETE\nЕсли нам необходимо удалить неправильно сформированный заказ в интернет-магазине, пользователя в социальной сети или фотографию в Instagram, мы используем метод DELETE. Метод DELETE может иметь тело запроса, но также может и не иметь, но как правило, тело запроса в методе DELETE не используется.\n\nПример DELETE запроса, на удаление пользователя с id=123:\n\nDELETE /users/123 HTTP/1.1\nHost: example.com\nПосле успешного выполнения метода DELETE мы можем получить различные статус-коды и тела ответа от сервера:\n\n- 200 OK указывает на успешное выполнение удаления, и ответ содержит тело.\n- 202 Accepted используется, если удаление будет успешным, но еще не завершено.\n- 204 No Content означает, что удаление было выполнено, но тело ответа отсутствует.\n- 401 Unauthorized возникает, если попытка удаления выполняется без авторизации.\n- 403 Forbidden указывает на отсутствие прав на выполнение данной операции.\n- 404 Not Found возникает, если попытка удаления направлена на несуществующий или ненайденный ресурс.\nКак и метод PUT, метод DELETE не поддерживает кэширование.\n\n### Метод HEAD\nДанный метод по своей сути похож на GET, но сервер отвечает на запрос одним лишь заголовком(без тела). (Отсюда и название метода.) Применяется, например, чтобы узнать, существует ли в сети тот или иной URL и не произошло ли каких-нибудь изменений.\n\n### Метод OPTIONS\nOPTIONS - служит для получения параметров для ресурса или для сервера в целом и при этом сам ресурс ни как не затрагивается (то есть это более дешевая операция по сравнению с HEAD)\nOPTIONS возвращает параметры в заголовке. Список параметров зависит о ресурса и/или сервера. Обычно это заголовок Allow, который описывает какие методы доступны для ресурса.\nЭтот метод позволяет клиенту определять опции и/или требования, связанные с ресурсом, или возможностями сервера, но не производя никаких действий над ресурсом и не инициируя его загрузку.\n\n### Идемпотентность\nИдемпотентные методы - это методы, которые либо не изменяют состояние в базе данных, либо изменяют состояние только при первом запросе. В случае повторной отправки идентичного запроса, состояние в базе данных не изменяется. Идемпотентными методами являются: GET, PUT, DELETE, HEAD и OPTIONS.","description":"REST и SOAP","image":"null","category":{"id":"api","title":"api","path":"/category/api/"},"date":"24/06/2022","path":"/rest-i-soap/","links":[{"title":"","items":[{"title":"Понимание клиент-серверной архитектуры","link":"/ponimanie-klient-servernoj-arhitektury/"},{"title":"Взаимодействие сервера, клиента и БД","link":"/vzaimodejstvie-servera-klienta-i-bd/"},{"title":"REST и SOAP","link":"/rest-i-soap/"}]}],"headings":[{"value":"API","anchor":"#api"},{"value":"REST и SOAP","anchor":"#rest-и-soap"},{"value":"Типы запросов","anchor":"#типы-запросов"}],"subtitles":[{"depth":2,"value":"API","anchor":"#api"},{"depth":2,"value":"REST и SOAP","anchor":"#rest-и-soap"},{"depth":3,"value":"Формат обмена сообщениями","anchor":"#формат-обмена-сообщениями"},{"depth":3,"value":"Определения услуг","anchor":"#определения-услуг"},{"depth":3,"value":"Транспорт","anchor":"#транспорт"},{"depth":2,"value":"Типы запросов","anchor":"#типы-запросов"},{"depth":3,"value":"Метод GET","anchor":"#метод-get"},{"depth":3,"value":"Метод POST","anchor":"#метод-post"},{"depth":3,"value":"Метод PUT","anchor":"#метод-put"},{"depth":3,"value":"Метод PATCH","anchor":"#метод-patch"},{"depth":3,"value":"Метод DELETE","anchor":"#метод-delete"},{"depth":3,"value":"Метод HEAD","anchor":"#метод-head"},{"depth":3,"value":"Метод OPTIONS","anchor":"#метод-options"},{"depth":3,"value":"Идемпотентность","anchor":"#идемпотентность"}],"tags":[{"id":"api","title":"api","path":"/tag/api/"}]},"comments":{"edges":[]}},"context":{}}