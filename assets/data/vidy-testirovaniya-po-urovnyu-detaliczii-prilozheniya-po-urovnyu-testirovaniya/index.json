{"hash":"aa5a7ff62b399012289acf12f7cc1503ba4e22e5","data":{"post":{"title":"Виды тестирования по уровню деталиции приложения (по уровню тестирования)","content":"\n## Модульное (компонентное) тестирование (Unit testing, Module testing, Component testing)\nНаправлено на проверку отдельных небольших частей приложения, которые (как правило) можно исследовать изолированно от других подобных частей. \n\nПри выполнении данного тестирования могут проверяться отдельные функции или методы классов, сами классы, взаимодействие классов, небольшие библиотеки, отдельные части приложения. Часто данный вид тестирования реализуется с использованием специальных технологий и инструментальных средств автоматизации тестирования, значительно упрощающих и ускоряющих разработку соответствующих тест-кейсов.\n\n«Юнит-тестирование», как правило, направлено на тестирование атомарных участков кода, «Модульное» — на тестирование классов и небольших библиотек, «Компонентное» — на тестирование библиотек и структурных частей приложения. Но эта классификация не стандартизирована, и у различных авторов можно встретить совершенно разные взаимоисключающие трактовки.\n\n## Интеграционное тестирование (Integration testing, Component integration testing, Pairwise integration testing, System integration testing, Incremental testing, Interface testing, Thread testing) \nНаправлено на проверку взаимодействия между несколькими частями приложения (каждая из которых, в свою очередь, проверена отдельно на стадии модульного тестирования). К сожалению, даже если мы работаем с очень качественными отдельными компонентами, «на стыке» их взаимодействия часто возникают проблемы. Именно эти проблемы и выявляет интеграционное тестирование. (См. также техники вос- ходящего, нисходящего и гибридного тестирования в хронологической классификации по иерархии компонентов.)\n\nПодходы к интеграционному тестированию:\n\n- Снизу вверх (Bottom Up Integration)\n\nВсе низкоуровневые модули, процедуры или функции собираются воедино и затем тестируются. После чего собирается следующий уровень модулей для проведения интеграционного тестирования. Данный подход считается полезным, если все или практически все модули, разрабатываемого уровня, готовы. Также данный подход помогает определить по результатам тестирования уровень готовности приложения.\n\n- Сверху вниз (Top Down Integration)\n\nВначале тестируются все высокоуровневые модули, и постепенно один за другим добавляются низкоуровневые. Все модули более низкого уровня симулируются заглушками с аналогичной функциональностью, затем по мере готовности они заменяются реальными активными компонентами. Таким образом мы проводим тестирование сверху вниз.\n\n- Большой взрыв («Big Bang» Integration)\n\nВсе или практически все разработанные модули собираются вместе в виде законченной системы или ее основной части, и затем проводится интеграционное тестирование. Такой подход очень хорош для сохранения времени. Однако если тест кейсы и их результаты записаны не верно, то сам процесс интеграции сильно осложнится, что станет преградой для команды тестирования при достижении основной цели интеграционного тестирования.\n\n## Системное тестирование (System testing) \nНаправлено на проверку всего приложения как единого целого, собранного из частей, проверенных на двух предыдущих стадиях. Здесь не только выявляются дефекты «на стыках» компонентов, но и появляется возможность полноценно взаимодействовать с приложением с точки зрения конечного пользователя, применяя множество других видов тестирования, перечисленных в данной главе.\n\n---\n\nС классификацией по уровню детализации приложения связан интересный печальный факт: если предыдущая стадия обнаружила проблемы, то на следующей стадии эти проблемы точно нанесут удар по качеству; если же предыдущая стадия не обнаружила проблем, это ещё никоим образом не защищает нас от проблем на следующей стадии.\n\nЕсли обратиться к словарю ISTQB и прочитать определение уровня тестирования (test level), то можно увидеть, что аналогичное разбиение на модульное, интеграционное и системное тестирование, к которым добавлено ещё и приёмочное тестирование, используется в контексте разделения областей ответственности на проекте. Но такая классификация больше относится к вопросам управления проектом, чем к тестированию в чистом виде, а потому выходит за рамки рассматриваемых нами вопросов.\n\n- Приемочное\n","description":"Виды тестирования по уровню деталиции приложения (по уровню тестирования)","image":"null","category":{"id":"manual","title":"manual","path":"/category/manual/"},"date":"16/05/2022","path":"/vidy-testirovaniya-po-urovnyu-detaliczii-prilozheniya-po-urovnyu-testirovaniya/","links":[{"title":"","items":[{"title":"10. Виды тестирования","link":"/vidy-testirovaniya/"},{"title":"Классификация по запуску кода на исполнение","link":"/vidy-testirovaniya-po-zapusku-koda-na-ispolnenie/"},{"title":"Классификация по доступу к коду и архитектуре приложения","link":"/vidy-testirovaniya-po-dostupu-k-kodu-i-arhitekture-prilozheniya/"},{"title":"Классификация по степени автоматизации","link":"/vidy-testirovaniya-po-stepeni-avtomatizaczii/"},{"title":"Классификация по уровню деталиции приложения (по уровню тестирования)","link":"//vidy-testirovaniya-po-urovnyu-detaliczii-prilozheniya-po-urovnyu-testirovaniya/"},{"title":"Классификация по (убыванию) степени важности тестируемых функций (по уровню функционального тестирования)","link":"/vidy-testirovaniya-po-ubyvaniyu-stepeni-vazhnosti-testiruemyh-funkczij-po-urovnyu-funkczionalnogo-testirovaniya/"},{"title":"Классификация по принципам работы с приложением","link":"/vidy-testirovaniya-po-princzipam-raboty-s-prilozheniem/)"},{"title":"Классифкация по природе приложения","link":"/vidy-testirovaniya-po-prirode-prilozheniya/"},{"title":"Классификация по фокусировке на уровне архитектуры приложения","link":"/vidy-testirovaniya-po-fokusirovke-na-urovne-arhitektury-prilozheniya/"},{"title":"Классификация по привлечению конечных пользователей","link":"/vidy-testirovaniya-po-privlecheniyu-konechnyh-polzovatelej/"},{"title":"Классификация по степени формализации","link":"/vidy-testirovaniya-po-stepeni-formalizaczii/"},{"title":"Классификация по целям и задачам","link":"/vidy-testirovaniya-po-czelyam-i-zadacham/"},{"title":"Классификация по техникам и подходам","link":"/vidy-testirovaniya-po-tehnikam-i-podhodam/"},{"title":"Классификация по моменту выполнения (хронологии)","link":"/vidy-testirovaniya-po-momentu-vypolneniya-hronologii/"},{"title":"Другие виды тестирования","link":"/drugie-vidy-testirovaniya/"}]}],"headings":[{"value":"Модульное (компонентное) тестирование (Unit testing, Module testing, Component testing)","anchor":"#модульное-компонентное-тестирование-unit-testing-module-testing-component-testing"},{"value":"Интеграционное тестирование (Integration testing, Component integration testing, Pairwise integration testing, System integration testing, Incremental testing, Interface testing, Thread testing)","anchor":"#интеграционное-тестирование-integration-testing-component-integration-testing-pairwise-integration-testing-system-integration-testing-incremental-testing-interface-testing-thread-testing"},{"value":"Системное тестирование (System testing)","anchor":"#системное-тестирование-system-testing"}],"subtitles":[{"depth":2,"value":"Модульное (компонентное) тестирование (Unit testing, Module testing, Component testing)","anchor":"#модульное-компонентное-тестирование-unit-testing-module-testing-component-testing"},{"depth":2,"value":"Интеграционное тестирование (Integration testing, Component integration testing, Pairwise integration testing, System integration testing, Incremental testing, Interface testing, Thread testing)","anchor":"#интеграционное-тестирование-integration-testing-component-integration-testing-pairwise-integration-testing-system-integration-testing-incremental-testing-interface-testing-thread-testing"},{"depth":2,"value":"Системное тестирование (System testing)","anchor":"#системное-тестирование-system-testing"}],"tags":[{"id":"Виды тестирования","title":"Виды тестирования","path":"/tag/%D0%92%D0%B8%D0%B4%D1%8B%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}]},"comments":{"edges":[]}},"context":{}}