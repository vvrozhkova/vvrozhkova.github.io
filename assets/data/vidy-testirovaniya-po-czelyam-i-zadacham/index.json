{"hash":"7ce6058f470c3851afaa44882541a7f3d1089ffc","data":{"post":{"title":"Виды тестирования по целям и задачам","content":"\n## Классификация\n\n- Функциональное(«Что?» - проверяет весь функционал продукта)\n  - Тестирование данных\n  - Приемочное тестирование\n  - Операционное тестирование\n  - Тестирование пользовательского интерфейса (GUI Testing)\n\n- Нефункциональное(«Как?»)\n  - Тестирование производительности\n  - Нагрузочное тестирование\n  - Стрессовое тестирование\n  - Тестирование масштабируемости\n  - Объемное тестирование\n  - Тестирование надежности\n  - Тестирование восстанавливаемости\n  - Тестирование отказоустойчивости\n  - Тестирование безопасности\n  - Тестирование удобства использования\n  - Тестирование доступности -\n  - Тестирование совместимости\n  - Тестирование интернационализации\n  - Тестирование локализации\n  - Инсталяционное (тестирование установки)\n  - Конфигурационное тестирование -\n  - Конкурентное тестирование - \n  - Тестирование использоваиня ресурсов - \n  - Сравнительное тестирование - \n\n- Связанные с изменениями \n  - Дымовое\n  - Регрессионное\n  - Тестирвание сборки\n  - Санитарное тестирование\n  - Повторное тестирование\n\n## Функциональное тестирование (Functional/Behavioral testing)\nВид тестирования, направленный на проверку корректности работы функциональности приложения (корректность реализации функциональных требований). \n\nЧасто функциональное тестирование ассоциируют с тестированием по методу чёрного ящика, однако и по методу белого ящика вполне можно проверять корректность реализации функциональности.\n\nЧасто возникает вопрос, в чём разница между функциональным тестированием (functional testing) и тестированием функциональности (functionality testing).\n\nЕсли вкратце, то:\n- **_функциональное тестирование_** (как антоним нефункционального) направлено на проверку того, какие функции приложения реализованы, и что они работают верным образом;\n- **_тестирование функциональности_** направлено на те же задачи, но акцент смещён в сторону исследования приложения в реальной рабочей среде, после локализации и в тому подобных ситуациях.\n\n**Для функционального тестирования принято использовать две техники**:\n\n* Тестирование на основе требований: содержит все функциональные спецификации, которые составляют основу для всех тестов, которые будут проводиться;\n* Тестирование на основе бизнес-сценариев: содержит информацию о том, как система будет восприниматься с точки зрения бизнес-процесса;\n\n**Основные виды функционального тестирования**:\n\n- Юнит тестирование (Unit Testing)\n- Дымовое тестирование (Smoke Testing)\n- Санитарное тестирование (Sanity Testing)\n- Интеграционное тестирование (Integration Tests),\n- Бета тестирование (Beta Testing)\n- Системное тестирование (System testing)\n- End to end testing\n- Тестирование пользовательского интерфейса (GUI Testing)\n\n### Регрессионное тестирование (Regression testing)\nТестирование, направленное на проверку того факта, что в ранее работоспособной функциональности не появились ошибки, вызванные изменениями в приложении или среде его функционирования. \n\nФредерик Брукс в своей книге «Мифический человеко-месяц» писал: «Фундаментальная проблема при сопровождении программ состоит в том, что исправление одной ошибки с большой вероятностью (20–50 %) влечёт появление новой». Потому регрессионное тестирование является неотъемлемым инструментом обеспечения качества и активно используется практически в любом проекте.\n\n### Повторное тестирование (Re-testing, confirmation testing)\nВыполнение тест-кейсов, которые ранее обнаружили дефекты, с целью подтверждения устранения дефектов. \n\nФактически этот вид тестирования сводится к действиям на финальной стадии жизненного цикла отчёта о дефекте, направленным на то, чтобы перевести дефект в состояние «проверен» и «закрыт».\n\n### Приёмочное тестирование (Acceptance testing)\nФормализованное тестирование, направленное на проверку приложения с точки зрения конечного пользователя/заказчика и вынесения решения о том, принимает ли заказчик работу у исполнителя (проектной команды).\n\nМожно выделить следующие подвиды приёмочного тестирования (хотя упоминают их крайне редко, ограничиваясь в основном общим термином «приёмочное тестирование»):\n\n- **_Производственное приёмочное тестирование (Factory acceptance testing)_**  \nВыполняемое проектной командой исследование полноты и качества реализации приложения с точки зрения его готовности к передаче заказчику. Этот вид тестирования часто рассматривается как синоним альфа-тестирования.\n\n- **_Операционное приёмочное тестирование (Operational acceptance testing, production acceptance testing)_** \nОперационное тестирование, выполняемое с точки зрения выполнения инсталляции, потребления приложением ресурсов, совместимости с про- граммной и аппаратной платформой и т. д.\n\n- **_Итоговое приёмочное тестирование (Site acceptance testing)_**  \nТестирование конечными пользователями (представителями заказчика) приложения в реальных условиях эксплуатации с целью вынесения решения о том, требует ли приложение доработок или может быть принято в эксплуатацию в текущем виде.\n\n### Операционное тестирование (Operational testing)\nТестирование, проводимое в реальной или приближенной к реальной операционной среде (operational environment), включающей операционную систему, системы управления базами данных, серверы приложений, веб-серверы, аппаратное обеспечение и т. д.\n\n### Тестирование интерфейса (Interface testing)\nТестирование, направленное на проверку интерфейсов приложения или его компонентов. \n\nПо определению ISTQB-глоссария этот вид тестирования относится к интеграционному тестированию, и это вполне справедливо для таких его вариаций как тестирование интерфейса прикладного программирования (API testing182) и интерфейса командной строки (CLI testing), хотя последнее может выступать и как разновидность тестирования пользовательского интерфейса, если через командную строку с приложением взаимодействует пользователь, а не другое приложение. Однако многие источники предлагают включить в состав тестирования интерфейса и тестирование непосредственно интерфейса пользователя (GUI testing).\n\n## Нефункциональное тестирование (Non-Functional testing)\n\nВид тестирования, направленный на проверку нефункциональных особенностей приложения (корректность реализации нефункциональных требований), таких как удобство использования, совместимость, производительность, безопасность и т.д.\n\nВ большинстве случаев это выполняется методом black box testing. Оно проверяет, соответствует ли поведение системы требованиям по всем аспектам, не охваченные функциональным тестированием. \n\nВ нашем повседневном тестировании много внимания уделяется функциональному тестированию и функциональным требованиям и клиенты также заинтересованы в выполнении функциональных требований, которые напрямую связаны с функциональностью приложения, но когда ПО выходит на рынок и используется реальными конечными пользователями, у них есть шансы столкнуться с проблемами. Эти проблемы не связаны с функциональностью системы, но могут негативно повлиять на пользовательский опыт.\n\n**Нефункциональные требования могут быть отражены как**:\n\n* Пользовательские / Технические истории (User /Technical Stories): запись нефункциональных требований в виде пользовательской истории такая же, как и запись любых других требований. Единственная разница между пользователем и технической историей заключается в том, что пользовательская история требует обсуждения и имеет видимость (? visibility);\n* В критериях приемки (Acceptance criteria): это точка, которая определяется для принятия продукта заказчиком. Нефункциональное требование должно быть включено в критерии приемки, но иногда невозможно проверить нефункциональные требования с каждой историей, то есть с каждой итерацией. Следовательно, требования следует добавлять или тестировать только с соответствующей итерацией;\n* В артефактах (Artifact): для нефункциональных требований следует подготовить отдельный артефакт, это, в свою очередь, поможет лучше понять, что нужно тестировать и как это можно делать в итерациях;\n\n### Инсталляционное тестирование (Installation testing, Installability testing)\nТестирование, направленное на выявление дефектов, влияющих на протекание стадии инсталляции (установки) приложения. \n\nВ общем случае такое тестирование проверяет множество сценариев и аспектов работы инсталлятора в таких ситуациях, как:\n- новая среда исполнения, в которой приложение ранее не было инсталлировано;\n- обновление существующей версии(«апгрейд»);\n- изменение текущей версии на более старую(«даунгрейд»);\n- повторная установка приложения с целью устранения возникших проблем («переинсталляция»);\n- повторный запуск инсталляции после ошибки, приведшей к невозможности продолжения инсталляции;\n- удаление приложения;\n- установка нового приложения из семейства приложений;\n- автоматическая инсталляция без участия пользователя.\n\n### Тестирование удобства использования (Usability testing)\nТестирование, направленное на исследование того, насколько конечному пользователю понятно, как работать с продуктом (understandability, learnability, operability), а также на то, насколько ему нравится использовать продукт (attractiveness). И это не оговорка — очень часто успех продукта зависит именно от эмоций, которые он вызывает у пользователей. \n\nДля эффективного проведения этого вида тестирования требуется реализовать достаточно серьёзные исследования с привлечением конечных пользователей, проведением маркетинговых исследований и т. д.\n\nТестирование удобства использования (usability testing) и тестирование интерфейса пользователя (GUI testing) — не одно и то же! \nНапример, корректно работающий интерфейс может быть неудобным, а удобный может работать некорректно.\n\n### Тестирование доступности (Accessibility testing)\nТестирование, направленное на исследование пригодности продукта к использованию людьми с ограниченными возможностями (слабым зрением и т.д.)\n\n### Тестирование безопасности (Security testing)\nТестирование, направленное на проверку способности приложения противостоять злонамеренным попыткам получения доступа к данным или функциям, права на доступ к которым у злоумышленника нет.\n\nПроверяется:\n\n* Аутентификация (Authentication): только достоверный пользователь может войти в систему;\n* Авторизация (Authorized): пользователь должен иметь возможность входить в те модули, для которых он авторизован или к которым пользователю был предоставлен доступ;\n* Пароль: Требование пароля должно быть подтверждено, т.е. пароль должен соответствовать тому, как это требование определяется, то есть длине, специальным символам, числам и т. д.;\n* Тайм-аут: если приложение неактивно, оно должно истечь по таймауту в указанное время;\n* Резервное копирование данных: резервное копирование данных должно быть выполнено в указанное время и данные должны быть скопированы в безопасное место;\n* Внутренние ссылки на веб-приложение не должны быть доступны, если размещены непосредственно в браузере;\n* Вся коммуникация должна быть зашифрована;\n\n### Тестирование интернационализации (Internationalization testing, I18n testing, Globalization testing, Localizability testing)\nТестирование, направленное на проверку готовности продукта к работе с использованием различных языков и с учётом различных национальных и культурных особенностей. \n\nЭтот вид тестирования не подразумевает проверки качества соответствующей адаптации (этим занимается тестирование локализации, см. следующий пункт), оно сфокусировано именно на проверке возможности такой адаптации (например: что будет, если открыть файл с иероглифом в имени; как будет работать интерфейс, если всё перевести на японский; может ли приложение искать данные в тексте на корейском и т. д.).\n\n### Тестирование локализации (Localization testing, L10n)\nТестирование, направленное на проверку корректности и качества адаптации продукта к использованию на том или ином языке с учётом национальных и культурных особенностей. \n\nЭто тестирование следует за тестированием интернационализации (см. предыдущий пункт) и проверяет корректность перевода и адаптации продукта, а не готовность продукта к таким действиям.\n\n### Тестирование совместимости (Compatibility testing, Interoperability testing)\nТестирование, направленное на проверку способности приложения работать в указанном окружении. \n\nЗдесь, например, может проверяться:\n- Совместимость с аппаратной платформой, операционной системой и сетевой инфраструктурой (конфигурационное тестирование, configuration testing).\n- Совместимость с браузерами и их версиями (кросс-браузерное тестирование, cross-browser testing).\n- Совместимость с мобильными устройствами (mobile testing).\n- И так далее.\n\nВ некоторых источниках к тестированию совместимости добавляют (хоть и подчёркивая, что это — не его часть) т.н. тестирование соответствия (compliance testing, conformance testing, regulation testing).\n\n### Тестирование данных (Data quality testing) и баз данных (Database integrity testing)\nДва близких по смыслу вида тестирования, направленных на исследование таких характеристик данных, как полнота, непротиворечивость, целостность, структурированность и т. д. \n\nВ контексте баз данных исследованию может подвергаться адекватность модели предметной области, способность модели обеспечивать целостность и консистентность данных, корректность работы триггеров, хранимых процедур и т.д.\n\n### Тестирование использования ресурсов (Resource utilization testing, Efficiency testing, Storage testing)\nСовокупность видов тестирования, проверяющих эффективность использования приложением доступных ему ресурсов и зависимость результатов работы приложения от количества доступных ему ресурсов. Часто эти виды тестирования прямо или косвенно примыкают к техникам тестирования производительности.\n\n### Сравнительное тестирование (Comparison testing)\nТестирование, направленное на сравнительный анализ преимуществ и недостатков разрабатываемого продукта по отношению к его основным конкурентам.\n\n### Демонстрационное тестирование (Qualification testing)\nФормальный процесс демонстрации заказчику продукта с целью подтверждения, что продукт соответствует всем заявленным требованиям. В отличие от приёмочного тестирования этот процесс более строгий и всеобъемлющий, но может проводиться и на промежуточных стадиях разработки продукта.\n\n### Избыточное тестирование (Exhaustive testing)\nТестирование приложения со всеми возможными комбинациями всех возможных входных данных во всех возможных условиях выполнения. Для сколь бы то ни было сложной системы нереализуемо, но может применяться для проверки отдельных крайне простых компонентов.\n\n### Тестирование надёжности (Reliability testing)\nТестирование способности приложения выполнять свои функции в заданных условиях на протяжении заданного времени или заданного количества операций.\n\n### Тестирование восстанавливаемости (Recoverability testing)\nТестирование способности приложения восстанавливать свои функции и заданный уровень производительности, а также восстанавливать данные в случае возникновения критической ситуации, приводящей к временной (частичной) утрате работоспособности приложения.\n\n### Тестирование отказоустойчивости (Failover testing)\nТестирование, заключающееся в эмуляции или реальном создании критических ситуаций с целью проверки способности приложения задействовать соответствующие механизмы, предотвращающие нарушение работоспособности, производительности и повреждения данных.\n\n### Тестирование производительности (Performance testing)\nИсследование показателей скорости реакции приложения на внешние воздействия при различной по характеру и интенсивности нагрузке. \n\nПроверяется:\n* Время отклика (The response time) приложения, то есть сколько времени требуется для загрузки приложения, за какое время любой ввод, предоставленный приложению, обеспечивает вывод, время обновления браузера и т. д.;\n* Пропускную способность (Throughput) следует проверять по количеству транзакций, завершенных во время нагрузочного теста;\n* Настройка среды (Environment) должна быть такой же, как и в реальной среде, иначе результаты не будут такими же;\n* Время процесса (Process time) - такие действия, как импорт и экспорт Excel, любые вычисления в приложении должны быть протестированы;\n* Совместимость (Interoperability) должна быть проверена, т.е. программное обеспечение должно иметь возможность взаимодействовать с другим программным обеспечением или системами;\n* Необходимо проверить время ETL, то есть время, затраченное на извлечение, преобразование и загрузку данных из одной базы данных в другую;\n* Необходимо проверить возрастающую нагрузку (Load) на приложение;\n\nВ рамках тестирования производительности выделяют следующие подвиды:\n\n- **_Нагрузочное тестирование (Load testing, Capacity testing)_**\nИсследование способности приложения сохранять заданные показатели качества при нагрузке в допустимых пределах и некотором превышении этих пределов (определение «запаса прочности»).\n\n- **_Тестирование масштабируемости (Scalability testing)_**\nИсследование способности приложения увеличивать показатели производительности в соответствии с увеличением количества доступных приложению ресурсов.\n\n- **_Объёмное тестирование (Volume testing)_**\nИсследование производительности приложения при обработке различных (как правило, больших) объёмов данных.\n\n- **_Стрессовое тестирование (Stress testing)_**\nИсследование поведения приложения при нештатных изменениях нагрузки, значительно превышающих расчётный уровень, или в ситуациях недоступности значительной части необходимых приложению ресурсов. Стрессовое тестирование может выполняться и вне контекста нагрузочного тестирования: тогда оно, как правило, называется «тестированием на разрушение» (destructive testing) и представляет собой крайнюю форму негативного тестирования.\n\n- **_Конкурентное тестирование (Concurrency testing)_**\nИсследование поведения приложения в ситуации, когда ему приходится обрабатывать большое количество одновре- менно поступающих запросов, что вызывает конкуренцию между запросами за ресурсы (базу данных, память, канал передачи данных, дисковую подсистему и т. д.) \n\nИногда под конкурентным тестированием понимают также исследование работы многопоточных приложений и корректность синхронизации действий, производимых в разных потоках.\n\nВ качестве отдельных или вспомогательных техник в рамках тестирования производительности могут использоваться тестирование использования ресурсов, тестирование надёжности, тестирование восстанавливаемости, тестирование отказоустойчиво-сти и т. д.","description":"Виды тестирования по целям и задачам","image":"null","category":{"id":"manual","title":"manual","path":"/category/manual/"},"date":"16/05/2022","path":"/vidy-testirovaniya-po-czelyam-i-zadacham/","links":[{"title":"","items":[{"title":"10. Виды тестирования","link":"/vidy-testirovaniya/"},{"title":"Классификация по запуску кода на исполнение","link":"/vidy-testirovaniya-po-zapusku-koda-na-ispolnenie/"},{"title":"Классификация по доступу к коду и архитектуре приложения","link":"/vidy-testirovaniya-po-dostupu-k-kodu-i-arhitekture-prilozheniya/"},{"title":"Классификация по степени автоматизации","link":"/vidy-testirovaniya-po-stepeni-avtomatizaczii/"},{"title":"Классификация по уровню деталиции приложения (по уровню тестирования)","link":"//vidy-testirovaniya-po-urovnyu-detaliczii-prilozheniya-po-urovnyu-testirovaniya/"},{"title":"Классификация по (убыванию) степени важности тестируемых функций (по уровню функционального тестирования)","link":"/vidy-testirovaniya-po-ubyvaniyu-stepeni-vazhnosti-testiruemyh-funkczij-po-urovnyu-funkczionalnogo-testirovaniya/"},{"title":"Классификация по принципам работы с приложением","link":"/vidy-testirovaniya-po-princzipam-raboty-s-prilozheniem/)"},{"title":"Классифкация по природе приложения","link":"/vidy-testirovaniya-po-prirode-prilozheniya/"},{"title":"Классификация по фокусировке на уровне архитектуры приложения","link":"/vidy-testirovaniya-po-fokusirovke-na-urovne-arhitektury-prilozheniya/"},{"title":"Классификация по привлечению конечных пользователей","link":"/vidy-testirovaniya-po-privlecheniyu-konechnyh-polzovatelej/"},{"title":"Классификация по степени формализации","link":"/vidy-testirovaniya-po-stepeni-formalizaczii/"},{"title":"Классификация по целям и задачам","link":"/vidy-testirovaniya-po-czelyam-i-zadacham/"},{"title":"Классификация по техникам и подходам","link":"/vidy-testirovaniya-po-tehnikam-i-podhodam/"},{"title":"Классификация по моменту выполнения (хронологии)","link":"/vidy-testirovaniya-po-momentu-vypolneniya-hronologii/"},{"title":"Другие виды тестирования","link":"/drugie-vidy-testirovaniya/"}]}],"headings":[{"value":"Классификация","anchor":"#классификация"},{"value":"Функциональное тестирование (Functional/Behavioral testing)","anchor":"#функциональное-тестирование-functionalbehavioral-testing"},{"value":"Нефункциональное тестирование (Non-Functional testing)","anchor":"#нефункциональное-тестирование-non-functional-testing"}],"subtitles":[{"depth":2,"value":"Классификация","anchor":"#классификация"},{"depth":2,"value":"Функциональное тестирование (Functional/Behavioral testing)","anchor":"#функциональное-тестирование-functionalbehavioral-testing"},{"depth":3,"value":"Регрессионное тестирование (Regression testing)","anchor":"#регрессионное-тестирование-regression-testing"},{"depth":3,"value":"Повторное тестирование (Re-testing, confirmation testing)","anchor":"#повторное-тестирование-re-testing-confirmation-testing"},{"depth":3,"value":"Приёмочное тестирование (Acceptance testing)","anchor":"#приёмочное-тестирование-acceptance-testing"},{"depth":3,"value":"Операционное тестирование (Operational testing)","anchor":"#операционное-тестирование-operational-testing"},{"depth":3,"value":"Тестирование интерфейса (Interface testing)","anchor":"#тестирование-интерфейса-interface-testing"},{"depth":2,"value":"Нефункциональное тестирование (Non-Functional testing)","anchor":"#нефункциональное-тестирование-non-functional-testing"},{"depth":3,"value":"Инсталляционное тестирование (Installation testing, Installability testing)","anchor":"#инсталляционное-тестирование-installation-testing-installability-testing"},{"depth":3,"value":"Тестирование удобства использования (Usability testing)","anchor":"#тестирование-удобства-использования-usability-testing"},{"depth":3,"value":"Тестирование доступности (Accessibility testing)","anchor":"#тестирование-доступности-accessibility-testing"},{"depth":3,"value":"Тестирование безопасности (Security testing)","anchor":"#тестирование-безопасности-security-testing"},{"depth":3,"value":"Тестирование интернационализации (Internationalization testing, I18n testing, Globalization testing, Localizability testing)","anchor":"#тестирование-интернационализации-internationalization-testing-i18n-testing-globalization-testing-localizability-testing"},{"depth":3,"value":"Тестирование локализации (Localization testing, L10n)","anchor":"#тестирование-локализации-localization-testing-l10n"},{"depth":3,"value":"Тестирование совместимости (Compatibility testing, Interoperability testing)","anchor":"#тестирование-совместимости-compatibility-testing-interoperability-testing"},{"depth":3,"value":"Тестирование данных (Data quality testing) и баз данных (Database integrity testing)","anchor":"#тестирование-данных-data-quality-testing-и-баз-данных-database-integrity-testing"},{"depth":3,"value":"Тестирование использования ресурсов (Resource utilization testing, Efficiency testing, Storage testing)","anchor":"#тестирование-использования-ресурсов-resource-utilization-testing-efficiency-testing-storage-testing"},{"depth":3,"value":"Сравнительное тестирование (Comparison testing)","anchor":"#сравнительное-тестирование-comparison-testing"},{"depth":3,"value":"Демонстрационное тестирование (Qualification testing)","anchor":"#демонстрационное-тестирование-qualification-testing"},{"depth":3,"value":"Избыточное тестирование (Exhaustive testing)","anchor":"#избыточное-тестирование-exhaustive-testing"},{"depth":3,"value":"Тестирование надёжности (Reliability testing)","anchor":"#тестирование-надёжности-reliability-testing"},{"depth":3,"value":"Тестирование восстанавливаемости (Recoverability testing)","anchor":"#тестирование-восстанавливаемости-recoverability-testing"},{"depth":3,"value":"Тестирование отказоустойчивости (Failover testing)","anchor":"#тестирование-отказоустойчивости-failover-testing"},{"depth":3,"value":"Тестирование производительности (Performance testing)","anchor":"#тестирование-производительности-performance-testing"}],"tags":[{"id":"Виды тестирования","title":"Виды тестирования","path":"/tag/%D0%92%D0%B8%D0%B4%D1%8B%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}]},"comments":{"edges":[]}},"context":{}}