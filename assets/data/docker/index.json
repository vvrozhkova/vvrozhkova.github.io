{"hash":"74078440e78cf7eff9cd218b18924da13af0a419","data":{"post":{"title":"Docker","content":"\nDocker - это средство упаковки (в контейнеры), доставки и запуска (запуск осуществляется одним и тем же образом, единый интерфейс) приложения.\nДокер - это история про виртуализацию, но не ту какую вам предоставляют виртуальные машины, которые разворачивают полноценную ОС внутри вашей. Главная задача Докера запустить приложение. \n\n## Базовые понятия\n\nDocker image - это сборка, говтовое к запуску приложение, но еще не запущеное.\n\nDocker container -  работающее приложение, созданное на базе имеджа.\n\nНа основе одного образа можно создать много одинаковых контейнеров.\nНапример, нужно 10 реплик одного сервиса.\n\nДля контейнера образ является read only системой, он не может его изменить.\n\nImage - слоеный пирог, напрмиер image Ubuntu и возьмем его за базу и поставим туда Nginx и поставим туда mongo и поставим питон.\n\nРеестр имеджей - он находится локально там хранятся те images которые создали именно вы.  \nТакже есть docker hub - там реестр всех имеджей, которые поддерживаются создателями докера но так же и те которые создавали другие люди.\n\n## Посмотреть images\n\n```\ndocker images\n```\n\n## Посмотреть запущенные контейнеры\n\n```\ndocker ps\n```\n\n-a - посмотреть в том числ остановленные контейнеры\n-a -q - отобразить только id контейнера\n\n## Создаем свой докер образ\n\n```\ndocker build -t hello-world .\n```\n\ndocker build - команда для создания образа\n-t - тег, название образа\n. - путь к текущей директории (где находится приложение)\n\nТакже нужно указать как именно нужно упаковать приложение, для этого создается Dockerfile.\n\nВ Dockerfile нужно описать шаги для упаковки нашего приложения.\n\n```docker\nFROM python:3.6 \n\nRUN mkdir -p /usr/src/app/\nWORKDIR /usr/src/app/\n\nCOPY . /usr/src/app/\n\nCMD [\"python\", \"app.py\"]\n```\n\n- FROM - базовый образ, через :(двоеточие) указывается тег\n- RUN - указывает что нужно выполнить указанную команду\n- WORKDIR - начальный каталог в который нужно перейти\n- COPY - копирует содержимое из источника в целевую папкув контейнере\n- CMD - указывает какие команды нужно выполнить когда мы запустим контейнер, запускает команды через shell \n- ENTRYPOINT - аналог CMD, но команды выполняются без shell оболочки\n\n## Запуск контейнера\n\n- запуск контейнера  \ndocker run <имя образа>\n```\ndocker run hello-world\n```\n\nКонтейнер работает до тех пор пока работает приложение.\n\n- задаем имя контейнера при запуске  \ndocker run **--name** <имя контейнера> <имя образа>\n```\ndocker run --name hello hello-world\n```\n\n- запуск контейнера в фоне, чтобы можно было работать с консолью  \ndocker run --name <имя контейнера> **-d** <имя образа>\n```\ndocker run --name hello -d hello-world\n```\n\n- запуск контейнера с автоудалением после остановки  \ndocker run --name <имя контейнера> -d **--rm** <имя образа>\n```\ndocker run --name hello -d --rm hello-world\n```\n\n## Удалить контейнер\n\nНапример те которые уже отработали\n\n- удалить один контейнер\ndocker rm <id контейнера>\ndocker rm <имя контейнера>\n```\ndocker rm 1e0c7cd00041\n```\n\n- удалить все контейнеры\ndocker rm $(docker ps -qa) \n\n## Остановить контейнер\n\n- docker stop <id контейнера>\n- docker stop <имя контейнера>\n\n## Проброска портов\n\nКонтейнер собирается в полностью изолированном окружении и если явно не пробросить порты то приложение будет не видно.\n\nЧтобы пробросить порт нужно в Dockerfile указать EXPOSE 8080 тем самым мы указываем что мы можем этот порт пробросить.\n\nЧтобы выполнить проброску нужно при запуске контейнера указать флаг -p и через двоеточие 2 порта (1- порт нашей машины, 2 - порт в контейнере)\n\ndocker run --name <имя контейнера> --rm -p 8080:80880 <имя образа>\n```\ndocker run --name hello --rm -p 8080:80880 hello-world\n```\n\n## Переменные окружения\nМожно указать в Dockerfile\n\nENV <название переменной> <значение>\n\nно иногда переменные нужно менять поэтому можно указывать переменные при запуске контейнера\n\ndocker run --name <имя контейнера> --rm -p 8080:80880 -e <имя переменной>=<значение> <имя образа>\n```\ndocker run --name hello --rm -p 8080:80880 -e TZ=Europe/Moscow hello-world\n```\n\n## Работа с внешними данными\n\n1. монтируем папку\nделается это при запуске контейнера через параметр -v\n\ndocker run --name <имя контейнера> --rm -p 8080:80880 -v <папка на хостовой машине(абсолютный путь)>:<папка в контейнере(абсолютный путь)> <имя образа>\n```\ndocker run --name hello --rm -p 8080:80880 -v ...:... hello-world\n```\n\n2. docker volume\n\nпосмотреть какие volume доступны\n\n```\ndocker volume ls\n```\n\nчтобы создать volume\n\n```\ndocker volume create <имя>\n```\n\nтеперь при запуске можно указать \n\ndocker run --name <имя контейнера> --rm -v <имя volume>:<папка в контейнере(абсолютный путь)> <имя образа>\n```\ndocker run --name hello --rm -p 8080:80880 -v ...:... hello-world\n```\n\n## Удалить image\n\ndocker rmi <имя image>\n\n## Получить список images id \n\ndocker images -q\n\n## Удалить все images\n\ndocker rmi $(docker images -q)\n\n## Многосервисная архитектура \n\nДля каждого сервиса имеется свой Dockerfile. \nЕсли через docker run выполнять настройке переменных когда есть много сервисов это не совсем удобно.\n\nДля этого используется docker-compose - надстройка над докером.\n\nДля его использования нужно создать docker-compose.yaml\n\n\nуказываем версию, volumes и описываем настройки каждого сервиса\n\n**Настройки сервиса:**\n\nbuild: указываем откуда взять Dockerfile либо image: mongo:latest если нужно взять готовый образ\n\nvolumes: \n  - <имя volume>:<абсолютный путь к папке в контейнере>\n\nports: - проброска портов\n  - 8080:8080 \n\nrestart: always - если вдруг машина перезагрузится то докер сам перезапустит контейнеры\n\nenvironment: - перечисляем переменные окружения\n- TZ=Europe/Moscow\n\n## Создаем ssh ключ\n\nпереходим из домашнего каталога в .ssh и запускаем ssh-keygen, затем выводим на экран публичный ключ\n\n```\ncd .ssh\nssh-keygen -t rsa\n# задаем имя, например vscale\ncat vscale.pub | pbcopy\n```\n\nсоздаем в папке .ssh файл config\n```\nvim config\n```\n\nУказываем в config настройки\n\nhost <имя хоста пожеланию>\n  hostname <шз адрес сервера>\n  user root\n  IdentityFile ~/.ssh/vscale\n\nСозряняем и выполняем команду \nssh vs\n\n## Устанавливаем docker на сервере\n\n```\nsudo apt update\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\nsudo add-app-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\"\nsudo apt install docker-ce\n```\n\n## Устанавливаем docker-compose на сервере\n\n```\nsudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-`uname -s` -`uname -m` -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\ndocker-compose --version\n```\n\n## Запуск docker-compose\ndocker-compose up -d\n\n-d - чтобы контейнеры в фоне работали\n\n## Остановить docker-compose\ndocker-compose down -d\n\n## Работа с docker hub\n\nСоздать свой репозиторий можно с сайта hub.docker.com нажав Create Repository  \nлибо просто запушив свои первый image\n\nнужно в имя образа вставить идентификатор пользователя и через / имя репозитория\n\n```\ndocker build -t artemproject/statisticmanager .\ndocker login\ndocker push artemproject/statisticmanager\n```\n\n## Запуск postgres в docker\nЧтобы запустить postgres в docker нужно:\n\n1. Сделать pull image\n\n```docker\ndocker pull postgress\n```\n\n2. Запустить инстанс докера\n\n```docker\ndocker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -p 5432:5432 -d postgres\n```\n\n--name - имя контейнера на локальной машине\nPOSTGRES_PASSWORD= - здесь указывается пароль\n-d (detach) необходимо указывать для того чтобы терминал оставвался терминалом локального компьютера, а не терминалом БД\npostgres - название контейнера который мы будем запускать\n-p 5432:5432 - проброс портов, порт внутри контейнера будет соответсвовать порту нашего компьютера\n\n3. Проверяем запущенные контейнеры\n\n```docker\ndocker ps -a\n```\n\nДля работы с БД нужно подключить Postgress JDBC - `'org.postgresql:postgresql:42.3.6'`\nи часть фреймворка Spring для работы с БД - `'org.springframework:spring-jdbc:5.3.20'`\n\nсистема виртуализации для запуска приложения в ихолированной среде.\n\nSELECT departamens.name FROM departamens LEFT JOIN users ON users.departament_id = departamens.id WHERE users.departament_id IS NULL;\n\n\n\n\n","description":"Docker","image":"null","category":{"id":"testops","title":"testops","path":"/category/testops/"},"date":"28/07/2022","path":"/docker/","links":[{"title":"","items":[{"title":"Микросервисная архитектура","link":"//mikroservisnaya-arhitektura//"},{"title":"Docker","link":"/docker/"},{"title":"Kubernetes","link":"/kubernetes/"},{"title":"Linux","link":"/linux/"},{"title":"Общие вопросы TestOps","link":"/obshhie-voprosy-test-ops/"}]}],"headings":[{"value":"Базовые понятия","anchor":"#базовые-понятия"},{"value":"Посмотреть images","anchor":"#посмотреть-images"},{"value":"Посмотреть запущенные контейнеры","anchor":"#посмотреть-запущенные-контейнеры"},{"value":"Создаем свой докер образ","anchor":"#создаем-свой-докер-образ"},{"value":"Запуск контейнера","anchor":"#запуск-контейнера"},{"value":"Удалить контейнер","anchor":"#удалить-контейнер"},{"value":"Остановить контейнер","anchor":"#остановить-контейнер"},{"value":"Проброска портов","anchor":"#проброска-портов"},{"value":"Переменные окружения","anchor":"#переменные-окружения"},{"value":"Работа с внешними данными","anchor":"#работа-с-внешними-данными"},{"value":"Удалить image","anchor":"#удалить-image"},{"value":"Получить список images id","anchor":"#получить-список-images-id"},{"value":"Удалить все images","anchor":"#удалить-все-images"},{"value":"Многосервисная архитектура","anchor":"#многосервисная-архитектура"},{"value":"Создаем ssh ключ","anchor":"#создаем-ssh-ключ"},{"value":"Устанавливаем docker на сервере","anchor":"#устанавливаем-docker-на-сервере"},{"value":"Устанавливаем docker-compose на сервере","anchor":"#устанавливаем-docker-compose-на-сервере"},{"value":"Запуск docker-compose","anchor":"#запуск-docker-compose"},{"value":"Остановить docker-compose","anchor":"#остановить-docker-compose"},{"value":"Работа с docker hub","anchor":"#работа-с-docker-hub"},{"value":"Запуск postgres в docker","anchor":"#запуск-postgres-в-docker"}],"subtitles":[{"depth":2,"value":"Базовые понятия","anchor":"#базовые-понятия"},{"depth":2,"value":"Посмотреть images","anchor":"#посмотреть-images"},{"depth":2,"value":"Посмотреть запущенные контейнеры","anchor":"#посмотреть-запущенные-контейнеры"},{"depth":2,"value":"Создаем свой докер образ","anchor":"#создаем-свой-докер-образ"},{"depth":2,"value":"Запуск контейнера","anchor":"#запуск-контейнера"},{"depth":2,"value":"Удалить контейнер","anchor":"#удалить-контейнер"},{"depth":2,"value":"Остановить контейнер","anchor":"#остановить-контейнер"},{"depth":2,"value":"Проброска портов","anchor":"#проброска-портов"},{"depth":2,"value":"Переменные окружения","anchor":"#переменные-окружения"},{"depth":2,"value":"Работа с внешними данными","anchor":"#работа-с-внешними-данными"},{"depth":2,"value":"Удалить image","anchor":"#удалить-image"},{"depth":2,"value":"Получить список images id","anchor":"#получить-список-images-id"},{"depth":2,"value":"Удалить все images","anchor":"#удалить-все-images"},{"depth":2,"value":"Многосервисная архитектура","anchor":"#многосервисная-архитектура"},{"depth":2,"value":"Создаем ssh ключ","anchor":"#создаем-ssh-ключ"},{"depth":2,"value":"Устанавливаем docker на сервере","anchor":"#устанавливаем-docker-на-сервере"},{"depth":2,"value":"Устанавливаем docker-compose на сервере","anchor":"#устанавливаем-docker-compose-на-сервере"},{"depth":2,"value":"Запуск docker-compose","anchor":"#запуск-docker-compose"},{"depth":2,"value":"Остановить docker-compose","anchor":"#остановить-docker-compose"},{"depth":2,"value":"Работа с docker hub","anchor":"#работа-с-docker-hub"},{"depth":2,"value":"Запуск postgres в docker","anchor":"#запуск-postgres-в-docker"}],"tags":[{"id":"Автоматизация тестирования","title":"Автоматизация тестирования","path":"/tag/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}]},"comments":{"edges":[]}},"context":{}}