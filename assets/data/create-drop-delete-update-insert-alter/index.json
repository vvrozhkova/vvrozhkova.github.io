{"hash":"02799b688b4cb7ace869e49ff69fbf95eb6f42e6","data":{"post":{"title":"CREATE, DROP, DELETE, UPDATE, INSERT, ALTER","content":"\n## Состав таблицы\n\n1. Дать таблице имя, пусть она будет называться book, вот некоторые правила для выбора имен таблиц:\n- может включать английские буквы, цифры и знак подчеркивания, должно начинаться с буквы;\n- имя должно быть уникальным в пределах базы данных.\n\nТакже рекомендуется:\n- чтобы имя было существительным в единственном числе;\n- имя должно быть понятным и соответствовать тому объекту, который оно описывает;\n- имя должно быть как можно короче, максимум до 10 символов.\n\n2. Определить структуру таблицы, из каких атрибутов(столбцов, полей) она будет состоять.\n\nПравила по выбору имени поля информационного объекта:\n- может включать английские буквы, цифры и знак подчеркивания, должно начинаться с буквы;\n- имя поля должно быть уникальным в пределах таблицы.\n\nРекомендации по выбору имени поля информационного объекта:\n- имя должно быть понятным и соответствовать тем данным, которые хранятся в поле;\n- имя может состоять из нескольких слов, тогда слова разделяются подчеркиванием, после подчеркивания слово пишется с маленькой буквы.\n\n3. Включить ключевое поле id, которое является ОБЯЗАТЕЛЬНЫМ ЭЛЕМЕНТОМ каждой реляционной таблицы. Ключевое поле является уникальным для каждой записи, однозначно определяет запись и в дальнейшем будет использоваться для связей с другими таблицами.\n\nРекомендации по именованию  ключевых полей:\n- имя должно состоять  из двух частей: начинаться с названия таблицы, которой поле принадлежит, затем через подчеркивание необходимо указать id.\n\n## Основные типы данных SQL\n\n- INT, INTEGER  \n_Описание:_ Целое число, могут принимать значения от -2 147 483 648 до 2 147 483 647  \t\n_Пример:_ -567 1205\n\n- DECIMAL, NUMERIC  \n_Описание:_ Вещественное число, в скобках указывается максимальная длина числа (включает символы слева и справа от десятичной запятой) и количество знаков после запятой.\nМожно использовать оба этих типа, они эквивалентны, принимают значения в диапазоне -10^38+1 до 10^38-1.\nDECIMAL(4,1) NUMERIC(6,3)  \n_Пример:_ 34.6 -3.294\n\n- DATE  \n_Описание:_ Дата в формате ГГГГ-ММ-ДД \n26 июля 2020 года\n3 января 2021 года  \n_Пример:_ 2020-07-26 2021-01-03\n\n- VARCHAR  \n_Описание:_ Строка длиной не более 255 символов, в скобках указывается максимальная длина строки, которая может храниться в поле VARCHAR(10)(рассматриваются однобайтовые кодировки, для которых число в скобках соответствует максимальному количеству символов в строке)  \n_Пример:_ пример описание\n\nРекомендации по выбору типов данных для полей таблицы.\n- Выбирайте минимальный тип данных исходя из максимального значения поля. Например, если максимальный текст, который может быть записан в поле, имеет длину 25 символов, значит нужно использовать тип VARCHAR(25).\n- Для описания ключевого поля используйте описание INT PRIMARY KEY AUTO_INCREMENT. Это значит, что в поле будут заноситься различные целые числа, при этом они будут автоматически генерироваться (каждая следующая строка будет иметь значение ключа на 1 больше предыдущего).\n\n## Создание таблицы\n\nДля создания таблицы используется SQL-запрос. \n\n```sql\nCREATE TABLE genre(\n    genre_id INT PRIMARY KEY AUTO_INCREMENT, \n    name_genre VARCHAR(30)\n);\n```\n\nРекомендации по записи SQL запроса\n- Ключевые слова: SQL не является регистрозависимым языком (CREATE и create - одно и тоже ключевое слово). \n- Ключевые слова SQL и типы данных рекомендуется  записывать прописными (большими) буквами.\n- Имена таблиц и полей - строчными (маленькими) буквами.\nSQL-запрос можно писать на нескольких строках.\n- В конце SQL-запроса ставится точка с запятой (хотя если Вы пишете один запрос, это необязательно).\n\n## Вставка записи в таблицу\n\nВ таблицу, состоящую из двух столбцов добавим новую строку, при этом в поле1 заносится значение1,  в поле2 - значение2.\n\n```sql\nINSERT INTO таблица(поле1, поле2) \nVALUES (значение1, значение2);\n```\n\nПри составлении списка полей и списка значений необходимо учитывать следующее:\n- количество полей и количество значений в списках должны совпадать;\n- должно существовать прямое соответствие между позицией одного и того же элемента в обоих списках, поэтому первый элемент списка значений должен относиться к первому столбцу в списке столбцов, второй – ко второму столбцу и т.д.;\n- типы данных элементов в списке значений должны быть совместимы с типами данных соответствующих столбцов таблицы ( целое число можно занести в поле типа DECIMAL, обратная операция - недопустима);\n- новые значения нельзя добавлять в поля, описанные как PRIMARY KEY AUTO_INCREMENT;\n- рекомендуется заполнять все поля записи, если же поле пропущено, значение этого поля зависит от установленных по умолчанию значений, если значения не установлены - на данной платформе вставляется пустое значение (NULL).","description":"CREATE, DROP, DELETE, UPDATE, INSERT, ALTER","image":"null","category":{"id":"testops","title":"testops","path":"/category/testops/"},"date":"07/07/2022","path":"/create-drop-delete-update-insert-alter/","links":[{"title":"","items":[{"title":"CREATE, DROP, DELETE, UPDATE, INSERT, ALTER","link":"/create-drop-delete-update-insert-alter"}]}],"headings":[{"value":"Состав таблицы","anchor":"#состав-таблицы"},{"value":"Основные типы данных SQL","anchor":"#основные-типы-данных-sql"},{"value":"Создание таблицы","anchor":"#создание-таблицы"},{"value":"Вставка записи в таблицу","anchor":"#вставка-записи-в-таблицу"}],"subtitles":[{"depth":2,"value":"Состав таблицы","anchor":"#состав-таблицы"},{"depth":2,"value":"Основные типы данных SQL","anchor":"#основные-типы-данных-sql"},{"depth":2,"value":"Создание таблицы","anchor":"#создание-таблицы"},{"depth":2,"value":"Вставка записи в таблицу","anchor":"#вставка-записи-в-таблицу"}],"tags":[{"id":"qa","title":"qa","path":"/tag/qa/"}]},"comments":{"edges":[]}},"context":{}}