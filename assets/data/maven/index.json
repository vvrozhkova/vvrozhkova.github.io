{"hash":"aa5a7ff62b399012289acf12f7cc1503ba4e22e5","data":{"post":{"title":"Maven","content":"\nВсе pom.xml переопределяют super pom который идет в поставке maven\nЭто позвояет писать компактный xml.\nPom.xml содержит\n- описание проекта(название, версия, ссылки на исходные коды, CI, лицензия, разработчики и т.п.)\n- список зависимостей\n- список плагинов и их конфигурации описывает то что нужно сделать\n- профили - возможность выполнять некоторые действия при определенных обстоятельствах\n\n## Название проекта и параметры\n\n```xml\n<properties>\n    <jetty.port>9990</jetty.port>\n    <jetty.version>9.1.9.v20131115</jetty.version>\n\n    <compiler.version>1.7</compiler.version>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n</properties>\n\n<group.id>ru.yandex.qatools.allure</group.id>\n<artifactId>allure-core</artifactId>\n<version>1.4.4-SNAPSHOT</version>\n\n<packaging>pom</packaging>\n\n<name>Allure Core</name>\n```\n\n## Список модулей\n\n```xml\n<modules>\n    <module>allure-model</module>\n    <module>allure-commons</module>\n    <module>allure-java-annotations</module>\n</modules>\n```\n\n## Информация о проекте\n\n```xml\n<issueManagement>\n    <system>GitHub Issues</system>\n    <url>https://github.com/allure-framework/allure-core/issues</url>\n</issueManagement>\n<ciManagement>\n    <system>TeamCity</system>\n    <url>https://teamcity.qatools.ru</url>\n</ciManagement>\n<developers>\n    <developer>\n        <id>eroshenkoam</id>\n        <name>Artem Eroshenko</name>\n        <email>eroshenko@yandex-team.ru</email>\n        <organization>Yandex</organization>\n    </developer>\n</developers>\n```\n\n## Описание сборки проекта (плагины)\n\n```xml\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-compiler-plugin</artifactId>\n    <version>3.0</version>\n    <configuration>\n        <source>${compiler.version}</source>\n        <target>${compiler.version}</target>\n    </configuration>\n</plugin>\n```\n\n## Зависимости\n\n```xml\n<dependency>\n    <groupId>ru.yandex.qatools.allure</groupId>\n    <artifactId>allure-model</artifactId>\n    <version>${project.version}</version>\n</dependency>\n<dependency>\n    <groupId>ru.yandex.qatools.allure</groupId>\n    <artifactId>allure-commons</artifactId>\n    <version>${project.version}</version>\n</dependency>\n```\n\n## Именование директорий\n\nsrc/ - все исходные коды  \nsrc/main - всё, что касается продукта  \nsrc/test - всё, что касается тестов\n\nsrc/main/java - Java-код продукта  \nsrc/main/resources - ресурсы продукта  \nsrc/main/webapp - файлы веб-приложений продукта (стили, Javascript и т.п.)\n\nsrc/test/java - Java-код тестов  \nsrc/test/resources - ресурсы тестов  \nsrc/test/webapp - файлы веб-приложений тестов\n\n## Жизненные циклы\n\nClean - очищает проект перед сборкой  \nDefault - собирает проект  \nSite - создает сайт проекта со ссылками на зависимости, CI, тикетную систему и т.п.\n\n## Сборка проекта. Команда mvn.\n\n```\n$ mvn clean test\n```\n\nValidate - проверить правильность проекта  \nCompile - скомпилировать исходники  \nTest - скомпилировать и выполнить тесты  \nPackage - упаковать скомпилированный код и исходники в jar, war архив  \nVerify - проверить, что код правильно упакован  \nInstall - установить пакеты в локальный репозиторий  \nDeploy - выгрузить пакеты в удаленный репозиторий  \n\n### Управление зависимостями\n\nНужно добавить блок, описывающий зависимость, в секцию `<dependencies>` и `<dependencyManagement>`\n\nБлок зависимости включает: \n- groupId - идентификатор который описывает группу проектов одного разработчика\n- artifactId - уникальное название проекта\n- version - номер версии\n- scope - на какой стадии сборки используется данная зависисмость\n    Scope может быть: \n    - compile - зависимость нужна на этапе компиляции\n    - test - зависимость не нужна чтобы собрать продукт, но нужна чтобы выполнить тесты\n    - runtime - зависимость не нужна для сборки и тестирования продукта, но нужна при его запуске\n    - provided - зависимость нужна для запуска, но при этом она поставляется кем то еще\n    - system - тоже самое что provided, но с указанием пути; мы можем указать, где на файловой системе лежит данная библиотека\n\n```xml\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-log4j12</artifactId>\n    <version>1.7.7</version>\n    <scope>runtime</scope>\n</dependency>\n```\n\n## Версии пакетов. Релизы и снепшоты\n\nСнепшот - промежуточная версия пакета, используемая в разработке: 1.0-SNAPSHOT(снимок текущей версии), чтобы делиться с другими разработчиками. Может быть бесконечно много снепшотов с одной и той же версией\n\nРелиз - стабильная версия пакета, предназначенная для использования другими проектами: 1.0. Релиз всегда один.\n\nПорядок версий: 1.0-SNAPSHOT, 1.0, 1.1-SNAPSHOT, 1.1, 1.2-SNAPSHOT и т.д.\nСначала мы делаем снепшоты, потом делаем релиз и т.д.\n\n## Конфликт зависимостей. Дерево зависимостей\n\nБывает такая ситуация, когда в проекте используется зависимость, в которой есть зависимость, которая также есть в нашем проекте. И одна зависимость будет перекрывать другую.\n\n```\npom.xml\n├── Log4j-1.2.13\n├── commons-logging-1.1\n    ├── Log4j-1.2.12\n    ├── Servlet-2.3\n```\n\nДля разрешения конфликтов зависимостей нужно построить дерево зависимостей.\nДля построения дерева зависимостей используется команда:\n\n```\n$ mvn dependency:tree\n```\n\n## Исключение зависимостей\n\nДля решения конфликта зависимостей иногда нужно исключить какую то зависимость. Для этого используется exclusions:\n\n```xml\n<dependency>\n    <groupId>ru.yandex.qatools.allure</groupId>\n    <artifactId>allure-report-builder</artifactId>\n    <version>2.0</version>\n    <exclusions>\n        <exclusion>\n            <groupId>ru.yandex.qatools.allure</groupId>\n            <artifactId>allure-model</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n```\n\n### Необязательные зависимости\n\nТакая зависимость не будет скачиваться в проектах, зависящих от данного\nДля того, чтобы пометить необязательную зависимость используется секция optional:\n\n```xml\n<dependency>\n    <groupId>junit</groupId>\n    <artifactId>junit</artifactId>\n    <version>4.11</version>\n    <scope>test</scope>\n    <optional>true</optional>\n</dependency>\n```\n\n## Плагины. Настройка билда\n\nИзменение процесса билда - это изменение настроек отдельных плагинов в секции build/plugins.\n\n### Maven Compiler Plugin\n\nКомпилирует java код продукта и его тестов. \nОсновная настройка - версия компилятора.\n\n```xml\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-compiler-plugin</artifactId>\n    <configuration>\n        <source>${compiler.version}</source>\n        <target>${compiler.version}</target>\n    </configuration>\n</plugin>\n```\n\n### Maven Source Plugin\n\nУпаковывает исходные коды проекта чтобы поделиться с другими участниками разработки.\n\n```xml\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-source-plugin</artifactId>\n    <version>2.2.1</version>\n    <executions>\n        <execution>\n            <goals>\n                <goal>jar</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n\n### Maven Dependency Plugin\n\nРазрешение зависимостей, построение дерева зависимостей;\nКопирование, распаковка и другие операции с зависимостями;\n\n### Maven Jar Plugin \n\nУпаковывает файлы в jar-архив;\nМожно сделать испольняемый jar файл и указать класс, который будет запускаться при запуске jar файла.\n\n### Maven Assembly Plugin\n\nСборка дистрибутивов продукта (например, zip-архив c jar, bash скриптами и README)\nНапример, вы хотите собрать свой продукт, а потом взять еще какие то файлы и все это вместе упаковать в архив. \nИ этот плагин требует создание специального файла Assembly.xml в котором будет описываться что он собственно должен делать.\n\n### Maven Release Plugin\n\nАвтоматизирует вырсионирование, выкладку релизов.\n\nДобавляются цели release:prepare и release:perform. Они увеличивают номер версии в pom.xml и отправляет в систему контроля версий.\n\nНастройка:\n\n```xml\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-release-plugin</artifactId>\n    <configuration>\n        <autoVersionSubmodules>true</autoVersionSubmodules>\n    </configuration>\n</plugin>\n```\n\n### Maven Surefire Plugin \n\nВыполнение тестов Junit или TestNG\n\n### Maven Site Plugin\n\nПервоначальное назначение - сгенерировать сайт поекта\nОсновное применение - генерация отчетов\n\nНастройка:\n\n```xml\n<reporting>\n    <excludeDefaults>true</excludeDefaults>\n    <plugins>\n        <plugin>\n            <groupId>ru.yandex.qatools.allure</groupId>\n            <artifactId>allure-maven-plugin</artifactId>\n            <version>${allure.version}</version>\n        </plugin>\n    </plugins>\n</reporting>\n```\n\n## Служебные файлы и каталоги\n\nПапка ~/.m2 - локальный репозиторий артефактов.  \nФайлы ~/.m2/settings.xml и /etc/maven/settings/xml, ~/.mavemrc и /etc/mavenrc - конфигурация Maven, можно менять поведение Maven по умолчанию\n\n## Профили. Settings.xml\n\nПрофиль - способ изменить настройки билда, не изменяя pom.xml. Мы можем определить как будет собираться проект при определнных условиях например если выставлена какая то переменная, включить дополнительный тесты и т.п..\n\nПрофиль хранится в pom.xml или в settings.xml(могут указываться пароли так как он не распространяется вместе с продуктом) в секции profiles\n\nИспользование профиля:\n\n```\n$ mvn clean test -P myProfile\n```\n\n```xml\n<profiles>\n    <profile>\n        <id>integration-tests</id>\n        <activation>\n            <activateByDefault>true</activateByDefault>\n        </activation>\n        <modules>\n            <module>allure-e2e</module>\n        </modules>\n    </profile>\n</profiles>\n```\n\n## Центральные репозитории артефактов\n\nУдаленный сервер, все разработчики на который могут отправлять свои разработки, а другие могут их забирать.\nОсновным таким сервером является: Maven Central Repository (http://maven.org)\n\nВ папке репозитория хранится: сами пакеты, которые приходят от разработчиков, их контрольная сумма, некоторая служебная информация в xml и цифровые подписи.\n\n- maven-metadata.xml(служебная информация)\n- jar, javadoc.jar, source.jar, jar.asc (пакеты)\n- jar.md5, javadoc.jar.md5, source.jar.md5, jar.asc.md5 (контрольная сумма)\n- jar.sha1, javadoc.jar.sha1, source.jar.sha1, jar.asc.sha1 (цифровые подписи)\n\nСуществует несколько специализироованных веб-приложений, которые выполняют функцию центральных репозиториев: Sonatype Nexus и Artifactory.\n\n## Локальный репозиторий артефактов \n\nПапка на файловой системе, которая скачивает все зависимости и файлы с центрального репозитория и кеширует у себя и это позвояет ускорять выполнение билдов.\n\nВ папке репозитоория хранятся: файлы pom.xml для каждого проекта, jar файлы, файлы с документацией и исходниками и их контрольные суммы.\n- pom\n- jar\n- javadoc.jar\n- source.jar\n- pom.sha1, jar.sha1, javadoc.jar.sha1, source.jar.sha1\n\n## Архетипы\n\nВозможность создавать шаблоны проектов. Такой возмодности не было в Ant.\nАрхетип - готовый шаблон.\n\nСоздание проекта по шаблону выполняется командой:\n\n```\n$ mvn archetype:generate\n```\n\n## TODO\n\nhttps://www.youtube.com/watch?v=R422m8VTevA","description":"Maven","image":"null","category":{"id":"automation","title":"automation","path":"/category/automation/"},"date":"16/06/2022","path":"/maven/","links":[{"title":"","items":[{"title":"Курс по автоматизации тестирования Java","link":"/kurs-po-avtomatizaczii-testirovaniya-java/"},{"title":"Система сборки. Ant, Maven, Gradle","link":"/sistema-sborki-ant-maven-gradle/"},{"title":"Gradle","link":"/gradle/"},{"title":"Maven","link":"/maven/"}]}],"headings":[{"value":"Название проекта и параметры","anchor":"#название-проекта-и-параметры"},{"value":"Список модулей","anchor":"#список-модулей"},{"value":"Информация о проекте","anchor":"#информация-о-проекте"},{"value":"Описание сборки проекта (плагины)","anchor":"#описание-сборки-проекта-плагины"},{"value":"Зависимости","anchor":"#зависимости"},{"value":"Именование директорий","anchor":"#именование-директорий"},{"value":"Жизненные циклы","anchor":"#жизненные-циклы"},{"value":"Сборка проекта. Команда mvn.","anchor":"#сборка-проекта-команда-mvn"},{"value":"Версии пакетов. Релизы и снепшоты","anchor":"#версии-пакетов-релизы-и-снепшоты"},{"value":"Конфликт зависимостей. Дерево зависимостей","anchor":"#конфликт-зависимостей-дерево-зависимостей"},{"value":"Исключение зависимостей","anchor":"#исключение-зависимостей"},{"value":"Плагины. Настройка билда","anchor":"#плагины-настройка-билда"},{"value":"Служебные файлы и каталоги","anchor":"#служебные-файлы-и-каталоги"},{"value":"Профили. Settings.xml","anchor":"#профилиsettingsxml"},{"value":"Центральные репозитории артефактов","anchor":"#центральные-репозитории-артефактов"},{"value":"Локальный репозиторий артефактов","anchor":"#локальный-репозиторий-артефактов"},{"value":"Архетипы","anchor":"#архетипы"},{"value":"TODO","anchor":"#todo"}],"subtitles":[{"depth":2,"value":"Название проекта и параметры","anchor":"#название-проекта-и-параметры"},{"depth":2,"value":"Список модулей","anchor":"#список-модулей"},{"depth":2,"value":"Информация о проекте","anchor":"#информация-о-проекте"},{"depth":2,"value":"Описание сборки проекта (плагины)","anchor":"#описание-сборки-проекта-плагины"},{"depth":2,"value":"Зависимости","anchor":"#зависимости"},{"depth":2,"value":"Именование директорий","anchor":"#именование-директорий"},{"depth":2,"value":"Жизненные циклы","anchor":"#жизненные-циклы"},{"depth":2,"value":"Сборка проекта. Команда mvn.","anchor":"#сборка-проекта-команда-mvn"},{"depth":3,"value":"Управление зависимостями","anchor":"#управление-зависимостями"},{"depth":2,"value":"Версии пакетов. Релизы и снепшоты","anchor":"#версии-пакетов-релизы-и-снепшоты"},{"depth":2,"value":"Конфликт зависимостей. Дерево зависимостей","anchor":"#конфликт-зависимостей-дерево-зависимостей"},{"depth":2,"value":"Исключение зависимостей","anchor":"#исключение-зависимостей"},{"depth":3,"value":"Необязательные зависимости","anchor":"#необязательные-зависимости"},{"depth":2,"value":"Плагины. Настройка билда","anchor":"#плагины-настройка-билда"},{"depth":3,"value":"Maven Compiler Plugin","anchor":"#maven-compiler-plugin"},{"depth":3,"value":"Maven Source Plugin","anchor":"#maven-source-plugin"},{"depth":3,"value":"Maven Dependency Plugin","anchor":"#maven-dependency-plugin"},{"depth":3,"value":"Maven Jar Plugin","anchor":"#maven-jar-plugin"},{"depth":3,"value":"Maven Assembly Plugin","anchor":"#maven-assembly-plugin"},{"depth":3,"value":"Maven Release Plugin","anchor":"#maven-release-plugin"},{"depth":3,"value":"Maven Surefire Plugin","anchor":"#maven-surefire-plugin"},{"depth":3,"value":"Maven Site Plugin","anchor":"#maven-site-plugin"},{"depth":2,"value":"Служебные файлы и каталоги","anchor":"#служебные-файлы-и-каталоги"},{"depth":2,"value":"Профили. Settings.xml","anchor":"#профилиsettingsxml"},{"depth":2,"value":"Центральные репозитории артефактов","anchor":"#центральные-репозитории-артефактов"},{"depth":2,"value":"Локальный репозиторий артефактов","anchor":"#локальный-репозиторий-артефактов"},{"depth":2,"value":"Архетипы","anchor":"#архетипы"},{"depth":2,"value":"TODO","anchor":"#todo"}],"tags":[{"id":"Автоматизация тестирования","title":"Автоматизация тестирования","path":"/tag/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}]},"comments":{"edges":[]}},"context":{}}