(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{UQSp:function(t,a,o){"use strict";a.a={name:"VueRemarkRoot",render(t){return t("div",null,this.$slots.default)}}},q6XN:function(t,a,o){"use strict";o.r(a);var e=o("KHd+"),i=o("UQSp"),n=o("oCYn");function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}n.a.config.optionMergeStrategies;var s={VueRemarkRoot:i.a},l=function(t){var a=t.options.components=t.options.components||{},o=t.options.computed=t.options.computed||{};Object.keys(s).forEach((function(t){"object"===r(s[t])&&"function"==typeof s[t].render||"function"==typeof s[t]&&"function"==typeof s[t].options.render?a[t]=s[t]:o[t]=function(){return s[t]}}))},D=n.a.config.optionMergeStrategies,c="__vueRemarkFrontMatter",p={excerpt:null,title:"Java Core",category:"java",description:"Java Core",tags:["java","autotests","автотесты","план проекта"],icon:"fas fa-code",image:"null",date:"2024-03-29T00:00:00.000Z",keywords:"java, автотесты",order:1,links:[{items:[{title:"План содания проекта для UI автотестов",link:"/plan-sodaniya-proekta-dlya-ui-avtotestov/"},{title:"Создаем основу проекта",link:"/sozdaem-osnovu-proekta/"}]}]};var u=function(t){t.options[c]&&(t.options[c]=p),n.a.util.defineReactive(t.options,c,p),t.options.computed=D.computed({$frontmatter:function(){return t.options[c]}},t.options.computed)},v=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("VueRemarkRoot",[a("p",[t._v("Java Core")]),a("h2",{attrs:{id:"что-такое-программа"}},[a("a",{attrs:{href:"#%D1%87%D1%82%D0%BE-%D1%82%D0%B0%D0%BA%D0%BE%D0%B5-%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B0","aria-hidden":"true"}},[a("span",{staticClass:"icon icon-link"})]),t._v("Что такое программа")]),a("p",[t._v("Любая программа это набор инструкций, которые выполняет процессор или его микропрограмма. Эти инструкции называются машинным кодом. \nОни показывают процессору откуда взять данные, что с ними сделать и куда поожить результат. Hello world на машинном языке выглядел бы как набор цифр и букв, набор инструкций зависит от реализации конкретного процессора и унифицируется на уровне операционных систем(созданием виртуального процесора с универсальным набором инструкций). ")]),a("h2",{attrs:{id:"появление-и-развитие-языка-программирования"}},[a("a",{attrs:{href:"#%D0%BF%D0%BE%D1%8F%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B8-%D1%80%D0%B0%D0%B7%D0%B2%D0%B8%D1%82%D0%B8%D0%B5-%D1%8F%D0%B7%D1%8B%D0%BA%D0%B0-%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F","aria-hidden":"true"}},[a("span",{staticClass:"icon icon-link"})]),t._v("Появление и развитие языка программирования")]),a("ol",[a("li",[a("p",[t._v("Чтобы было проще запоминать машинные коды для каждого кода придумали мнемоники. Так появился язык Asembler и код стал немного понятнее. ")])]),a("li",[a("p",[t._v("Затем появились языки высокого уровня которые оперируют простыми словами, а специальные программы - компеляторы и интерпретаторы приводили их в машинный код. ")])]),a("li",[a("p",[t._v("Следующим этапом развития стало компиляция языка программирования не напрямую в машинный код, а сначала в промежуточный байт-код, по этому пути пошли разработчики java и dotNet'a. ")])])]),a("ul",[a("li",[a("p",[t._v("Разработчики Java создали концепцию JVM - java virtual machine - виртуальная машина, которая может исполнять bytecode скомпелированный из java кода. Создав реализацию такой виртуальной машины для разных платформ, мы получили возможность писать на джаве для любой платформы. ")])]),a("li",[a("p",[t._v("Разработчики из дотнета пошли другим путем и создали clr - common language runtime если разработчики джава были сосредоточены только на языке джава, то clr был создан для возможности писать на разных языках в пределах одного решения но при этом все ставки делались только на windows. ")])])]),a("p",[t._v("В настоящее время обе команды пересмотрели свою концепцию: в jvm появилась поддержка в том числе и других языков, а для дот нета почвилась платформа Mono которая позволяет запускать C# практически на любом устройстве. ")]),a("h2",{attrs:{id:"что-такое-jvm"}},[a("a",{attrs:{href:"#%D1%87%D1%82%D0%BE-%D1%82%D0%B0%D0%BA%D0%BE%D0%B5-jvm","aria-hidden":"true"}},[a("span",{staticClass:"icon icon-link"})]),t._v("Что такое JVM?")]),a("p",[t._v("JVM состоит из:")]),a("ul",[a("li",[t._v("Class Loader, загружающего файлы с байт кодом в память;")]),a("li",[t._v("виртуальная память, куда все это загружается;")]),a("li",[t._v("движок, который исполняет и оптимизирует код;")]),a("li",[t._v("дополнительные интерфейсы и библиотеки для работы с нативным кодом (кодом написанном на c/c++/assembler'e).")])]),a("h3",{attrs:{id:"class-loader"}},[a("a",{attrs:{href:"#class-loader","aria-hidden":"true"}},[a("span",{staticClass:"icon icon-link"})]),t._v("Class Loader")]),a("p",[t._v("Различают 3 вида:")]),a("ul",[a("li",[t._v("bootstrap - загружает все стандартные классы Java, т.е. все которые содержатся в пакетах java.lang, java.net и т.д.;")]),a("li",[t._v("extension - загружает классы из дополнительных библиотек, которые стаятся вместе с jdk и jre;")]),a("li",[t._v("application - загружает классы из  classpath папок, которые может настроить сам разработчик.")])]),a("h3",{attrs:{id:"jvm-memory---виртуальная-память"}},[a("a",{attrs:{href:"#jvm-memory---%D0%B2%D0%B8%D1%80%D1%82%D1%83%D0%B0%D0%BB%D1%8C%D0%BD%D0%B0%D1%8F-%D0%BF%D0%B0%D0%BC%D1%8F%D1%82%D1%8C","aria-hidden":"true"}},[a("span",{staticClass:"icon icon-link"})]),t._v("JVM Memory - виртуальная память")]),a("ul",[a("li",[t._v("Method Area, metaspace - здесь хранятся все статичные структуры и сам код, эта область является частью Heap(кучи)")]),a("li",[t._v("Heap - большая область памяти в которой хранятся все создаваемые объекты, она выделяется сразу при запуске и делится между всеми основными потоками. Здесь обычно происходят основные утечки память и здесь же работает garbage collector(уборщик мусора). GC - собирает информацию о данных которые больше не используются и пытается их удалить.")]),a("li",[t._v("Stack - более емкая область памяти, которая создается при создании потока, у каждого потока свой стек. Стек устроен по принципу первый вошел последний вышел(FILO). Для каждого вызываемого метода в стеке создается frame, набор именнованных параметров которые хранит переменные созданные в этом методе, промежуточные результаты и итоговый результат который возвращается через return. После выполнения метода его фрейм извлекается из стека и происходит переход к фрейму метода который был положен в стек перед ним, те тот метод который вызывал данный метод. ")]),a("li",[t._v("PC Registers - содержат указатели на внутренние инструкции самой java.")]),a("li",[t._v("Native Method Stack - стек для нативных методов.")])]),a("h3",{attrs:{id:"движок"}},[a("a",{attrs:{href:"#%D0%B4%D0%B2%D0%B8%D0%B6%D0%BE%D0%BA","aria-hidden":"true"}},[a("span",{staticClass:"icon icon-link"})]),t._v("Движок")]),a("ul",[a("li",[t._v("JIT - just-in-time компилятор - оптимизирует уже скомпелированный байт код ")]),a("li",[t._v("Интерпретатор который исполняет скомпелированный байт код")])]),a("h3",{attrs:{id:"jre"}},[a("a",{attrs:{href:"#jre","aria-hidden":"true"}},[a("span",{staticClass:"icon icon-link"})]),t._v("JRE")]),a("p",[t._v("JVM + java библиотеки")]),a("h3",{attrs:{id:"jdk"}},[a("a",{attrs:{href:"#jdk","aria-hidden":"true"}},[a("span",{staticClass:"icon icon-link"})]),t._v("JDK")]),a("p",[t._v("JRE + инструменты разработчика + компилятор")])])}),[],!1,null,null,null);"function"==typeof l&&l(v),"function"==typeof u&&u(v);a.default=v.exports}}]);