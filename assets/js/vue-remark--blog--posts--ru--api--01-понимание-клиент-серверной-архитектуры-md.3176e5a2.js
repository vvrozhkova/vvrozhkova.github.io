(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{"9YrY":function(t,o,n){"use strict";n.r(o);var e=n("KHd+"),i=n("UQSp"),r=n("oCYn");function a(t){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}r.a.config.optionMergeStrategies;var p={VueRemarkRoot:i.a},s=function(t){var o=t.options.components=t.options.components||{},n=t.options.computed=t.options.computed||{};Object.keys(p).forEach((function(t){"object"===a(p[t])&&"function"==typeof p[t].render||"function"==typeof p[t]&&"function"==typeof p[t].options.render?o[t]=p[t]:n[t]=function(){return p[t]}}))},D=r.a.config.optionMergeStrategies,c="__vueRemarkFrontMatter",u={excerpt:null,title:"Понимание клиент-серверной архитектуры",category:"api",description:"Понимание клиент-серверной архитектуры",tags:["api"],icon:"fas fa-bug",image:"null",date:"2022-06-23T00:00:00.000Z",keywords:"Понимание клиент-серверной архитектуры",order:1,links:[{items:[{title:"Понимание клиент-серверной архитектуры",link:"/ponimanie-klient-servernoj-arhitektury/"}]}]};var B=function(t){t.options[c]&&(t.options[c]=u),r.a.util.defineReactive(t.options,c,u),t.options.computed=D.computed({$frontmatter:function(){return t.options[c]}},t.options.computed)},f=Object(e.a)({},(function(){var t=this,o=t._self._c;return o("VueRemarkRoot",[o("p",[t._v("В клиент серверной архитектуре есть три звена:")]),o("ul",[o("li",[t._v("клиент")]),o("li",[t._v("сервер")]),o("li",[t._v("база данных")])]),o("p",[t._v("Когда мы вводим данные в программу клиент, клиент передает данные на сервер, а сервер перенаправляет его в БД. Клиент может быть web приложением или desktop приложением.")]),o("p",[t._v("После того как запрос был обработан в БД, поисковый результат возвращается обратно на сервер, а сервер передает его на клиент. Клиент отрисовывает информацию пользователю.")]),o("h2",{attrs:{id:"клиент"}},[o("a",{attrs:{href:"#%D0%BA%D0%BB%D0%B8%D0%B5%D0%BD%D1%82","aria-hidden":"true"}},[o("span",{staticClass:"icon icon-link"})]),t._v("Клиент")]),o("p",[t._v("Нужен для пользователя, он отрисовывает байты кода. Отвечает за то чтобы отобразить пользователю нужную информацию и позволить сформировать запрос в удобном интерфейсе, иногда еще провести базовые проверки введенных данных.")]),o("h2",{attrs:{id:"сервер"}},[o("a",{attrs:{href:"#%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80","aria-hidden":"true"}},[o("span",{staticClass:"icon icon-link"})]),t._v("Сервер")]),o("p",[t._v("На сервере находится основная логика приложения. ")]),o("h3",{attrs:{id:"почему-всю-логику-нельзя-хранить-на-клиенте"}},[o("a",{attrs:{href:"#%D0%BF%D0%BE%D1%87%D0%B5%D0%BC%D1%83-%D0%B2%D1%81%D1%8E-%D0%BB%D0%BE%D0%B3%D0%B8%D0%BA%D1%83-%D0%BD%D0%B5%D0%BB%D1%8C%D0%B7%D1%8F-%D1%85%D1%80%D0%B0%D0%BD%D0%B8%D1%82%D1%8C-%D0%BD%D0%B0-%D0%BA%D0%BB%D0%B8%D0%B5%D0%BD%D1%82%D0%B5","aria-hidden":"true"}},[o("span",{staticClass:"icon icon-link"})]),t._v("Почему всю логику нельзя хранить на клиенте?")]),o("p",[t._v("Можно. Но клиентов у нас может быть много. К нашему приложению могут обращаться с разных компьютеров. И чтобы все работало быстро и не тормозило нужен мощный клиентский компьютер. Поэтому проще заплатить за мощный сервер, который будет эту логику обрабатывать и остальные клиентские машины могут быть слабее. Также если вся логика будет на клиенте то получается что на каждом клиенте будет храниться код который обрабатывает логику а это дублирование кода. И если мы что то исправляем то нам надо вносить изменения на сотни компьютеров. А это дорого, долго и неудобно.")]),o("h2",{attrs:{id:"база-данных"}},[o("a",{attrs:{href:"#%D0%B1%D0%B0%D0%B7%D0%B0-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85","aria-hidden":"true"}},[o("span",{staticClass:"icon icon-link"})]),t._v("База данных")]),o("p",[t._v("Хранилище данных. Его иногда может и не быть. ")]),o("p",[t._v("Если приложение простое, то данные могут харниться на сервере. Такая архитектура называется двузвенная. Но в таком случае если сервер упадет или перезагрузится, то информация потеряется. Поэтому лучше когда она храниться отдельно. ")]),o("p",[t._v("Это может быть не база данных, сервер может записывать информацию в файлы. Но тогда программисту нужно будет самому фактически делать самописную базу данных. Опять же для простых приложений можно и так. Но для серьезного продукта лучше иметь отдельную базу данных. ")]),o("p",[t._v("База данных специально ориентирована на хранение информации для того чтобы можно было быстро и легко по этой информации искать и она обеспечивает сохранность данных. Даже если компьютер выключится все равно наши данные сохранятся. Также повышается надежность приложения, тк в базе могут храниться персональные данные: ФИО, ИНН, Адрес, Телефон и т.д. и не все должны иметь к ним доступ. ")]),o("p",[o("strong",[t._v("Недостаток клиент серверной архитектуры")])]),o("p",[t._v("Если одно звено упало то не работает все приложение.")]),o("p",[t._v("Чтобы такого не случалось делают кластер серверов. Это значит что работает не один сервер а несколько. Также перед ними добавляют балансировщик, который решает кому отправлять запрос. Когда приходит запрос балансировщик смотрит какой из серверов менее загружен и передает туда запрос. Такое бывает когда приложение высоконагруженное и один сервер с ним просто не справляется. Таким образом в кластере может быть не 2 сервера, а 10, 15 и т.д.")]),o("p",[t._v("Точно также можно балансировать базу данных, может быть несколько копий баз данных на разных машинах и балансировщик отправляет запрос то к одной бвзе то ко второй.")]),o("p",[t._v("Такая схема называется "),o("strong",[t._v("горящий резерв")]),t._v(". Если нам нужно обновить приложение мы отключаем один сервер временно переложив всю нагрузку на оставшийся обновляем один сервер снова его запускаем, гасим второй и обновляем пока нагрузка идет на оставшиеся сервера и т.д. Работа приложения совсем не останавливается. ")]),o("p",[t._v("И есть схема "),o("strong",[t._v("холодный резерв")]),t._v(", когда второй сервер является резервной копией на всякий случай и все запросы идут на один сервер, но если с ним что то случилось и он упал тогда балансировщик перенаправляет всю нагрузку на второй сервер. ")]),o("p",[t._v("Такие схемы помогают нам устранить проблему упало одно звено все отдыхают.")]),o("p",[t._v("Сервер дороже, у дисков для серверного приложения особые требования по надежности и есть поддержка специфичных функций.")])])}),[],!1,null,null,null);"function"==typeof s&&s(f),"function"==typeof B&&B(f);o.default=f.exports},UQSp:function(t,o,n){"use strict";o.a={name:"VueRemarkRoot",render(t){return t("div",null,this.$slots.default)}}}}]);