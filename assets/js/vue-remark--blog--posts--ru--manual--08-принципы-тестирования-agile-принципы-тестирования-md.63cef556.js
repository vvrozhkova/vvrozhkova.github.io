(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{UQSp:function(D,t,i){"use strict";t.a={name:"VueRemarkRoot",render(D){return D("div",null,this.$slots.default)}}},nb7k:function(D,t,i){"use strict";i.r(t);var e=i("KHd+"),B=i("UQSp"),n=i("oCYn");function a(D){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(D){return typeof D}:function(D){return D&&"function"==typeof Symbol&&D.constructor===Symbol&&D!==Symbol.prototype?"symbol":typeof D})(D)}n.a.config.optionMergeStrategies;var s={VueRemarkRoot:B.a},r=function(D){var t=D.options.components=D.options.components||{},i=D.options.computed=D.options.computed||{};Object.keys(s).forEach((function(D){"object"===a(s[D])&&"function"==typeof s[D].render||"function"==typeof s[D]&&"function"==typeof s[D].options.render?t[D]=s[D]:i[D]=function(){return s[D]}}))},o=n.a.config.optionMergeStrategies,l="__vueRemarkFrontMatter",c={excerpt:null,title:"Принципы тестирования, Agile принципы тестирования",category:"manual",description:"Принципы тестирования, Agile принципы тестирования",tags:["Принципы тестирования","Agile принципы тестирования"],icon:"fas fa-bug",image:"null",date:"2022-05-18T00:00:00.000Z",keywords:"qa, Принципы тестирования, Agile принципы тестирования",order:"08",links:[{items:[{title:"1. Тестирование, Quality control, Quality assurance",link:"/testirovanie-quality-control-quality-assurance/"},{title:"2. Понятие качества, международные стандарты качества",link:"/ponyatie-kachestva-mezhdunarodnye-standarty-kachestva/"},{title:"3. Жизненный цикл дефекта",link:"/zhiznennyj-czikl-defekta/"},{title:"4. Жизненный цикл разработки ПО, SDLC (Software Development LifeCycle)",link:"/zhiznennyj-czikl-razrabotki-po-sdlc-software-development-life-cycle/"},{title:"5. Модели разработки ПО",link:"/modeli-razrabotki-po/"},{title:"6. Методологии разработки ПО (Scrum, Kanban, RUP, DSDM, MSF, XP)",link:"/metodologii-razrabotki-po-scrum-kanban-rup-dsdm-msf-xp"},{title:"7. Жизненный цикл тестирования приложений, STLC (Software Testing LifeCycle)",link:"/zhiznennyj-czikl-testirovaniya-prilozhenij-stlc-software-testing-life-cycle/"},{title:"8. Принципы тестирования, Agile принципы тестирования",link:"/princzipy-testirovaniya-agile-princzipy-testirovaniya/"},{title:"9. Практики и подходы тестирования",link:"/praktiki-i-podhody-testirovaniya/"},{title:"10. Виды тестирования",link:"/vidy-testirovaniya/"},{title:"11. Уровни тестирования",link:"/urovni-testirovaniya/"},{title:"12. Техники тест-дизайна",link:"/tehniki-test-dizajna/"},{title:"13. Тестовая документация",link:"/testovaya-dokumentacziya/"}]}]};var p=function(D){D.options[l]&&(D.options[l]=c),n.a.util.defineReactive(D.options,l,c),D.options.computed=o.computed({$frontmatter:function(){return D.options[l]}},D.options.computed)},v=Object(e.a)({},(function(){var D=this,t=D._self._c;return t("VueRemarkRoot",[t("h2",{attrs:{id:"принципы-тестирования"}},[t("a",{attrs:{href:"#%D0%BF%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF%D1%8B-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F","aria-hidden":"true"}},[t("span",{staticClass:"icon icon-link"})]),D._v("Принципы тестирования")]),t("p",[D._v("подробнее см "),t("a",{attrs:{href:"https://ibs-training.ru/about/news/7_printsipov_testirovaniya_CHast_1/",target:"_blank",rel:"nofollow noopener noreferrer"}},[D._v("7 принципов тестирования по книге «Foundations of Software Testing: ISTQB Certification» by Dorothy Graham, Erik van Veenendaal, Isabel Evans & Rex Black")])]),t("h3",{attrs:{id:"1-тестирование-демонстрирует-наличие-дефектов-testing-shows-presence-of-defects"}},[t("a",{attrs:{href:"#1-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B4%D0%B5%D0%BC%D0%BE%D0%BD%D1%81%D1%82%D1%80%D0%B8%D1%80%D1%83%D0%B5%D1%82-%D0%BD%D0%B0%D0%BB%D0%B8%D1%87%D0%B8%D0%B5-%D0%B4%D0%B5%D1%84%D0%B5%D0%BA%D1%82%D0%BE%D0%B2-testing-shows-presence-of-defects","aria-hidden":"true"}},[t("span",{staticClass:"icon icon-link"})]),D._v("1. Тестирование демонстрирует наличие дефектов (Testing shows presence of defects).")]),t("p",[D._v("Тестирование может показать, что дефекты присутствуют, но не может доказать, что дефектов больше нет.\nСколько бы успешных тестов вы не провели, вы не можете утверждать, что нет таких тестов, которые не нашли бы ошибку.")]),t("h3",{attrs:{id:"2-исчерпывающее-тестирование-невозможно-exhaustive-testing-is-impossible"}},[t("a",{attrs:{href:"#2-%D0%B8%D1%81%D1%87%D0%B5%D1%80%D0%BF%D1%8B%D0%B2%D0%B0%D1%8E%D1%89%D0%B5%D0%B5-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BD%D0%B5%D0%B2%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE-exhaustive-testing-is-impossible","aria-hidden":"true"}},[t("span",{staticClass:"icon icon-link"})]),D._v("2. Исчерпывающее тестирование невозможно (Exhaustive testing is impossible).")]),t("p",[D._v("Полное тестирование с использованием всех входных комбинаций данных, результатов и предусловий физически невыполнимо (исключение — тривиальные случаи).")]),t("p",[D._v("Для проведения исчерпывающего тестирования придется протестировать все возможные входные значения и все пути выполнения программы, в большинстве случаев число таких вариаций стремится к бесконечности или просто на порядки превосходит отведенное время и бюджет. ")]),t("p",[D._v("Вместо попыток «протестировать все» нам нужен некий подход к тестированию (стратегия), который обеспечит правильный объем тестирования для данного проекта, данных заказчиков (и других заинтересованных лиц) и данного продукта. ")]),t("p",[D._v("При определении, какой объем тестирования достаточен, необходимо учитывать уровень риска, включая технические риски и риски, связанные с бизнесом, и такие ограничения проекта как время и бюджет. Оценка и управление рисками - одна из наиболее важных активностей в любом проекте.")]),t("h3",{attrs:{id:"3-раннее-тестирование-early-testing"}},[t("a",{attrs:{href:"#3-%D1%80%D0%B0%D0%BD%D0%BD%D0%B5%D0%B5-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-early-testing","aria-hidden":"true"}},[t("span",{staticClass:"icon icon-link"})]),D._v("3. Раннее тестирование (Early testing).")]),t("p",[D._v("Следует начинать тестирование на ранних стадиях жизненного цикла разработки ПО, чтобы найти дефекты как можно раньше.")]),t("p",[D._v("Тестовые активности должны начинаться как можно раньше в SDLC, а именно когда сформированы требования.")]),t("p",[D._v("Этот принцип связан с понятием «цена дефекта» (cost of defect). Цена дефекта существенно растет на протяжении жизненного цикла разработки ПО. Чем раньше обнаружен дефект, тем быстрее, проще и дешевле его исправить. Дефект, найденный в требованиях, обходится дешевле всего.")]),t("p",[D._v("Еще одно важное преимущество раннего тестирования - экономия времени. Тестовые активности могут начинаться еще до того, как написана первая строчка кода. По мере того, как готовятся требования и спецификации, тестировщики могут приступать к разработке и ревью тест-кейсов. И когда появится первая тестовая версия, можно будет сразу приступать к выполнению тестов.")]),t("h3",{attrs:{id:"4-скопление-дефектов-defects-clustering"}},[t("a",{attrs:{href:"#4-%D1%81%D0%BA%D0%BE%D0%BF%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B4%D0%B5%D1%84%D0%B5%D0%BA%D1%82%D0%BE%D0%B2-defects-clustering","aria-hidden":"true"}},[t("span",{staticClass:"icon icon-link"})]),D._v("4. Скопление дефектов (Defects clustering).")]),t("p",[D._v("Большая часть дефектов находится в ограниченном количестве модулей.")]),t("p",[D._v("Небольшое количество модулей содержит большинство дефектов, обнаруженных на этапе предрелизного тестирования, или же демонстрируют наибольшее количество отказов на этапе эксплуатации.")]),t("p",[D._v("Многие тестировщики наблюдали такой эффект - дефекты «"),t("em",[D._v("кучкуются")]),D._v("». Это может происходить потому, что определенная область кода особенно сложна и запутана, или потому, что внесение изменений производит «"),t("em",[D._v("эффект домино")]),D._v("». Это знание часто используется для оценки рисков при планировании тестов - тестировщики фокусируются на известных «"),t("em",[D._v("проблемных зонах")]),D._v("». Также полезно проводить анализ "),t("em",[D._v("первопричин (root cause analysis)")]),D._v(", чтобы предотвратить повторное появление дефектов, обнаружить причины возникновения скоплений дефектов и спрогнозировать потенциальные скопления дефектов в будущем.")]),t("h3",{attrs:{id:"5-парадокс-пестицида-pesticide-paradox"}},[t("a",{attrs:{href:"#5-%D0%BF%D0%B0%D1%80%D0%B0%D0%B4%D0%BE%D0%BA%D1%81-%D0%BF%D0%B5%D1%81%D1%82%D0%B8%D1%86%D0%B8%D0%B4%D0%B0-pesticide-paradox","aria-hidden":"true"}},[t("span",{staticClass:"icon icon-link"})]),D._v("5. Парадокс пестицида (Pesticide paradox).")]),t("p",[D._v("Если повторять те же тестовые сценарии снова и снова, в какой-то момент этот набор тестов перестанет выявлять новые дефекты.")]),t("p",[D._v("Boris Beizer в своей книге Software Testing Techniques объяснил парадокс пестицида как феномен, согласно которому чем больше вы тестируете ПО, тем более невосприимчивым оно становится к имеющимся тестам, т.е.")]),t("ul",[t("li",[D._v("каждый метод и набор тестов, который используется для предотвращения или поиска ошибок, может оставлять часть не найденных ошибок, против которых эти методы и тесты неэффективны;")]),t("li",[D._v("имеющиеся тесты устаревают после исправления дефекта и не могут обнаружить новые;")])]),t("p",[D._v("Из чего следует, что набор тестов, тестовых данных и подходов нужно постоянно пересматривать и улучшать для выявления не найденных ошибок, а также необходимо обновлять тесты и тестовые данные после исправления уже найденных дефектов.")]),t("h3",{attrs:{id:"6-тестирование-зависит-от-контекста-testing-is-context-depending"}},[t("a",{attrs:{href:"#6-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B7%D0%B0%D0%B2%D0%B8%D1%81%D0%B8%D1%82-%D0%BE%D1%82-%D0%BA%D0%BE%D0%BD%D1%82%D0%B5%D0%BA%D1%81%D1%82%D0%B0-testing-is-context-depending","aria-hidden":"true"}},[t("span",{staticClass:"icon icon-link"})]),D._v("6. Тестирование зависит от контекста (Testing is context depending).")]),t("p",[D._v("Тестирование выполняется по-разному, в зависимости от контекста. Например, тестирование систем, критических с точки зрения безопасности, проводится иначе, чем тестирование сайта интернет-магазина.")]),t("p",[D._v("Этот принцип тесно связан с понятием риска. Что такое риск? Риск - это потенциальная проблема. У риска есть вероятность (likelihood) - она всегда выше 0 и ниже 100% - и есть влияние (impact) - те негативные последствия, которых мы опасаемся. Анализируя риски, мы всегда взвешиваем эти два аспекта: вероятность и влияние.")]),t("p",[D._v("То же можно сказать и о мире ПО: разные системы связаны с различными уровнями риска, влияние того или иного дефекта также сильно варьируется. Одни проблемы довольно тривиальны, другие могут дорого обойтись и привести к большим потерям денег, времени, деловой репутации, а в некоторых случаях даже привести к травмам и смерти.")]),t("p",[D._v("Уровень риска влияет на выбор методологий, техник и типов тестирования.")]),t("h3",{attrs:{id:"7-заблуждение-об-отсутствии-ошибок-absence-of-errors-fallacy"}},[t("a",{attrs:{href:"#7-%D0%B7%D0%B0%D0%B1%D0%BB%D1%83%D0%B6%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%BE%D0%B1-%D0%BE%D1%82%D1%81%D1%83%D1%82%D1%81%D1%82%D0%B2%D0%B8%D0%B8-%D0%BE%D1%88%D0%B8%D0%B1%D0%BE%D0%BA-absence-of-errors-fallacy","aria-hidden":"true"}},[t("span",{staticClass:"icon icon-link"})]),D._v("7. Заблуждение об отсутствии ошибок (Absence-of-errors fallacy).")]),t("p",[D._v("Отсутствие найденных дефектов при тестировании не всегда означает готовность продукта к релизу. Система должна быть удобна пользователю в использовании и удовлетворять его ожиданиям и потребностям.")]),t("p",[D._v("Нахождение и исправление дефектов бесполезно, если построенная система неудобна для использования и не соответствует нуждам и ожиданиям пользователей.")]),t("p",[D._v("Заказчики ПО - люди и организации, которые покупают и используют его, чтобы выполнять свои повседневные задачи - на самом деле совершенно не интересуются дефектами и их количеством, кроме тех случаев, когда они непосредственно сталкиваются с нестабильностью продукта. Им также неинтересно, насколько ПО соответствует формальным требованиям, которые были задокументированы. Пользователи ПО более заинтересованы в том, чтобы оно помогало им эффективно выполнять задачи. ПО должно отвечать их потребностям, и именно с этой точки зрения они его оценивают.\nДаже если вы выполнили все тесты и ошибок не обнаружили, это еще не гарантия того, что ПО будет соответствовать нуждам и ожиданиям пользователей.\nИначе говоря, верификация не равна валидации.")]),t("h2",{attrs:{id:"гибкое-тестирование"}},[t("a",{attrs:{href:"#%D0%B3%D0%B8%D0%B1%D0%BA%D0%BE%D0%B5-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5","aria-hidden":"true"}},[t("span",{staticClass:"icon icon-link"})]),D._v("Гибкое тестирование")]),t("p",[t("strong",[D._v("Гибкое тестирование (agile testing):")]),D._v(" Способ тестирования для проектов, использующих гибкие\nметодологии разработки программного обеспечения, включающий такие техники и методы, как\nэкстремальное программирование, и рассматривающий процесс разработки как потребителя\nпроцесса тестирования и делающий упор на парадигму раннего тестирования.")]),t("h2",{attrs:{id:"принципы-agile-тестирования"}},[t("a",{attrs:{href:"#%D0%BF%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF%D1%8B-agile-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F","aria-hidden":"true"}},[t("span",{staticClass:"icon icon-link"})]),D._v("Принципы Agile тестирования")]),t("p",[D._v("по книге "),t("a",{attrs:{href:"http://testobsessed.com/wp-content/uploads/2011/04/AgileTestingOverview.pdf",target:"_blank",rel:"nofollow noopener noreferrer"}},[D._v("E. Hendrickson - Agile Testing Nine Principles and Six Concrete Practies for Testing on Agile Teams")])]),t("h3",{attrs:{id:"1-тестирование-продвигает-проект-вперед"}},[t("a",{attrs:{href:"#1-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BF%D1%80%D0%BE%D0%B4%D0%B2%D0%B8%D0%B3%D0%B0%D0%B5%D1%82-%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82-%D0%B2%D0%BF%D0%B5%D1%80%D0%B5%D0%B4","aria-hidden":"true"}},[t("span",{staticClass:"icon icon-link"})]),D._v("1. Тестирование продвигает проект вперед")]),t("p",[D._v("В традиционных проектах тестирование обычно рассматривается как контроль качества, а QA/Test группа часто служит привратником качества. Предотвращение выход плохого программного обеспечения в поле, считается обязанностью\nтестирования. Результат этого подхода долгие, затяжные встречи по поиску ошибок, на которых мы спорим о приоритете ошибок, обнаруженных в ходе тестирования, и достаточно ли они важны и/или серьезные, чтобы задержать релиз.")]),t("p",[D._v("В Agile-командах мы с самого начала хорошо создаем продукт, используя тестирование для предоставления обратной связи на постоянной основе о том, насколько хорошо новый продукт удовлетворяет потребности бизнеса.\nЭто выглядит как небольшое изменение, но оно имеет глубокие последствия. ")]),t("p",[D._v("Враждебные отношения, которые некоторые организации поддерживают между тестировщиками и разработчиками, должны быть заменен духом сотрудничества. Это совершенно другое мышление.")]),t("h3",{attrs:{id:"2-тестирование--это-не-один-из-этапов"}},[t("a",{attrs:{href:"#2-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5--%D1%8D%D1%82%D0%BE-%D0%BD%D0%B5-%D0%BE%D0%B4%D0%B8%D0%BD-%D0%B8%D0%B7-%D1%8D%D1%82%D0%B0%D0%BF%D0%BE%D0%B2","aria-hidden":"true"}},[t("span",{staticClass:"icon icon-link"})]),D._v("2. Тестирование — это НЕ один из этапов…")]),t("p",[D._v("…в Agile-командах тестирование — это образ жизни.")]),t("p",[D._v("Agile-команды постоянно тестируют. Это единственный способ убедиться, что функции реализованные во время данной итерации или спринта, фактически выполняются.\nНепрерывное тестирование — единственный способ обеспечить непрерывный прогресс.")]),t("h3",{attrs:{id:"3-все-тестируют"}},[t("a",{attrs:{href:"#3-%D0%B2%D1%81%D0%B5-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D1%83%D1%8E%D1%82","aria-hidden":"true"}},[t("span",{staticClass:"icon icon-link"})]),D._v("3. Все тестируют")]),t("p",[D._v("В традиционных проектах независимые тестировщики несут ответственность за все действия по тестированию.")]),t("p",[D._v("В Agile за проведение тестирования отвечает вся команда. Да, тестеры выполняют тесты. Разработчики тоже.")]),t("p",[D._v("Необходимость провести все тесты за одну итерацию может означать, что команда просто не сможет сделать в каждом спринте столько, сколько они изначально думали. Если это так, то Agile сделал видимым несоответствие импеданса между тестом и разработчиком, которое уже\nсуществовал. А это значит, что команда двигалась не так быстро, как они думали. ")]),t("p",[D._v("Им казалось, все идет быстро, потому что разработчики шли быстро. Но если тестирование не сделано, фичи не сделаны, и у команды просто нет той скорости о которой они думают.")]),t("p",[D._v("Другая точка зрения на эту идею состоит в том, что тестирование — это «травка» в команде. Теория ограничений гласит, что вся команда может только идти так быстро, как идет самая медленная часть. \nЧтобы работать быстрее, команда должна увеличить пропускную способность самой медленной часть процесса. Устранить узкое место; все тестируют.")]),t("h3",{attrs:{id:"4-сокращение-оборотов-обратной-связи"}},[t("a",{attrs:{href:"#4-%D1%81%D0%BE%D0%BA%D1%80%D0%B0%D1%89%D0%B5%D0%BD%D0%B8%D0%B5-%D0%BE%D0%B1%D0%BE%D1%80%D0%BE%D1%82%D0%BE%D0%B2-%D0%BE%D0%B1%D1%80%D0%B0%D1%82%D0%BD%D0%BE%D0%B9-%D1%81%D0%B2%D1%8F%D0%B7%D0%B8","aria-hidden":"true"}},[t("span",{staticClass:"icon icon-link"})]),D._v("4. Сокращение оборотов обратной связи")]),t("p",[D._v("Как долго команда должна ждать информацию о том, как ведет себя программное обеспечение? Измерьте время между написанием программистом строки кода, и тем, когда кто-то или что-то выполняет этот код и предоставляет информацию о том, как он себя ведет. Это обратная связь.")]),t("p",[D._v("Если программное обеспечение не протестировано до самого конца длинного релиза, циклы обратной связи будут увеличены и могут измеряться месяцами. Это слишком долго.")]),t("p",[D._v("Более короткие петли обратной связи повышают гибкость. К счастью, на Agile-проектах программное обеспечение готово к тестированию практически с самого начала. А Agile-команды обычно используют несколько уровней тестирования для выявления разных типов информации.")]),t("p",[D._v("Автоматизированные модульные тесты проверяют поведение отдельных функций/методов и взаимодействие объектов. Они запускаются часто и предоставляют обратную связь в считанные минуты. Автоматизированные приемочные тесты обычно проверяют поведение системы от начала до конца. (Хотя иногда они обходят графический интерфейс, проверяя лежащую в основе бизнес-логику.) Как правило, они запускаются на зарегистрированном коде на постоянной основе, предоставляя обратную связь примерно через час. Гибкие проекты предпочитают автоматизированные тесты из-за быстрой обратной связи, которую они обеспечивают.")]),t("p",[D._v("Ручные регрессионные тесты занимают больше времени и, поскольку человек должен быть доступен, могут начаться не сразу. Время обратной связи увеличивается до дней или недель.")]),t("p",[D._v("Ручное тестирование, особенно ручное исследовательское тестирование, по-прежнему важно. Однако Agile-команды обычно обнаруживают, что быстрая обратная связь, обеспечиваемая автоматической регрессией, является ключом к быстрому обнаружению проблем, что снижает риск и количество доработок.")]),t("h3",{attrs:{id:"5-держите-код-в-чистоте"}},[t("a",{attrs:{href:"#5-%D0%B4%D0%B5%D1%80%D0%B6%D0%B8%D1%82%D0%B5-%D0%BA%D0%BE%D0%B4-%D0%B2-%D1%87%D0%B8%D1%81%D1%82%D0%BE%D1%82%D0%B5","aria-hidden":"true"}},[t("span",{staticClass:"icon icon-link"})]),D._v("5. Держите код в чистоте")]),t("p",[D._v("Этот принцип является примером дисциплины Agile-команд. Требуется огромная внутренняя дисциплина, чтобы исправлять ошибки по мере их обнаружения. ")]),t("p",[D._v("Если это настоящая ошибка, а не новая фича, она исправляется в ходе итерации. ")]),t("p",[D._v("В противном случае это все равно, что готовить на грязной кухне: для приготовления пищи требуется больше времени, чтобы пробраться через беспорядок, и полученная еда может быть съедобной, а может и не быть.")]),t("h3",{attrs:{id:"6-легкая-документация"}},[t("a",{attrs:{href:"#6-%D0%BB%D0%B5%D0%B3%D0%BA%D0%B0%D1%8F-%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F","aria-hidden":"true"}},[t("span",{staticClass:"icon icon-link"})]),D._v("6. Легкая документация")]),t("p",[D._v("Вместо того, чтобы писать многословную исчерпывающую тестовую документацию, Agile-тестировщики:")]),t("ul",[t("li",[D._v("Используют многоразовые чек листы, чтобы предлагать тесты")]),t("li",[D._v("Сосредоточиваются на сути теста, а не на второстепенных деталях")]),t("li",[D._v("Используют упрощенные стили/инструменты для документации.")]),t("li",[D._v("Фиксируют идеи тестирования в чартерах для исследовательского тестирования")]),t("li",[D._v("Используют документы для различных целей")])]),t("h3",{attrs:{id:"7-использование-одного-тестового-артефакта-для-ручных-и-автоматических-тестов"}},[t("a",{attrs:{href:"#7-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BE%D0%B4%D0%BD%D0%BE%D0%B3%D0%BE-%D1%82%D0%B5%D1%81%D1%82%D0%BE%D0%B2%D0%BE%D0%B3%D0%BE-%D0%B0%D1%80%D1%82%D0%B5%D1%84%D0%B0%D0%BA%D1%82%D0%B0-%D0%B4%D0%BB%D1%8F-%D1%80%D1%83%D1%87%D0%BD%D1%8B%D1%85-%D0%B8-%D0%B0%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85-%D1%82%D0%B5%D1%81%D1%82%D0%BE%D0%B2","aria-hidden":"true"}},[t("span",{staticClass:"icon icon-link"})]),D._v("7. Использование одного тестового артефакта для ручных и автоматических тестов")]),t("p",[D._v("Вместо того, чтобы вкладывать средства в обширные, тяжеловесные пошаговые сценарии ручного тестирования в Word или инструмент управления тестированием, мы фиксируем ожидания в формате, поддерживаемом системы автоматизированного тестирования, такие как FIT/Fitnesse. ")]),t("p",[D._v("Тест может быть выполнен вручную, но что более важно, тот же тестовый артефакт становится автоматическим тестом, когда программисты пишут приспособление для подключения теста к тестируемому программному обеспечению.")]),t("h3",{attrs:{id:"8-сделано-сделано-а-не-просто-сделано"}},[t("a",{attrs:{href:"#8-%D1%81%D0%B4%D0%B5%D0%BB%D0%B0%D0%BD%D0%BE-%D1%81%D0%B4%D0%B5%D0%BB%D0%B0%D0%BD%D0%BE-%D0%B0-%D0%BD%D0%B5-%D0%BF%D1%80%D0%BE%D1%81%D1%82%D0%BE-%D1%81%D0%B4%D0%B5%D0%BB%D0%B0%D0%BD%D0%BE","aria-hidden":"true"}},[t("span",{staticClass:"icon icon-link"})]),D._v("8. «Сделано Сделано», а не просто Сделано")]),t("p",[D._v("В традиционных средах со строгим разделением между разработкой и тестированием разработчики обычно говорят, что они «закончили» работу с функцией после ее реализации, но до ее тестирования.")]),t("p",[D._v("Конечно, функция не «готова», пока она не будет протестирована и не будут исправлены все ошибки. Вот почему в отрасли существует давняя шутка о том, что данный выпуск программного обеспечения обычно «готов на 90%» для 90% проекта. (Или, другими словами, последние 10 % усилий занимают 90 % времени.)")]),t("p",[D._v("Agile-команды не считают что-то «сделанным» и готовым к принятию владельцем продукта или заказчиком до тех пор, пока оно не будет реализовано и протестировано.")]),t("h3",{attrs:{id:"9-test-last-v-test-driven"}},[t("a",{attrs:{href:"#9-test-last-v-test-driven","aria-hidden":"true"}},[t("span",{staticClass:"icon icon-link"})]),D._v("9. Test-Last v. Test-Driven")]),t("p",[D._v("В традиционных средах тесты создаются на основе артефактов проекта, таких как документы с требованиями. ")]),t("p",[D._v("Требования и дизайн на первом месте, а затем тесты. И выполнение этих тестов происходит в конце проекта. Это подход «testlast».")]),t("p",[D._v("Тем не менее, тесты предоставляют конкретные примеры того, что означает для нового программного обеспечения соответствие требованиям. ")]),t("p",[D._v("Формирование тестов вместе с требованиями, а не после, и использование этих тестов для управления усилиями по разработке дает нам гораздо более четкие критерии выполнения и общее внимание к цели. ")]),t("p",[D._v("Этот подход, основанный на тестировании, можно увидеть в практиках TDD и ATDD.")]),t("hr"),t("p",[D._v("Принцип 1 — Тестирование демонстрирует наличие дефектов (Testing shows presence of defects)\nТестирование может показать, что дефекты присутствуют, но не может доказать, что их нет. Тестирование снижает вероятность наличия дефектов, находящихся в программном обеспечении, но, даже если дефекты не были обнаружены, это не доказывает его корректности.")]),t("p",[D._v("Принцип 2 — Исчерпывающее тестирование недостижимо (Exhaustive testing is impossible)\nПолное тестирование с использованием всех комбинаций вводов и предусловий физически невыполнимо, за исключением тривиальных случаев. Вместо исчерпывающего тестирования должны использоваться анализ рисков и расстановка приоритетов, чтобы более точно сфокусировать усилия по тестированию.")]),t("p",[D._v("Принцип 3 — Раннее тестирование (Early testing)\nЧтобы найти дефекты как можно раньше, активности по тестированию должны быть начаты как можно раньше в жизненном цикле разработки программного обеспечения или системы, и должны быть сфокусированы на определенных целях.")]),t("p",[D._v("Принцип 4 — Скопление дефектов (Defects clustering)\nУсилия тестирования должны быть сосредоточены пропорционально ожидаемой, а позже реальной плотности дефектов по модулям. Как правило, большая часть дефектов, обнаруженных при тестировании или повлекших за собой основное количество сбоев системы, содержится в небольшом количестве модулей.")]),t("p",[D._v("Принцип 5 — Парадокс пестицида (Pesticide paradox)\nЕсли одни и те же тесты будут прогоняться много раз, в конечном счете этот набор тестовых сценариев больше не будет находить новых дефектов. Чтобы преодолеть этот «парадокс пестицида», тестовые сценарии должны регулярно рецензироваться и корректироваться, новые тесты должны быть разносторонними, чтобы охватить все компоненты программного обеспечения,\nили системы, и найти как можно больше дефектов.")]),t("p",[D._v("Принцип 6 — Тестирование зависит от контекста (Testing is concept depending)\nТестирование выполняется по-разному в зависимости от контекста. Например, программное обеспечение, в котором критически важна безопасность, тестируется иначе, чем сайт электронной коммерции.\nПринцип 7 — Заблуждение об отсутствии ошибок (Absence-of-errors fallacy)\nОбнаружение и исправление дефектов не помогут, если созданная система не подходит пользователю и не удовлетворяет его ожиданиям и потребностям.")])])}),[],!1,null,null,null);"function"==typeof r&&r(v),"function"==typeof p&&p(v);t.default=v.exports}}]);