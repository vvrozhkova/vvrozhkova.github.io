(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{UQSp:function(t,s,a){"use strict";s.a={name:"VueRemarkRoot",render(t){return t("div",null,this.$slots.default)}}},vFsX:function(t,s,a){"use strict";a.r(s);var n=a("KHd+"),o=a("UQSp"),i=a("oCYn");function p(t){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}i.a.config.optionMergeStrategies;var c={VueRemarkRoot:o.a},v=function(t){var s=t.options.components=t.options.components||{},a=t.options.computed=t.options.computed||{};Object.keys(c).forEach((function(t){"object"===p(c[t])&&"function"==typeof c[t].render||"function"==typeof c[t]&&"function"==typeof c[t].options.render?s[t]=c[t]:a[t]=function(){return c[t]}}))},e=i.a.config.optionMergeStrategies,_="__vueRemarkFrontMatter",u={excerpt:null,title:"Линейный поиск",description:"Линейный поиск",tags:["algorithms","java","алгоритмы"],icon:"fas fa-code",image:"null",date:"2022-07-24T00:00:00.000Z",keywords:"java, algorithms, алгоритмы",order:3,links:[{items:[{title:"Алгоритмы (курс Яндекс)",link:"/algoritmy-kurs-yandeks/"},{title:"Сложность, тестирование, особые случаи",link:"/slozhnost-testirovanie-osobye-sluchai/"},{title:"Линейный поиск",link:"/linejnyj-poisk/"},{title:"Множества",link:"/mnozhestva/"},{title:"Словари и сортировка подсчётом",link:"/slovari-i-sortirovka-podschyotom/"},{title:"Префиксные суммы и два указателя",link:"/prefiksnye-summy-i-dva-ukazatelya/"},{title:"Бинарный поиск",link:"/binarnyj-poisk/"},{title:"Сортировка событий",link:"/sortirovka-sobytij/"},{title:"Деревья",link:"/derevya/"}]}]};var l=function(t){t.options[_]&&(t.options[_]=u),i.a.util.defineReactive(t.options,_,u),t.options.computed=e.computed({$frontmatter:function(){return t.options[_]}},t.options.computed)},k=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("VueRemarkRoot",[s("h2",{attrs:{id:"классические-задачи-линейного-поиска"}},[s("a",{attrs:{href:"#%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5-%D0%B7%D0%B0%D0%B4%D0%B0%D1%87%D0%B8-%D0%BB%D0%B8%D0%BD%D0%B5%D0%B9%D0%BD%D0%BE%D0%B3%D0%BE-%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%D0%B0","aria-hidden":"true"}},[s("span",{staticClass:"icon icon-link"})]),t._v("Классические задачи линейного поиска")]),s("p",[t._v("Линейный поиск - способ поиска, когда перебираются все элементы.")]),s("p",[t._v("Сложность линейного поиска - линейная, т.е. "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("O")]),s("mo",{attrs:{stretchy:"false"}},[t._v("(")]),s("mi",[t._v("N")]),s("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(N)")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),s("span",{staticClass:"mopen"},[t._v("(")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")]),s("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v(".")]),s("p",[t._v('Обычно ищут "подходящий" элемент или "наиболее подходящий элемент".')]),s("h3",{attrs:{id:"задача-1-найти-первое-вхождение-положительного-числа"}},[s("a",{attrs:{href:"#%D0%B7%D0%B0%D0%B4%D0%B0%D1%87%D0%B0-1-%D0%BD%D0%B0%D0%B9%D1%82%D0%B8-%D0%BF%D0%B5%D1%80%D0%B2%D0%BE%D0%B5-%D0%B2%D1%85%D0%BE%D0%B6%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%BF%D0%BE%D0%BB%D0%BE%D0%B6%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE%D0%B3%D0%BE-%D1%87%D0%B8%D1%81%D0%BB%D0%B0","aria-hidden":"true"}},[s("span",{staticClass:"icon icon-link"})]),t._v("Задача 1. Найти первое вхождение положительного числа.")]),s("p",[t._v("Дана последовательность чисел длиной N. Найти первое (левое) вхождение положительного числа X в нее или вывести -1, если число X не встречалось.")]),s("p",[t._v("Решение:")]),s("p",[t._v("Сначала положим в ответ -1, затем будем перебирать все элементы. Если текущий элемент равен X и ответ равен -1, запишем в ответ текущую позицию.")]),s("div",{staticClass:"gridsome-highlight",attrs:{"data-language":"java"}},[s("pre",{staticClass:"language-java"},[s("code",{staticClass:"language-java"},[s("span",{staticClass:"token keyword"},[t._v("public")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("static")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" "),s("span",{staticClass:"token function"},[t._v("findx")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token keyword"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(" seq"),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" x"),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" ans "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("-")]),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("for")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" i "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v(" i "),s("span",{staticClass:"token operator"},[t._v("<")]),t._v(" seq"),s("span",{staticClass:"token punctuation"},[t._v(".")]),t._v("length"),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v(" i"),s("span",{staticClass:"token operator"},[t._v("++")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n        "),s("span",{staticClass:"token keyword"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("ans "),s("span",{staticClass:"token operator"},[t._v("==")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("-")]),s("span",{staticClass:"token number"},[t._v("1")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("&&")]),t._v(" seq"),s("span",{staticClass:"token punctuation"},[t._v("[")]),t._v("i"),s("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("==")]),t._v(" x"),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n            ans "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" i"),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n        "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n    "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n\n    "),s("span",{staticClass:"token keyword"},[t._v("return")]),t._v(" ans"),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token punctuation"},[t._v("}")])])])]),s("h3",{attrs:{id:"задача-2-найти-последнее-вхождение-положительного-числа"}},[s("a",{attrs:{href:"#%D0%B7%D0%B0%D0%B4%D0%B0%D1%87%D0%B0-2-%D0%BD%D0%B0%D0%B9%D1%82%D0%B8-%D0%BF%D0%BE%D1%81%D0%BB%D0%B5%D0%B4%D0%BD%D0%B5%D0%B5-%D0%B2%D1%85%D0%BE%D0%B6%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%BF%D0%BE%D0%BB%D0%BE%D0%B6%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE%D0%B3%D0%BE-%D1%87%D0%B8%D1%81%D0%BB%D0%B0","aria-hidden":"true"}},[s("span",{staticClass:"icon icon-link"})]),t._v("Задача 2. Найти последнее вхождение положительного числа.")]),s("p",[t._v("Дана последовательность чисел длиной N. Найти последнее (правое) вхождение положительного числа X в неё или вывести -1, если число X не встречалось.")]),s("p",[t._v("Решение:")]),s("p",[t._v("Сначала положим в ответ -1, затем будем перебирать все элементы. Если текущий элемент равен X - запишем в ответ текущую позицию (без проверки что текущая позиция равна -1).")]),s("div",{staticClass:"gridsome-highlight",attrs:{"data-language":"java"}},[s("pre",{staticClass:"language-java"},[s("code",{staticClass:"language-java"},[s("span",{staticClass:"token keyword"},[t._v("public")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("static")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" "),s("span",{staticClass:"token function"},[t._v("findx")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token keyword"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(" seq"),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" x"),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" ans "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("-")]),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("for")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" i "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v(" i "),s("span",{staticClass:"token operator"},[t._v("<")]),t._v(" seq"),s("span",{staticClass:"token punctuation"},[t._v(".")]),t._v("length"),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v(" i"),s("span",{staticClass:"token operator"},[t._v("++")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n        "),s("span",{staticClass:"token keyword"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("seq"),s("span",{staticClass:"token punctuation"},[t._v("[")]),t._v("i"),s("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("==")]),t._v(" x"),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n            ans "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" i"),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n        "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n    "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n\n    "),s("span",{staticClass:"token keyword"},[t._v("return")]),t._v(" ans"),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token punctuation"},[t._v("}")])])])]),s("h3",{attrs:{id:"задача-3-найти-максимальное-число-в-последовательности"}},[s("a",{attrs:{href:"#%D0%B7%D0%B0%D0%B4%D0%B0%D1%87%D0%B0-3-%D0%BD%D0%B0%D0%B9%D1%82%D0%B8-%D0%BC%D0%B0%D0%BA%D1%81%D0%B8%D0%BC%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5-%D1%87%D0%B8%D1%81%D0%BB%D0%BE-%D0%B2-%D0%BF%D0%BE%D1%81%D0%BB%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE%D1%81%D1%82%D0%B8","aria-hidden":"true"}},[s("span",{staticClass:"icon icon-link"})]),t._v("Задача 3. Найти максимальное число в последовательности.")]),s("p",[t._v("Дана последовательность чисел длиной N (N>0). Найти максимальное число в последовательности.")]),s("p",[t._v("Решение:")]),s("p",[t._v("Сначала положим в ответ нулевой элемент последовательности (он точно существует, тк N>0), затем будем перебирать все элементы. Если текущий элемент больше ответа - запишем в ответ текущий элемент.")]),s("div",{staticClass:"gridsome-highlight",attrs:{"data-language":"java"}},[s("pre",{staticClass:"language-java"},[s("code",{staticClass:"language-java"},[s("span",{staticClass:"token keyword"},[t._v("public")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("static")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" "),s("span",{staticClass:"token function"},[t._v("findMax")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token keyword"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(" seq"),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" ans "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" seq"),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("for")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" i "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v(" i "),s("span",{staticClass:"token operator"},[t._v("<")]),t._v(" seq"),s("span",{staticClass:"token punctuation"},[t._v(".")]),t._v("length"),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v(" i"),s("span",{staticClass:"token operator"},[t._v("++")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n        "),s("span",{staticClass:"token keyword"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("seq"),s("span",{staticClass:"token punctuation"},[t._v("[")]),t._v("i"),s("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v(">")]),t._v(" ans"),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n            ans "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" seq"),s("span",{staticClass:"token punctuation"},[t._v("[")]),t._v("i"),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n        "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n    "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n\n    "),s("span",{staticClass:"token keyword"},[t._v("return")]),t._v(" ans"),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token punctuation"},[t._v("}")])])])]),s("p",[t._v("Если условие допускает пустую последовательность то этот случай нужно обрабатывать отдельно через if.")]),s("p",[t._v("Строки сравниваются по символьно и когда символы начинают отличаться можно сказать какая строка меньше или больше. Если строки длинные то сравнение будет идти долго, время равно длине строки. ")]),s("p",[t._v("Лексикографический порядок - это сравнение с учетом регистра.\nАлфавитный порядок - это сравннеие, как в словаре, без учета регистра.")]),s("p",[t._v("Решение задачи не подойдет для строк, так как будет постоянно перезаписываться значение ans, а для строк это требует больше времени, строки могут быть длинные.")]),s("p",[t._v("Нужно запоминать не значение, а индекс максимального элемента. ")]),s("div",{staticClass:"gridsome-highlight",attrs:{"data-language":"java"}},[s("pre",{staticClass:"language-java"},[s("code",{staticClass:"language-java"},[s("span",{staticClass:"token keyword"},[t._v("public")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("static")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("String")]),t._v(" "),s("span",{staticClass:"token function"},[t._v("findMax")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token class-name"},[t._v("String")]),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(" seq"),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" ans "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("for")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" i "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v(" i "),s("span",{staticClass:"token operator"},[t._v("<")]),t._v(" seq"),s("span",{staticClass:"token punctuation"},[t._v(".")]),t._v("length"),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v(" i"),s("span",{staticClass:"token operator"},[t._v("++")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n        "),s("span",{staticClass:"token keyword"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("seq"),s("span",{staticClass:"token punctuation"},[t._v("[")]),t._v("i"),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("compareTo")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("seq"),s("span",{staticClass:"token punctuation"},[t._v("[")]),t._v("ans"),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("==")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n            ans "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" i"),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n        "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n    "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n\n    "),s("span",{staticClass:"token keyword"},[t._v("return")]),t._v(" seq"),s("span",{staticClass:"token punctuation"},[t._v("[")]),t._v("ans"),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token punctuation"},[t._v("}")])])])]),s("h3",{attrs:{id:"задача-4-найти-максимальное-число-в-последовательности-и-второе-по-величине-число"}},[s("a",{attrs:{href:"#%D0%B7%D0%B0%D0%B4%D0%B0%D1%87%D0%B0-4-%D0%BD%D0%B0%D0%B9%D1%82%D0%B8-%D0%BC%D0%B0%D0%BA%D1%81%D0%B8%D0%BC%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5-%D1%87%D0%B8%D1%81%D0%BB%D0%BE-%D0%B2-%D0%BF%D0%BE%D1%81%D0%BB%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE%D1%81%D1%82%D0%B8-%D0%B8-%D0%B2%D1%82%D0%BE%D1%80%D0%BE%D0%B5-%D0%BF%D0%BE-%D0%B2%D0%B5%D0%BB%D0%B8%D1%87%D0%B8%D0%BD%D0%B5-%D1%87%D0%B8%D1%81%D0%BB%D0%BE","aria-hidden":"true"}},[s("span",{staticClass:"icon icon-link"})]),t._v("Задача 4. Найти максимальное число в последовательности и второе по величине число.")]),s("p",[t._v("Дана последовательность чисел длиной N (N>1). \nНайти максимальное число в последовательности и второе по величине число (такое, которое будет максимальным, если вычеркнуть из последовательности одно максимальное число).")]),s("p",[t._v("Решение:")]),s("p",[t._v("Заведем две переменные для первого и второго максимума. Возьмем первые два числа из последовательности и запишем большее из них в переменную для первого макисмума, а меньшее - для второго. Пройдем по всей последовательности. Если очередное число больше первого максимума, то запишем во второй макисмум значение первого, а в первый - текущее число. Если только больше второго, запишем текущее число во второй макисмум.")]),s("div",{staticClass:"gridsome-highlight",attrs:{"data-language":"java"}},[s("pre",{staticClass:"language-java"},[s("code",{staticClass:"language-java"},[s("span",{staticClass:"token keyword"},[t._v("public")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("static")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(" "),s("span",{staticClass:"token function"},[t._v("findMax2")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token keyword"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(" seq"),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n        "),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" max1"),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" max2"),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n        "),s("span",{staticClass:"token keyword"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("seq"),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v(">")]),t._v(" seq"),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n            max1 "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" seq"),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n            max2 "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" seq"),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n        "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("else")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n            max1 "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" seq"),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n            max2 "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" seq"),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n        "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n        "),s("span",{staticClass:"token keyword"},[t._v("for")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" i "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("2")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v(" i "),s("span",{staticClass:"token operator"},[t._v("<")]),t._v(" seq"),s("span",{staticClass:"token punctuation"},[t._v(".")]),t._v("length"),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v(" i"),s("span",{staticClass:"token operator"},[t._v("++")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n            "),s("span",{staticClass:"token keyword"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("seq"),s("span",{staticClass:"token punctuation"},[t._v("[")]),t._v("i"),s("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v(">")]),t._v(" max1"),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n                max2 "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" max1"),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n                max1 "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" seq"),s("span",{staticClass:"token punctuation"},[t._v("[")]),t._v("i"),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n            "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("else")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("seq"),s("span",{staticClass:"token punctuation"},[t._v("[")]),t._v("i"),s("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v(">")]),t._v(" max2"),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n                max2 "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" seq"),s("span",{staticClass:"token punctuation"},[t._v("[")]),t._v("i"),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n            "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n        "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n        "),s("span",{staticClass:"token keyword"},[t._v("return")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("new")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("max1"),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" max2"),s("span",{staticClass:"token punctuation"},[t._v("}")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token punctuation"},[t._v("}")])])])]),s("h3",{attrs:{id:"задача-5-найти-минимальное-четное-число-в-последовательности"}},[s("a",{attrs:{href:"#%D0%B7%D0%B0%D0%B4%D0%B0%D1%87%D0%B0-5-%D0%BD%D0%B0%D0%B9%D1%82%D0%B8-%D0%BC%D0%B8%D0%BD%D0%B8%D0%BC%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5-%D1%87%D0%B5%D1%82%D0%BD%D0%BE%D0%B5-%D1%87%D0%B8%D1%81%D0%BB%D0%BE-%D0%B2-%D0%BF%D0%BE%D1%81%D0%BB%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE%D1%81%D1%82%D0%B8","aria-hidden":"true"}},[s("span",{staticClass:"icon icon-link"})]),t._v("Задача 5. Найти минимальное четное число в последовательности.")]),s("p",[t._v("Дана последовательность чисел длиной N. Найти минимальное четное число в последовательности или вывести -1, если такого не существует.")]),s("p",[t._v("Решение:")]),s("p",[t._v("В переменную для ответа положим -1. Если очередное число четное, а ответ равен -1 или ответ больше текущего числа, то запишем в ответ текущее число.")]),s("p",[t._v("Универсальный способ для решения это завести boolean переменную с признаком встречали ли мы четное число или нет. Изначально она равна fasle, а как встретили четное число делаем ее true.")]),s("div",{staticClass:"gridsome-highlight",attrs:{"data-language":"java"}},[s("pre",{staticClass:"language-java"},[s("code",{staticClass:"language-java"},[s("span",{staticClass:"token keyword"},[t._v("public")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("static")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" "),s("span",{staticClass:"token function"},[t._v("findMinEven")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token keyword"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(" seq"),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" ans "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("boolean")]),t._v(" isFound "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token boolean"},[t._v("false")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n    "),s("span",{staticClass:"token keyword"},[t._v("for")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" i "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v(" i "),s("span",{staticClass:"token operator"},[t._v("<")]),t._v(" seq"),s("span",{staticClass:"token punctuation"},[t._v(".")]),t._v("length"),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v(" i"),s("span",{staticClass:"token operator"},[t._v("++")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n        "),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" now "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" seq"),s("span",{staticClass:"token punctuation"},[t._v("[")]),t._v("i"),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n        "),s("span",{staticClass:"token keyword"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("now "),s("span",{staticClass:"token operator"},[t._v("%")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("2")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("==")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("&&")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token operator"},[t._v("!")]),t._v("isFound "),s("span",{staticClass:"token operator"},[t._v("||")]),t._v(" now "),s("span",{staticClass:"token operator"},[t._v("<")]),t._v(" ans"),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n            ans "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" now"),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n            isFound "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token boolean"},[t._v("true")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n        "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n    "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("return")]),t._v(" ans"),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token punctuation"},[t._v("}")])])])]),s("h2",{attrs:{id:"два-прохода"}},[s("a",{attrs:{href:"#%D0%B4%D0%B2%D0%B0-%D0%BF%D1%80%D0%BE%D1%85%D0%BE%D0%B4%D0%B0","aria-hidden":"true"}},[s("span",{staticClass:"icon icon-link"})]),t._v("Два прохода")]),s("h3",{attrs:{id:"задача-6-вывести-все-самые-короткие-слова-через-пробел"}},[s("a",{attrs:{href:"#%D0%B7%D0%B0%D0%B4%D0%B0%D1%87%D0%B0-6-%D0%B2%D1%8B%D0%B2%D0%B5%D1%81%D1%82%D0%B8-%D0%B2%D1%81%D0%B5-%D1%81%D0%B0%D0%BC%D1%8B%D0%B5-%D0%BA%D0%BE%D1%80%D0%BE%D1%82%D0%BA%D0%B8%D0%B5-%D1%81%D0%BB%D0%BE%D0%B2%D0%B0-%D1%87%D0%B5%D1%80%D0%B5%D0%B7-%D0%BF%D1%80%D0%BE%D0%B1%D0%B5%D0%BB","aria-hidden":"true"}},[s("span",{staticClass:"icon icon-link"})]),t._v("Задача 6. Вывести все самые короткие слова через пробел.")]),s("p",[t._v("Дана последовательность слов. Вывести все самые короткие слова через пробел.")]),s("p",[t._v("Если решать задачу за один проход, то есть сохранять количество символов в строке и саму строку и при нахождении еще более меньшей обновлять ее, это будет медленно и будет лишняя память заниматься. Так как мы будем накапливать слова, и хороше если добавление слова будет занимать "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("O")]),s("mo",{attrs:{stretchy:"false"}},[t._v("(")]),s("mn",[t._v("1")]),s("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(1)")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),s("span",{staticClass:"mopen"},[t._v("(")]),s("span",{staticClass:"mord"},[t._v("1")]),s("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v(", но может быть и больше, если копировать сами объекты. В Java лучше использовать для этих целей StringBuilder или StringBuffer.")]),s("div",{staticClass:"gridsome-highlight",attrs:{"data-language":"java"}},[s("pre",{staticClass:"language-java"},[s("code",{staticClass:"language-java"},[s("span",{staticClass:"token keyword"},[t._v("public")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("static")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("String")]),t._v(" "),s("span",{staticClass:"token function"},[t._v("shortWords")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token class-name"},[t._v("String")]),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(" words"),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" minLength "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" words"),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("length")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("for")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token class-name"},[t._v("String")]),t._v(" word "),s("span",{staticClass:"token operator"},[t._v(":")]),t._v(" words"),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n        "),s("span",{staticClass:"token keyword"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("word"),s("span",{staticClass:"token punctuation"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("length")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("<")]),t._v(" minLength"),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n            minLength "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" word"),s("span",{staticClass:"token punctuation"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("length")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n        "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n    "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n\n    "),s("span",{staticClass:"token class-name"},[t._v("StringBuilder")]),t._v(" ans "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("new")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("StringBuilder")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("for")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token class-name"},[t._v("String")]),t._v(" word "),s("span",{staticClass:"token operator"},[t._v(":")]),t._v(" words"),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n        "),s("span",{staticClass:"token keyword"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("word"),s("span",{staticClass:"token punctuation"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("length")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("==")]),t._v(" minLength"),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n            ans"),s("span",{staticClass:"token punctuation"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("append")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("word"),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("append")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token string"},[t._v('" "')]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n        "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n    "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n\n    "),s("span",{staticClass:"token keyword"},[t._v("return")]),t._v(" ans"),s("span",{staticClass:"token punctuation"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("toString")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token punctuation"},[t._v("}")])])])]),s("h3",{attrs:{id:"задача-7-определить-сколько-блоков-воды-осталось-после-дождя-в-низинах-острова"}},[s("a",{attrs:{href:"#%D0%B7%D0%B0%D0%B4%D0%B0%D1%87%D0%B0-7-%D0%BE%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D0%B8%D1%82%D1%8C-%D1%81%D0%BA%D0%BE%D0%BB%D1%8C%D0%BA%D0%BE-%D0%B1%D0%BB%D0%BE%D0%BA%D0%BE%D0%B2-%D0%B2%D0%BE%D0%B4%D1%8B-%D0%BE%D1%81%D1%82%D0%B0%D0%BB%D0%BE%D1%81%D1%8C-%D0%BF%D0%BE%D1%81%D0%BB%D0%B5-%D0%B4%D0%BE%D0%B6%D0%B4%D1%8F-%D0%B2-%D0%BD%D0%B8%D0%B7%D0%B8%D0%BD%D0%B0%D1%85-%D0%BE%D1%81%D1%82%D1%80%D0%BE%D0%B2%D0%B0","aria-hidden":"true"}},[s("span",{staticClass:"icon icon-link"})]),t._v("Задача 7. Определить, сколько блоков воды осталось после дождя в низинах острова.")]),s("p",[t._v("Игра PitCraft происходит в двумерном мире, который состоит из блоков размером 1 на 1 метр. Остров игрока представляет собой набор столбцов различной высоты, состоящий из блоков камня и окруженный морем. Над островом прошел сильный дождь, который затопил водой все низины, а не поместившаяся в них вода стекла в море, не увеличив его уровень.")]),s("p",[t._v("По ландшафту острова определить, скоолько блоков воды осталось после дождя в низинах острова.")]),s("p",[s("strong",[s("em",[t._v("Решение:")])])]),s("p",[t._v("После того как вода нальется наш остров примет форму ступенек. Давайте найдем самый высокий столбик(вершину) и до этой вершины будут ступеньки на подъем, вся вода будет сливаться влево от вершины, а все что справа от вершины будет утекать вправо. ")]),s("p",[t._v("Разделим задачу на две задачи по вершине острова и решим сначала для левой а потом по аналогии для правой.")]),s("p",[t._v("Будем идти и запоминать максимальную высоту столбика который нам встретился, если следующий столбик меньше то добавляем разность высот между этими столбиками которая зальется водой, если же произошло обновление максимума, то количество воды не добавляем.")]),s("div",{staticClass:"gridsome-highlight",attrs:{"data-language":"java"}},[s("pre",{staticClass:"language-java"},[s("code",{staticClass:"language-java"},[s("span",{staticClass:"token keyword"},[t._v("public")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("static")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" "),s("span",{staticClass:"token function"},[t._v("isleFlood")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token keyword"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(" h"),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" maxPos "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("for")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" i "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v(" i "),s("span",{staticClass:"token operator"},[t._v("<")]),t._v(" h"),s("span",{staticClass:"token punctuation"},[t._v(".")]),t._v("length"),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v(" i"),s("span",{staticClass:"token operator"},[t._v("++")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n        "),s("span",{staticClass:"token keyword"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("h"),s("span",{staticClass:"token punctuation"},[t._v("[")]),t._v("i"),s("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v(">")]),t._v(" h"),s("span",{staticClass:"token punctuation"},[t._v("[")]),t._v("maxPos"),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n            maxPos "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" i"),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n        "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n    "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n\n    "),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" ans "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" nowMax "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("for")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" i "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v(" i "),s("span",{staticClass:"token operator"},[t._v("<")]),t._v(" maxPos"),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v(" i"),s("span",{staticClass:"token operator"},[t._v("++")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n        "),s("span",{staticClass:"token keyword"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("h"),s("span",{staticClass:"token punctuation"},[t._v("[")]),t._v("i"),s("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v(">")]),t._v(" nowMax"),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n            nowMax "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" h"),s("span",{staticClass:"token punctuation"},[t._v("[")]),t._v("i"),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n        "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n        ans "),s("span",{staticClass:"token operator"},[t._v("+=")]),t._v(" nowMax "),s("span",{staticClass:"token operator"},[t._v("-")]),t._v(" h"),s("span",{staticClass:"token punctuation"},[t._v("[")]),t._v("i"),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n\n    nowMax "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("for")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" i "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" h"),s("span",{staticClass:"token punctuation"},[t._v(".")]),t._v("length "),s("span",{staticClass:"token operator"},[t._v("-")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v(" i "),s("span",{staticClass:"token operator"},[t._v(">")]),t._v(" maxPos"),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v(" i"),s("span",{staticClass:"token operator"},[t._v("--")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n        "),s("span",{staticClass:"token keyword"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("h"),s("span",{staticClass:"token punctuation"},[t._v("[")]),t._v("i"),s("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v(">")]),t._v(" nowMax"),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n            nowMax "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" h"),s("span",{staticClass:"token punctuation"},[t._v("[")]),t._v("i"),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n        "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n        ans "),s("span",{staticClass:"token operator"},[t._v("+=")]),t._v(" nowMax "),s("span",{staticClass:"token operator"},[t._v("-")]),t._v(" h"),s("span",{staticClass:"token punctuation"},[t._v("[")]),t._v("i"),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("return")]),t._v(" ans"),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token punctuation"},[t._v("}")])])])]),s("h2",{attrs:{id:"задача-с-собеседования"}},[s("a",{attrs:{href:"#%D0%B7%D0%B0%D0%B4%D0%B0%D1%87%D0%B0-%D1%81-%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F","aria-hidden":"true"}},[s("span",{staticClass:"icon icon-link"})]),t._v("Задача с собеседования")]),s("h3",{attrs:{id:"задача-8---rle"}},[s("a",{attrs:{href:"#%D0%B7%D0%B0%D0%B4%D0%B0%D1%87%D0%B0-8---rle","aria-hidden":"true"}},[s("span",{staticClass:"icon icon-link"})]),t._v("Задача 8 - RLE")]),s("p",[t._v("Дана строка (возможно пустая), состоящая из букв A-Z: AAAABBBCCХYZDDDВEEEFFFAAAAAABBBBBBBBBBBBBBBBBB}\nНужно написать функцию RLE, которая на выходе даст строку вида: A4B3C2XYZD4E3F3F3A6B18. И сгенерирует ошибку если на вход пришла невалидная строка.")]),s("p",[t._v("Если символ встречался один раз, он остается без изменений; Если символ повторяется более 1 раза, к нему добавляется количество повторений.")]),s("p",[t._v("Попробуем упростить задачу и написать сначала функцию которая выдаст в ответе строку ABCXYZDEFAB."),s("br"),t._v("\nКладем изначально в переменную значение первого символа, далее проходим по всей строки и проверяем если символ не соответсвует предыдущему то добавляем предыдущий символ и обновляем его. В конце добавляем оставшийся последний символ.")]),s("div",{staticClass:"gridsome-highlight",attrs:{"data-language":"java"}},[s("pre",{staticClass:"language-java"},[s("code",{staticClass:"language-java"},[s("span",{staticClass:"token keyword"},[t._v("public")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("static")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("String")]),t._v(" "),s("span",{staticClass:"token function"},[t._v("easyPeasy")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token class-name"},[t._v("String")]),t._v(" s"),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n    "),s("span",{staticClass:"token class-name"},[t._v("StringBuilder")]),t._v(" ans "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("new")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("StringBuilder")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("char")]),t._v(" lastCh "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" s"),s("span",{staticClass:"token punctuation"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("charAt")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("for")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" i "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v(" i "),s("span",{staticClass:"token operator"},[t._v("<")]),t._v(" s"),s("span",{staticClass:"token punctuation"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("length")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v(" i"),s("span",{staticClass:"token operator"},[t._v("++")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n        "),s("span",{staticClass:"token keyword"},[t._v("if")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("s"),s("span",{staticClass:"token punctuation"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("charAt")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("i"),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("!=")]),t._v(" lastCh"),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n            ans"),s("span",{staticClass:"token punctuation"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("append")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("lastCh"),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n            lastCh "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" s"),s("span",{staticClass:"token punctuation"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("charAt")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("i"),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n        "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n    "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n    ans"),s("span",{staticClass:"token punctuation"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("append")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("lastCh"),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n    "),s("span",{staticClass:"token keyword"},[t._v("return")]),t._v(" ans"),s("span",{staticClass:"token punctuation"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("toString")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token punctuation"},[t._v("}")])])])]),s("p",[t._v("Для полноценного выполнения задачи чтобы посчитать сколько раз символ подряд встретился в строке нужно добавить разность между последней позицией текщего повторяющегося символа и позицией последнего отличающегося символа. Добавим анонимную функцию для вычисления.")]),s("div",{staticClass:"gridsome-highlight",attrs:{"data-language":"java"}},[s("pre",{staticClass:"language-java"},[s("code",{staticClass:"language-java"},[s("span",{staticClass:"token keyword"},[t._v("public")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("static")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("String")]),t._v(" "),s("span",{staticClass:"token function"},[t._v("rle")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token class-name"},[t._v("String")]),t._v(" s"),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n    "),s("span",{staticClass:"token class-name"},[t._v("StringBuilder")]),t._v(" ans "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("new")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("StringBuilder")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" lastPos "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("char")]),t._v(" lastCh "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" s"),s("span",{staticClass:"token punctuation"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("charAt")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n    "),s("span",{staticClass:"token class-name"},[t._v("BiFunction")]),s("span",{staticClass:"token generics"},[s("span",{staticClass:"token punctuation"},[t._v("<")]),s("span",{staticClass:"token class-name"},[t._v("StringBuilder")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("Integer")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("StringBuilder")]),s("span",{staticClass:"token punctuation"},[t._v(">")])]),t._v(" pack "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v("\n            "),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("str"),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" cnt"),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("->")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n                "),s("span",{staticClass:"token keyword"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("cnt "),s("span",{staticClass:"token operator"},[t._v(">")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n                    "),s("span",{staticClass:"token keyword"},[t._v("return")]),t._v(" str"),s("span",{staticClass:"token punctuation"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("append")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("cnt"),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n                "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n                "),s("span",{staticClass:"token keyword"},[t._v("return")]),t._v(" str"),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n            "),s("span",{staticClass:"token punctuation"},[t._v("}")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n    "),s("span",{staticClass:"token keyword"},[t._v("for")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token keyword"},[t._v("int")]),t._v(" i "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v(" i "),s("span",{staticClass:"token operator"},[t._v("<")]),t._v(" s"),s("span",{staticClass:"token punctuation"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("length")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v(" i"),s("span",{staticClass:"token operator"},[t._v("++")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n        "),s("span",{staticClass:"token keyword"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("s"),s("span",{staticClass:"token punctuation"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("charAt")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("i"),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("!=")]),t._v(" lastCh"),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("{")]),t._v("\n            ans"),s("span",{staticClass:"token punctuation"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("append")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("lastCh"),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n            pack"),s("span",{staticClass:"token punctuation"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("apply")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("ans"),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" i "),s("span",{staticClass:"token operator"},[t._v("-")]),t._v(" lastPos"),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n            lastCh "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" s"),s("span",{staticClass:"token punctuation"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("charAt")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("i"),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n            lastPos "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" i"),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n        "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n    "),s("span",{staticClass:"token punctuation"},[t._v("}")]),t._v("\n\n    ans"),s("span",{staticClass:"token punctuation"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("append")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("lastCh"),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    pack"),s("span",{staticClass:"token punctuation"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("apply")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),t._v("ans"),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" s"),s("span",{staticClass:"token punctuation"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("length")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("-")]),t._v(" lastPos"),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n    "),s("span",{staticClass:"token keyword"},[t._v("return")]),t._v(" ans"),s("span",{staticClass:"token punctuation"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("toString")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token punctuation"},[t._v("}")])])])]),s("h2",{attrs:{id:"вопросы"}},[s("a",{attrs:{href:"#%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B","aria-hidden":"true"}},[s("span",{staticClass:"icon icon-link"})]),t._v("Вопросы")]),s("ol",[s("li",[s("p",[s("em",[s("strong",[t._v("Алгоритмы линейного поиска это про алгоритмы Рабина Карпа?")])]),t._v("\nАлгоритм Рабина Карпа - это алгоритм поиска подстроки в строке и его с большой натяжкой можно назвать алгоритмом линейного поиска. Это довольно умный алгоритм.")])]),s("li",[s("p",[s("strong",[s("em",[t._v("Волнует ли вопрос оптимизации в алгоритме линейного поиска?")])]),t._v("\nДа, волнует, но бывают такие последовательности которые не обладают никаким свойством и задачи поиска максимума или поиска значения в последовательности про которую ничего не известно, никак быстрее не сделать мы так или иначе должны посмотреть каждое значение.")])])])])}),[],!1,null,null,null);"function"==typeof v&&v(k),"function"==typeof l&&l(k);s.default=k.exports}}]);